<?php
/**
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright (c) 2013 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);
 *
 *
 */

namespace oat\taoQtiItem\helpers;


class CssHelper{

    private static function _buildWarning() {
        return <<<EOF
                                  /*
                                 /  \
                                |    |
                              --:'''':--
THIS CODE IS GENERATED          :*_* :
                                _:"":\___
AUTOMAGICALLY    * *      ____.' :::     '._
                * *=====<<=)           \    :
DO NOT EDIT!     * *      '-'-'\_      /'._.'
                                  \====:_ ""
                                 .'     \
                                :       :
                               /   :    \
                              :   .      '.
                              :  : :      :
                              :__:-:__.;--'
                             <*_/   <*/


EOF;

    }

    /**
     * Stores an css array in the file
     *
     * @param \core_kernel_classes_resource $item
     * @param string $lang
     * @param string $styleSheetPath
     * @param array $cssArr
     * @return boolean true on success
     */
    public static function saveCssFile(\core_kernel_classes_resource $item, $lang, $styleSheetPath, $cssArr){

        $service = \taoItems_models_classes_ItemsService::singleton();
        $cssFile  = $service->getItemFolder($item, $lang) . $styleSheetPath;

        // make sure that 'no custom css' means exactly that
        if(empty($cssArr) && file_exists($cssFile)) {
            unlink($cssFile);
        }

        $css = self::_buildWarning() . self::arrayToCss($cssArr);
        if(!is_dir(dirname($cssFile))) {
            mkdir(dirname($cssFile), 0755, 1);
        }
        $count = file_put_contents($cssFile, $css);
        return $count > 0;
    }

    /**
     * Download existing CSS file
     *
     * @param \core_kernel_classes_resource $item
     * @param string $lang
     * @param string $styleSheetPath
     * @return string css on success
     */
    public static function downloadCssFile(\core_kernel_classes_resource $item, $lang, $styleSheetPath){

        $service = \taoItems_models_classes_ItemsService::singleton();
        $cssFile  = $service->getItemFolder($item, $lang) . $styleSheetPath;

        return file_get_contents($cssFile);
    }

    /**
     * Convert incoming CSS to CSS array
     * This CSS must have the format generated by the online editor
     *
     * @param $css
     * @return mixed
     */
    public static function cssToArray($css){
        if(!$css) {
            return array();
        }
        $css = str_replace(self::_buildWarning(), '', $css);
        $oldCssArr = explode("\n", $css);
        $newCssArr = array();
        foreach($oldCssArr as $line) {
            if(false === strpos($line, '{')) {
                continue;
            }

            preg_match('~(?P<selector>[^{]+)(\{)(?P<rules>[^}]+)\}~', $line, $matches);

            foreach($matches as $key => &$match){
                if(is_numeric($key)) {
                    continue;
                }
                $match = trim($match);
                if($key === 'rules') {
                    $ruleSet = array_filter(array_map('trim', explode(';', $match)));
                    $match = array();
                    foreach($ruleSet as $rule) {
                        $rule = array_map('trim', explode(':', $rule));
                        $match[$rule[0]] = $rule[1];
                    }
                }
            }

            $newCssArr[$matches['selector']] = $matches['rules'];
        }
        return $newCssArr;
    }

    /**
     * Convert incoming CSS array to proper CSS
     *
     * @param $array
     * @return string
     */
    public static function arrayToCss($array){
        $css = '';

        // rebuild CSS
        foreach($array as $key1 => $value1){
            $css .= $key1 . '{';

            foreach($value1 as $key2 => $value2){
                // in the case that the code is embedded in a media query
                if(is_array($value2)){
                    foreach($value2 as $value3){
                        $css .= $key2 . '{';
                        foreach($value3 as $mProp){
                            $css .= $mProp . ':' . $value3 . ';';
                        }
                        $css .= '}';
                    }
                }
                // regular selectors
                else{
                    $css .= $key2 . ':' . $value2 . ';';
                }
            }
            $css .= "}\n";
        }
        return $css;
    }

    /**
     * Loads the content of a css file into a css array
     * Returns an empty stylesheet if it does not yet exist
     *
     * @param \core_kernel_classes_resource $item
     * @param string $lang
     * @param string $styleSheet
     * @return array array with structure of 'selector' => rules
     */
    public static function loadCssFile(\core_kernel_classes_resource $item, $lang, $styleSheet) {

        $service = \taoItems_models_classes_ItemsService::singleton();
        $cssFile  = $service->getItemFolder($item, $lang) . $styleSheet;

        // no user style sheet has been created yet
        if(!is_file($cssFile)) {
            \common_Logger::d('Stylesheet ' . $cssFile . ' does not exist yet, returning empty array');
            return array();
        }

        $cssArr = self::cssToArray(file_get_contents($cssFile));
        return $cssArr;
    }


} 