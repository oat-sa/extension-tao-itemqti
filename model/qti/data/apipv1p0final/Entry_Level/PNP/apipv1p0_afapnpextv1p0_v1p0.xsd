<?xml version = "1.0" encoding = "UTF-8"?>
<xs:schema xmlns="http://www.imsglobal.org/xsd/apip/apipv1p0/imsapip_pnpv1p0"
     targetNamespace="http://www.imsglobal.org/xsd/apip/apipv1p0/imsapip_pnpv1p0"
     xmlns:xs="http://www.w3.org/2001/XMLSchema"
     xmlns:sch="http://purl.oclc.org/dsdl/schematron"
     version="IMS AFAPNP APIP EXT V1.0"
     elementFormDefault="qualified"
     attributeFormDefault="unqualified">
    <xs:import namespace="http://www.w3.org/XML/1998/namespace" schemaLocation="../../../w3/xml.xsd" />

    <xs:annotation>
        <xs:documentation>
            XSD Data File Information
            =========================
            Author:         Colin Smythe (IMS Global)
            Date:           31st January, 2014
            Version:        1.0
            Status:         Final Release
            Description:    This is the PSM for the APIP Extensions of the Access For All Personal 
                            Needs and Preferences for Digital Delivery data model.

            History:        Version 1.0: This is the original version of this APIP Extensions of the AfA PNP.

            License:        IPR and Distribution Notices

                            This machine readable file is derived from IMS Global specification IMS Accessible Portable Item Protocol (APIP) Version 1.0
                            found at http://www.imsglobal.org/apip and the original IMS Global schema binding or code base
                            http://www.imsglobal.org/apip.

                            Recipients of this document are requested to submit, with their comments, notification of any relevant 
                            patent claims or other intellectual property rights of which they may be aware that might be infringed by
                            any implementation of the specification set forth in this document, and to provide supporting documentation.

                            IMS takes no position regarding the validity or scope of any intellectual property or other rights that might
                            be claimed to pertain to the implementation or use of the technology described in this document or the extent 
                            to which any license under such rights might or might not be available; neither does it represent that it has 
                            made any effort to identify any such rights. Information on IMS procedures with respect to rights in IMS 
                            specifications can be found at the IMS Global Intellectual Property Rights web page: http://www.imsglobal.org/ipr/imsipr_policyFinal.pdf.

                            Copyright Â© IMS Global Learning Consortium 1999-2013. All Rights Reserved.

                            Use of this specification to develop products or services is governed by the license with IMS found on the IMS website: http://www.imsglobal.org/license.html.

                            Permission is granted to all parties to use excerpts from this document as needed in producing requests for proposals.

                            The limited permissions granted above are perpetual and will not be revoked by IMS or its successors or assigns.

                            THIS SPECIFICATION IS BEING OFFERED WITHOUT ANY WARRANTY WHATSOEVER, AND IN PARTICULAR, ANY WARRANTY OF NONINFRINGEMENT IS
                            EXPRESSLY DISCLAIMED. ANY USE OF THIS SPECIFICATION SHALL BE MADE ENTIRELY AT THE IMPLEMENTERS OWN RISK, AND NEITHER THE CONSORTIUM
                            NOR ANY OF ITS MEMBERS OR SUBMITTERS, SHALL HAVE ANY LIABILITY WHATSOEVER TO ANY IMPLEMENTER OR THIRD PARTY FOR ANY DAMAGES OF
                            ANY NATURE WHATSOEVER, DIRECTLY OR INDIRECTLY, ARISING FROM THE USE OF THIS SPECIFICATION.

            Source UML File Information
            ===========================
            The source file information must be supplied as an XMI file (without diagram layout information).
            The supported UML authoring tools are:
            (a) Poseidon - v6 (and later)
            (b) Papyrus - v0.9.2 (and later)

            Source XSLT File Information
            ============================
            XSL Generator:    Specificationv1p0_GenerationToolv1.xsl
            XSLT Processor:   Saxon-PE-9.5.0.2
            Release:          1.0
            Date:             31st March, 2013
            Autogen Engineer: Colin Smythe (IMS Global, UK)
            Autogen Date:     2014-02-06

            IMS Global Auto-generation Binding Tool-kit (I-BAT)
            ===================================================
            This file was auto-generated using the IMS Global Binding Auto-generation Tool-kit (I-BAT).  While every
            attempt has been made to ensure that this tool auto-generates the files correctly, users should be aware
            that this is an experimental tool.  Permission is given to make use of this tool.  IMS Global makes no
            claim on the materials created by third party users of this tool.  Details on how to use this tool
            are contained in the IMS Global "I-BAT" documentation available at the IMS Global web-site:
            http://www.imsglobal.org.

            Tool Copyright:  2012-2013  (c) IMS Global Learning Consortium Inc.  All Rights Reserved.
        </xs:documentation>
    </xs:annotation>

    <xs:annotation>
        <xs:documentation>
            Schematron Strict Selection Validation Rules
            ============================================
            This is the set of Schematron rules that have been created to enforce the use of the "Unordered" stereotype.
            These rules ensure that the number of entries in an unordered complexType of an element obey the multiplicity constraints.
            This is required so that any-order/any-multiplicity complexTypes can be constructed and validated.
        </xs:documentation>
        <xs:appinfo>
            <sch:ns uri="http://www.imsglobal.org/xsd/apip/apipv1p0/imsapip_pnpv1p0" prefix="apip" />
            <sch:title>Schematron validation rules for the enforcement of the Unordered stereotype.</sch:title>

            <!-- RULESET ******************************************************************* -->
            <sch:pattern abstract="false" id="APIPContent.Type">
                <sch:title>[RULESET] For the APIPContent.Type complexType.</sch:title>

                <sch:rule abstract="false" context="apip:apipContent">

                    <sch:assert test="count(apip:languageLearner) = 0 or count(apip:languageLearner) = 1">
                        [RULE for Root Class Attribute 1] Invalid number of "languageLearner" elements: <sch:value-of select="count(apip:languageLearner)" />.
                    </sch:assert>

                    <sch:assert test="count(apip:cognitiveGuidance) = 0 or count(apip:cognitiveGuidance) = 1">
                        [RULE for Root Class Attribute 2] Invalid number of "cognitiveGuidance" elements: <sch:value-of select="count(apip:cognitiveGuidance)" />.
                    </sch:assert>

                    <sch:assert test="count(apip:scaffolding) = 0 or count(apip:scaffolding) = 1">
                        [RULE for Root Class Attribute 3] Invalid number of "scaffolding" elements: <sch:value-of select="count(apip:scaffolding)" />.
                    </sch:assert>

                    <sch:assert test="count(apip:chunking) = 0 or count(apip:chunking) = 1">
                        [RULE for Root Class Attribute 4] Invalid number of "chunking" elements: <sch:value-of select="count(apip:chunking)" />.
                    </sch:assert>

                    <sch:assert test="count(apip:keywordEmphasis) = 0 or count(apip:keywordEmphasis) = 1">
                        [RULE for Root Class Attribute 5] Invalid number of "keywordEmphasis" elements: <sch:value-of select="count(apip:keywordEmphasis)" />.
                    </sch:assert>

                    <sch:assert test="count(apip:reducedAnswers) = 0 or count(apip:reducedAnswers) = 1">
                        [RULE for Root Class Attribute 6] Invalid number of "reducedAnswers" elements: <sch:value-of select="count(apip:reducedAnswers)" />.
                    </sch:assert>

                    <sch:assert test="count(apip:negativesRemoved) = 0 or count(apip:negativesRemoved) = 1">
                        [RULE for Root Class Attribute 7] Invalid number of "negativesRemoved" elements: <sch:value-of select="count(apip:negativesRemoved)" />.
                    </sch:assert>

                    <sch:assert test="count(apip:alternativeRepresentations) = 0 or count(apip:alternativeRepresentations) = 1">
                        [RULE for Root Class Attribute 8] Invalid number of "alternativeRepresentations" elements: <sch:value-of select="count(apip:alternativeRepresentations)" />.
                    </sch:assert>

                    <sch:assert test="count(apip:keywordTranslations) = 0 or count(apip:keywordTranslations) = 1">
                        [RULE for Root Class Attribute 9] Invalid number of "keywordTranslations" elements: <sch:value-of select="count(apip:keywordTranslations)" />.
                    </sch:assert>

                    <sch:assert test="count(apip:itemTranslationDisplay) = 0 or count(apip:itemTranslationDisplay) = 1">
                        [RULE for Root Class Attribute 10] Invalid number of "itemTranslationDisplay" elements: <sch:value-of select="count(apip:itemTranslationDisplay)" />.
                    </sch:assert>

                    <sch:assert test="count(apip:signing) = 0 or count(apip:signing) = 1">
                        [RULE for Root Class Attribute 11] Invalid number of "signing" elements: <sch:value-of select="count(apip:signing)" />.
                    </sch:assert>

                    <sch:assert test="count(apip:spoken) = 0 or count(apip:spoken) = 1">
                        [RULE for Root Class Attribute 12] Invalid number of "spoken" elements: <sch:value-of select="count(apip:spoken)" />.
                    </sch:assert>

                    <sch:assert test="count(apip:simplifiedLanguage) = 0 or count(apip:simplifiedLanguage) = 1">
                        [RULE for Root Class Attribute 13] Invalid number of "simplifiedLanguage" elements: <sch:value-of select="count(apip:simplifiedLanguage)" />.
                    </sch:assert>

                </sch:rule>

            </sch:pattern>
            <!-- *************************************************************************** -->

            <!-- RULESET ******************************************************************* -->
            <sch:pattern abstract="false" id="APIPControl.Type">
                <sch:title>[RULESET] For the APIPControl.Type complexType.</sch:title>

                <sch:rule abstract="false" context="apip:apipControl">

                    <sch:assert test="count(apip:breaks) = 0 or count(apip:breaks) = 1">
                        [RULE for Root Class Attribute 1] Invalid number of "breaks" elements: <sch:value-of select="count(apip:breaks)" />.
                    </sch:assert>

                    <sch:assert test="count(apip:additionalTestingTime) = 0 or count(apip:additionalTestingTime) = 1">
                        [RULE for Root Class Attribute 2] Invalid number of "additionalTestingTime" elements: <sch:value-of select="count(apip:additionalTestingTime)" />.
                    </sch:assert>

                    <sch:assert test="count(apip:lineReader) = 0 or count(apip:lineReader) = 1">
                        [RULE for Root Class Attribute 3] Invalid number of "lineReader" elements: <sch:value-of select="count(apip:lineReader)" />.
                    </sch:assert>

                </sch:rule>

            </sch:pattern>
            <!-- *************************************************************************** -->

            <!-- RULESET ******************************************************************* -->
            <sch:pattern abstract="false" id="APIPDisplay.Type">
                <sch:title>[RULESET] For the APIPDisplay.Type complexType.</sch:title>

                <sch:rule abstract="false" context="apip:apipDisplay">

                    <sch:assert test="count(apip:masking) = 0 or count(apip:masking) = 1">
                        [RULE for Root Class Attribute 1] Invalid number of "masking" elements: <sch:value-of select="count(apip:masking)" />.
                    </sch:assert>

                    <sch:assert test="count(apip:encouragement) = 0 or count(apip:encouragement) = 1">
                        [RULE for Root Class Attribute 2] Invalid number of "encouragement" elements: <sch:value-of select="count(apip:encouragement)" />.
                    </sch:assert>

                    <sch:assert test="count(apip:auditoryBackground) = 0 or count(apip:auditoryBackground) = 1">
                        [RULE for Root Class Attribute 3] Invalid number of "auditoryBackground" elements: <sch:value-of select="count(apip:auditoryBackground)" />.
                    </sch:assert>

                </sch:rule>

            </sch:pattern>
            <!-- *************************************************************************** -->

            <!-- RULESET ******************************************************************* -->
            <sch:pattern abstract="false" id="APIPScreenEnhancement.Type">
                <sch:title>[RULESET] For the APIPScreenEnhancement.Type complexType.</sch:title>

                <sch:rule abstract="false" context="apip:apipScreenEnhancement">

                    <sch:assert test="count(apip:increasedWhiteSpacing) = 0 or count(apip:increasedWhiteSpacing) = 1">
                        [RULE for Root Class Attribute 1] Invalid number of "increasedWhiteSpacing" elements: <sch:value-of select="count(apip:increasedWhiteSpacing)" />.
                    </sch:assert>

                    <sch:assert test="count(apip:colourOverlay) = 0 or count(apip:colourOverlay) = 1">
                        [RULE for Root Class Attribute 2] Invalid number of "colourOverlay" elements: <sch:value-of select="count(apip:colourOverlay)" />.
                    </sch:assert>

                    <sch:assert test="count(apip:foregroundColour) = 0 or count(apip:foregroundColour) = 1">
                        [RULE for Root Class Attribute 3] Invalid number of "foregroundColour" elements: <sch:value-of select="count(apip:foregroundColour)" />.
                    </sch:assert>

                    <sch:assert test="count(apip:backgroundColour) = 0 or count(apip:backgroundColour) = 1">
                        [RULE for Root Class Attribute 4] Invalid number of "backgroundColour" elements: <sch:value-of select="count(apip:backgroundColour)" />.
                    </sch:assert>

                    <sch:assert test="count(apip:invertColourChoice) = 0 or count(apip:invertColourChoice) = 1">
                        [RULE for Root Class Attribute 5] Invalid number of "invertColourChoice" elements: <sch:value-of select="count(apip:invertColourChoice)" />.
                    </sch:assert>

                    <sch:assert test="count(apip:magnification) = 0 or count(apip:magnification) = 1">
                        [RULE for Root Class Attribute 6] Invalid number of "magnification" elements: <sch:value-of select="count(apip:magnification)" />.
                    </sch:assert>

                </sch:rule>

            </sch:pattern>
            <!-- *************************************************************************** -->

        </xs:appinfo>
    </xs:annotation>

    <!-- Generate Global Attributes (non-assigned) ******************************************************** -->

    <!-- ================================================================================================== -->

    <!-- Generate Global Attributes *********************************************************************** -->

    <!-- ================================================================================================== -->

    <!-- Generate Global List Types *********************************************************************** -->

    <!-- ================================================================================================== -->

    <!-- Generate Namespaced extension Group  ************************************************************* -->

    <!-- ================================================================================================== -->

    <!-- Generate Special DataTypes  ********************************************************************** -->

    <!-- ================================================================================================== -->

    <!-- Generate the enumerated simpleType declarations ************************************************** -->

    <!-- ================================================================================================== -->

    <!-- Generate the simpleType elements based on IMS data-types (Parameter) ***************************** -->

    <!-- ================================================================================================== -->

    <!-- Generate the simpleType elements based on IMS data-types (Derived) ******************************* -->

    <!-- ================================================================================================== -->

    <!-- Generate the simpleType elements based on IMS data-types (Union) ********************************* -->

    <!-- ================================================================================================== -->

    <!-- Generate the simpleType elements based on IMS data-types (Complex) ******************************* -->

    <!-- ================================================================================================== -->

    <!-- Generate the derived data-type elements based upon simpleType ************************************ -->

    <xs:simpleType name="ActivateByDefault.Type">
        <xs:restriction base="xs:boolean" />
    </xs:simpleType>

    <xs:simpleType name="AssignedSupport.Type">
        <xs:restriction base="xs:boolean" />
    </xs:simpleType>

    <xs:simpleType name="Decimal.Type">
        <xs:restriction base="xs:decimal">
            <xs:minInclusive value="0.0" />
            <xs:maxInclusive value="10.0" />
        </xs:restriction>
    </xs:simpleType>

    <!-- ================================================================================================== -->

    <!-- Generate the derived data-type elements based upon derived simpleType **************************** -->

    <!-- ================================================================================================== -->

    <!-- Generate the ComplexTypes ************************************************************************ -->

    <xs:complexType name="AdditionalTestingTime.Type" abstract="false" mixed="false">
        <xs:annotation>
            <xs:documentation source="documentation">
                The AdditionalTestingTime complexType is the container for the settings for the provision of additional testing time.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="assignedSupport" type="AssignedSupport.Type" default="true" minOccurs="1" maxOccurs="1" />
            <xs:element name="timeMultiplier" default="unlimited" minOccurs="1" maxOccurs="1">
                <xs:simpleType>
                    <xs:union>
                        <xs:simpleType>
                            <xs:restriction base="Decimal.Type" />
                        </xs:simpleType>
                        <xs:simpleType>
                            <xs:restriction base="xs:string">
                                <xs:enumeration value="unlimited" />
                            </xs:restriction>
                        </xs:simpleType>
                    </xs:union>
                </xs:simpleType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="AlternativeRepresentations.Type" abstract="false" mixed="false">
        <xs:annotation>
            <xs:documentation source="documentation">
                The AlternativeRepresentations is the container for the operational mode settings for the provision of alternative representations support. The settings are: 'assignedSupport', 'activateByDefault' and the settings themselves.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="assignedSupport" type="AssignedSupport.Type" default="true" minOccurs="1" maxOccurs="1" />
            <xs:element name="activateByDefault" type="ActivateByDefault.Type" default="true" minOccurs="1" maxOccurs="1" />
            <xs:element name="alternativeRepresentationType" minOccurs="1" maxOccurs="unbounded">
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="Audio" />
                        <xs:enumeration value="Video" />
                        <xs:enumeration value="Graphic" />
                        <xs:enumeration value="Text" />
                        <xs:enumeration value="Interactive" />
                    </xs:restriction>
                </xs:simpleType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="APIPContent.Type" abstract="false" mixed="false">
        <xs:annotation>
            <xs:documentation source="documentation">
                The APIPControl complexType is the container for the set of APIP extensions to the AfA PNP Content complexType.
            </xs:documentation>
        </xs:annotation>
        <xs:choice minOccurs = "0" maxOccurs = "unbounded">
            <xs:element name="languageLearner" type="LanguageLearner.Type" minOccurs="0" maxOccurs="1" />
            <xs:element name="cognitiveGuidance" type="CognitiveGuidance.Type" minOccurs="0" maxOccurs="1" />
            <xs:element name="scaffolding" type="Scaffolding.Type" minOccurs="0" maxOccurs="1" />
            <xs:element name="chunking" type="Chunking.Type" minOccurs="0" maxOccurs="1" />
            <xs:element name="keywordEmphasis" type="KeywordEmphasis.Type" minOccurs="0" maxOccurs="1" />
            <xs:element name="reducedAnswers" type="ReducedAnswers.Type" minOccurs="0" maxOccurs="1" />
            <xs:element name="negativesRemoved" type="NegativesRemoved.Type" minOccurs="0" maxOccurs="1" />
            <xs:element name="alternativeRepresentations" type="AlternativeRepresentations.Type" minOccurs="0" maxOccurs="1" />
            <xs:element name="keywordTranslations" type="KeywordTranslations.Type" minOccurs="0" maxOccurs="1" />
            <xs:element name="itemTranslationDisplay" type="ItemTranslationDisplay.Type" minOccurs="0" maxOccurs="1" />
            <xs:element name="signing" type="Signing.Type" minOccurs="0" maxOccurs="1" />
            <xs:element name="spoken" type="Spoken.Type" minOccurs="0" maxOccurs="1" />
            <xs:element name="simplifiedLanguage" type="SimplifiedLanguage.Type" minOccurs="0" maxOccurs="1" />
        </xs:choice>
    </xs:complexType>

    <xs:complexType name="APIPControl.Type" abstract="false" mixed="false">
        <xs:annotation>
            <xs:documentation source="documentation">
                The APIPControl complexType is the container for the collection of APIP extensions to the Control complexType in the AfA PNP.
            </xs:documentation>
        </xs:annotation>
        <xs:choice minOccurs = "0" maxOccurs = "unbounded">
            <xs:element name="breaks" type="Breaks.Type" minOccurs="0" maxOccurs="1" />
            <xs:element name="additionalTestingTime" type="AdditionalTestingTime.Type" minOccurs="0" maxOccurs="1" />
            <xs:element name="lineReader" type="LineReader.Type" minOccurs="0" maxOccurs="1" />
        </xs:choice>
    </xs:complexType>

    <xs:complexType name="APIPDisplay.Type" abstract="false" mixed="false">
        <xs:annotation>
            <xs:documentation source="documentation">
                The APIPDisplay complexType is the container for the user preferences for access to the various display representations that may be available in an APIP object.
            </xs:documentation>
        </xs:annotation>
        <xs:choice minOccurs = "0" maxOccurs = "unbounded">
            <xs:element name="masking" type="Masking.Type" minOccurs="0" maxOccurs="1" />
            <xs:element name="encouragement" type="Encouragement.Type" minOccurs="0" maxOccurs="1" />
            <xs:element name="auditoryBackground" type="AuditoryBackground.Type" minOccurs="0" maxOccurs="1" />
        </xs:choice>
    </xs:complexType>

    <xs:complexType name="APIPScreenEnhancement.Type" abstract="false" mixed="false">
        <xs:annotation>
            <xs:documentation source="documentation">
                The APIPScreenEnhancement complexType is the container for the collection of the APIP extensions to the 'screenEnhancement' element in the AfA PNP v2.0 specification.
            </xs:documentation>
        </xs:annotation>
        <xs:choice minOccurs = "0" maxOccurs = "unbounded">
            <xs:element name="increasedWhiteSpacing" type="IncreasedWhiteSpacing.Type" minOccurs="0" maxOccurs="1" />
            <xs:element name="colourOverlay" type="ColourOverlay.Type" minOccurs="0" maxOccurs="1" />
            <xs:element name="foregroundColour" type="ForegroundColour.Type" minOccurs="0" maxOccurs="1" />
            <xs:element name="backgroundColour" type="BackgroundColour.Type" minOccurs="0" maxOccurs="1" />
            <xs:element name="invertColourChoice" type="InvertColourChoice.Type" minOccurs="0" maxOccurs="1" />
            <xs:element name="magnification" type="Magnification.Type" minOccurs="0" maxOccurs="1" />
        </xs:choice>
    </xs:complexType>

    <xs:complexType name="AuditoryBackground.Type" abstract="false" mixed="false">
        <xs:annotation>
            <xs:documentation source="documentation">
                The Braille complexType is the container for the settings for the provision of support for the use of a line reader. The values for the Braille are provided in the associated AfA PNP display.braille container.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="assignedSupport" type="AssignedSupport.Type" default="true" minOccurs="1" maxOccurs="1" />
            <xs:element name="activateByDefault" type="ActivateByDefault.Type" default="false" minOccurs="1" maxOccurs="1" />
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="BackgroundColour.Type" abstract="false" mixed="false">
        <xs:annotation>
            <xs:documentation source="documentation">
                The BackgroundColour complexType is the container for the settings for the provision of support for the use of a line reader. The value for the background colour is provided in the associated AfA PNP display.screenEnhancement container.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="assignedSupport" type="AssignedSupport.Type" default="true" minOccurs="1" maxOccurs="1" />
            <xs:element name="activateByDefault" type="ActivateByDefault.Type" default="true" minOccurs="1" maxOccurs="1" />
            <xs:element name="colour" type="xs:hexBinary" minOccurs="0" maxOccurs="1" />
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="Breaks.Type" abstract="false" mixed="false">
        <xs:annotation>
            <xs:documentation source="documentation">
                The Breaks complexType is the container for the settings to be applied for the support of breaks. The only setting is for the 'assignedSupport'.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="assignedSupport" type="AssignedSupport.Type" default="true" minOccurs="1" maxOccurs="1" />
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="Chunking.Type" abstract="false" mixed="false">
        <xs:annotation>
            <xs:documentation source="documentation">
                The Chunking complexType is the container for the settings for the support of the chunking functionality. The settings are the 'assignedSupport' and the 'activateByDefault' modes.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="assignedSupport" type="AssignedSupport.Type" default="true" minOccurs="1" maxOccurs="1" />
            <xs:element name="activateByDefault" type="ActivateByDefault.Type" default="true" minOccurs="1" maxOccurs="1" />
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="CognitiveGuidance.Type" abstract="false" mixed="false">
        <xs:annotation>
            <xs:documentation source="documentation">
                The CognitiveGuidancer complexType is the container for the settings for the support of the guidance functionality. The settings are the 'assignedSupport' and the 'activateByDefault' modes.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="assignedSupport" type="AssignedSupport.Type" default="true" minOccurs="1" maxOccurs="1" />
            <xs:element name="activateByDefault" type="ActivateByDefault.Type" default="true" minOccurs="1" maxOccurs="1" />
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="ColourOverlay.Type" abstract="false" mixed="false">
        <xs:annotation>
            <xs:documentation source="documentation">
                The ColourOverlay complexType is the container for the operational mode settings for colour overlay provison and usage. The settings are: 'assignedSupport', 'activateByDefault' and the colour overlay value itself.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="assignedSupport" type="AssignedSupport.Type" default="true" minOccurs="1" maxOccurs="1" />
            <xs:element name="activateByDefault" type="ActivateByDefault.Type" default="false" minOccurs="1" maxOccurs="1" />
            <xs:element name="colour" type="xs:hexBinary" minOccurs="0" maxOccurs="1" />
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="Encouragement.Type" abstract="false" mixed="false">
        <xs:annotation>
            <xs:documentation source="documentation">
                The EncouragementMode complexType is the container for the information concerning the configuration of the support for encuoragement.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="assignedSupport" type="AssignedSupport.Type" default="true" minOccurs="1" maxOccurs="1" />
            <xs:element name="actvateByDefault" type="ActivateByDefault.Type" default="true" minOccurs="1" maxOccurs="1" />
            <xs:choice minOccurs="1" maxOccurs="unbounded">
                <xs:element name="textMessageString" type="xs:normalizedString" minOccurs="1" maxOccurs="unbounded" />
                <xs:element name="soundFileHref" type="xs:anyURI" minOccurs="1" maxOccurs="unbounded" />
            </xs:choice>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="ForegroundColour.Type" abstract="false" mixed="false">
        <xs:annotation>
            <xs:documentation source="documentation">
                The ForegroundColour complexType is the container for the settings for the provision of support for the use of a line reader. The value for the foreground colour is provided in the associated AfAPNP display.screenEnhancement container.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="assignedSupport" type="AssignedSupport.Type" default="true" minOccurs="1" maxOccurs="1" />
            <xs:element name="activateByDefault" type="ActivateByDefault.Type" default="true" minOccurs="1" maxOccurs="1" />
            <xs:element name="colour" type="xs:hexBinary" minOccurs="0" maxOccurs="1" />
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="IncreasedWhiteSpacing.Type" abstract="false" mixed="false">
        <xs:annotation>
            <xs:documentation source="documentation">
                The IncreasedWhiteSpace complexType is the container for the operational mode settings for white spacing. The settings are: 'assignedSupport', 'activateByDefault' and the text constructs for which the settings are to be applied.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="assignedSupport" type="AssignedSupport.Type" default="true" minOccurs="1" maxOccurs="1" />
            <xs:element name="activateByDefault" type="ActivateByDefault.Type" default="true" minOccurs="1" maxOccurs="1" />
            <xs:element name="increasedWhiteSpacingType" type="IncreasedWhiteSpacingType.Type" minOccurs="0" maxOccurs="1" />
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="IncreasedWhiteSpacingType.Type" abstract="false" mixed="false">
        <xs:annotation>
            <xs:documentation source="documentation">
                The IncreasedWhiteSpaceType complexType is the container for the objects for which the whitespacing settings are defined.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="Line" type="xs:boolean" minOccurs="1" maxOccurs="1" />
            <xs:element name="Word" type="xs:boolean" minOccurs="1" maxOccurs="1" />
            <xs:element name="Character" type="xs:boolean" minOccurs="1" maxOccurs="1" />
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="InvertColourChoice.Type" abstract="false" mixed="false">
        <xs:annotation>
            <xs:documentation source="documentation">
                The InvertColourChoice complexType is the container for the settings for the provision of support for the use of a line reader. The value for the object is provided in the associated AfA PNP display.screenEnhancement container.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="assignedSupport" type="AssignedSupport.Type" default="true" minOccurs="1" maxOccurs="1" />
            <xs:element name="activateByDefault" type="ActivateByDefault.Type" default="true" minOccurs="1" maxOccurs="1" />
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="ItemTranslationDisplay.Type" abstract="false" mixed="false">
        <xs:sequence>
            <xs:element name="assignedSupport" type="AssignedSupport.Type" default="true" minOccurs="1" maxOccurs="1" />
            <xs:element name="activateByDefault" type="ActivateByDefault.Type" default="true" minOccurs="1" maxOccurs="1" />
        </xs:sequence>
        <xs:attribute ref="xml:lang" use="required" />
    </xs:complexType>

    <xs:complexType name="KeywordEmphasis.Type" abstract="false" mixed="false">
        <xs:annotation>
            <xs:documentation source="documentation">
                The KeywordHighlight complexType is the container for the settings for the support of the keyword highlight functionality. The settings are the 'assignedSupport' and the 'activateByDefault' modes.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="assignedSupport" type="AssignedSupport.Type" default="true" minOccurs="1" maxOccurs="1" />
            <xs:element name="activateByDefault" type="ActivateByDefault.Type" default="true" minOccurs="1" maxOccurs="1" />
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="KeywordTranslations.Type" abstract="false" mixed="false">
        <xs:sequence>
            <xs:element name="assignedSupport" type="AssignedSupport.Type" default="true" minOccurs="1" maxOccurs="1" />
            <xs:element name="activateByDefault" type="ActivateByDefault.Type" default="true" minOccurs="1" maxOccurs="1" />
        </xs:sequence>
        <xs:attribute ref="xml:lang" use="required" />
    </xs:complexType>

    <xs:complexType name="LanguageLearner.Type" abstract="false" mixed="false">
        <xs:annotation>
            <xs:documentation source="documentation">
                The LanguageLearner complexType is the container for the settings for the support of the language learner functionality. The settings are the 'assignedSupport' and the 'activateByDefault' modes.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="assignedSupport" type="AssignedSupport.Type" default="true" minOccurs="1" maxOccurs="1" />
            <xs:element name="activateByDefault" type="ActivateByDefault.Type" default="true" minOccurs="1" maxOccurs="1" />
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="LineReader.Type" abstract="false" mixed="false">
        <xs:annotation>
            <xs:documentation source="documentation">
                The LineReader complexType is the container for the settings for the provision of support for the use of a line reader.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="assignedSupport" type="AssignedSupport.Type" default="true" minOccurs="1" maxOccurs="1" />
            <xs:element name="activateByDefault" type="ActivateByDefault.Type" default="false" minOccurs="1" maxOccurs="1" />
            <xs:element name="colour" type="xs:hexBinary" minOccurs="0" maxOccurs="1" />
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="Magnification.Type" abstract="false" mixed="false">
        <xs:annotation>
            <xs:documentation source="documentation">
                The Magnification complexType is the container for the settings for the provision of support for the use of a line reader. The value for the magnification is provided in the associated AfA PNP display.screenEnhancement container.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="assignedSupport" type="AssignedSupport.Type" default="true" minOccurs="1" maxOccurs="1" />
            <xs:element name="activateByDefault" type="ActivateByDefault.Type" default="true" minOccurs="1" maxOccurs="1" />
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="Masking.Type" abstract="false" mixed="false">
        <xs:annotation>
            <xs:documentation source="documentation">
                The Masking complexType is the container for the information concerning the configuration of the masking support.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="assignedSupport" type="AssignedSupport.Type" default="true" minOccurs="1" maxOccurs="1" />
            <xs:element name="activateByDefault" type="ActivateByDefault.Type" default="false" minOccurs="1" maxOccurs="1" />
            <xs:element name="maskingType" minOccurs="1" maxOccurs="2">
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="CustomMask" />
                        <xs:enumeration value="AnswerMask" />
                    </xs:restriction>
                </xs:simpleType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="NegativesRemoved.Type" abstract="false" mixed="false">
        <xs:annotation>
            <xs:documentation source="documentation">
                The NegativesRemoved complexType is the container for the settings for the support of the removal of negatives functionality. The settings are the 'assignedSupport' and the 'activateByDefault' modes.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="assignedSupport" type="AssignedSupport.Type" default="true" minOccurs="1" maxOccurs="1" />
            <xs:element name="activateByDefault" type="ActivateByDefault.Type" default="true" minOccurs="1" maxOccurs="1" />
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="ReducedAnswers.Type" abstract="false" mixed="false">
        <xs:annotation>
            <xs:documentation source="documentation">
                The ReducedAnswers complexType is the container for the settings for the support of the removal of answer options functionality. The settings are the 'assignedSupport' and the 'activateByDefault' modes.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="assignedSupport" type="AssignedSupport.Type" default="true" minOccurs="1" maxOccurs="1" />
            <xs:element name="activateByDefault" type="ActivateByDefault.Type" default="true" minOccurs="1" maxOccurs="1" />
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="Scaffolding.Type" abstract="false" mixed="false">
        <xs:annotation>
            <xs:documentation source="documentation">
                The Scaffolding complexType is the container for the settings for the support of the scaffolding functionality. The settings are the 'assignedSupport' and the 'activateByDefault' modes.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="assignedSupport" type="AssignedSupport.Type" default="true" minOccurs="1" maxOccurs="1" />
            <xs:element name="activateByDefault" type="ActivateByDefault.Type" default="true" minOccurs="1" maxOccurs="1" />
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="Signing.Type" abstract="false" mixed="false">
        <xs:annotation>
            <xs:documentation source="documentation">
                The Signing complexType is the container for the settings for the support of the signing functionality. The settings are the 'assignedSupport', 'activateByDefault' and 'signing' modes.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="assignedSupport" type="AssignedSupport.Type" default="true" minOccurs="1" maxOccurs="1" />
            <xs:element name="activateByDefault" type="ActivateByDefault.Type" default="true" minOccurs="1" maxOccurs="1" />
            <xs:element name="signingType" minOccurs="1" maxOccurs="1">
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="ASL" />
                        <xs:enumeration value="SignedEnglish" />
                    </xs:restriction>
                </xs:simpleType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="SimplifiedLanguage.Type" abstract="false" mixed="false">
        <xs:annotation>
            <xs:documentation source="documentation">
                The SimplifiedLanguage complexType is the container for the settings for the support of the simplified language functionality. The settings are the 'assignedSupport' and the 'activateByDefault' modes.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="assignedSupport" type="AssignedSupport.Type" default="true" minOccurs="1" maxOccurs="1" />
            <xs:element name="activateByDefault" type="ActivateByDefault.Type" default="true" minOccurs="1" maxOccurs="1" />
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="Spoken.Type" abstract="false" mixed="false">
        <xs:annotation>
            <xs:documentation source="documentation">
                The Spoken complexType is the container for the personal needs and preferences settings supplied by APIP-enabled content.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="assignedSupport" type="AssignedSupport.Type" default="true" minOccurs="1" maxOccurs="1" />
            <xs:element name="activateByDefault" type="ActivateByDefault.Type" default="true" minOccurs="1" maxOccurs="1" />
            <xs:element name="spokenSourcePreference" default="Human" minOccurs="1" maxOccurs="1">
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="Human" />
                        <xs:enumeration value="Synthetic" />
                    </xs:restriction>
                </xs:simpleType>
            </xs:element>
            <xs:element name="readAtStartPreference" type="xs:boolean" default="true" minOccurs="1" maxOccurs="1" />
            <xs:element name="userSpokenPreference" default="TextOnly" minOccurs="0" maxOccurs="1">
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="TextOnly" />
                        <xs:enumeration value="GraphicsOnly" />
                        <xs:enumeration value="TextGraphics" />
                        <xs:enumeration value="NonVisual" />
                    </xs:restriction>
                </xs:simpleType>
            </xs:element>
            <xs:element name="directionsOnly" type="xs:boolean" default="false" minOccurs="0" maxOccurs="1" />
        </xs:sequence>
    </xs:complexType>

    <!-- ================================================================================================== -->

    <!-- Generate the derived ComplexTypes **************************************************************** -->

    <!-- ================================================================================================== -->

    <!-- Declaration of the elements (Complex) ************************************************************ -->

    <!-- ================================================================================================== -->

    <!-- Declaration of the elements (Derived) ************************************************************ -->

    <!-- ================================================================================================== -->

    <!-- Declaration of the root element(s) *************************************************************** -->

    <xs:element name="activateByDefault" type="ActivateByDefault.Type" default = "true" />
    <xs:element name="apipContent" type="APIPContent.Type" />
    <xs:element name="apipControl" type="APIPControl.Type" />
    <xs:element name="apipDisplay" type="APIPDisplay.Type" />
    <xs:element name="apipScreenEnhancement" type="APIPScreenEnhancement.Type" />
    <xs:element name="assignedSupport" type="AssignedSupport.Type" default = "true" />

    <!-- ================================================================================================== -->

</xs:schema>
