{"version":3,"mappings":"AAsBA,YACA,gBAIAA,oDACAC,mDACAC,gDAEAC,4CACAC,sBACAC,4DACAC,gDACA,IACAF,oCACA,YACAA,oBACA,CACAG,qDACA,+CACAA,iBACAA,kBACAC,oCAEA,EACAC,iEACA,kCACAC,iBAEA,EACA,EAGAH,sCAGAA,qBAGAA,iBAOAA,iDACAI,oBACAA,uCACAA,4CACA,oEACA,GACAC,2BACAD,+BACAJ,sBACA,GACAJ,gBACA,EACA,GAGAD,8CACAK,6BAEAJ,gBAEA,EACA,KAEAU,wCAEAA,MC7FA,iEAEA,gBACAC,+CACAC,8CACAC,gEACAC,0EACAC,gDACAC,oCACAC,wCACAC,kCACAC,gDACAC,wCACAC,0EACAC,4EACAC,kDACAC,sEACAC,0CACAC,gDACAC,kDACAC,8DACAC,kDACAC,4DACAC,gFACAC,4DACAC,iFACAC,2EACAC,mFACAC,uFACAC,+EACAC,+FACAC,6FACAC,uFACAC,6EACAC,6EACAC,uFACAC,yEACAC,yEACAC,yEACAC,qDACAC,qFACAC,2EACAC,iFACAC,2EACAC,gEACAC,kEACAC,gEACAC,2EACAC,0DACAC,0CACAC,sCACAC,0DACAC,0CACA,EAEA,iBAEA,GAEAlD,MC3DA,sEAEAmD,sEAqBA,UACAC,yCAGA,OAFAC,eACAC,6CACAC,aACAF,yDAEA,SACA,EASAG,yCACAH,IACAI,QACAF,IACAG,UACAC,UAEA,SACA,0EAGAF,0BAEA,EACAE,WACAN,iBACAF,yBACAQ,UACAD,aACAH,WAEAI,QAEA,SACA,EAUAC,mEACAP,IACAI,QACAC,UACAH,IACAI,UAEA,SACA,0EAGA,WACA,iEAGAF,kCACAI,gDAEAC,SACAA,cACAC,0BACAA,+BACAA,sBACAF,YACAH,eAIA,EACAC,WACAN,iBACAI,cACAE,UACAD,aACAH,WAEAI,QAEA,SACA,EAEAK,mFACA,eAMA,GAJAb,8BACAc,mCAGAd,2BACAA,gDAEA,uBACAA,qDACAe,gCACA,GACA,yCAEAC,MACAC,wCAKAjB,gCACA,4BACAiB,+BACAA,OACA,QAGA,IAEAA,cAGA,OAEA,oFAGA,YACA,EACAC,gEACAC,KACAC,sFACA,mBACAC,IAEAC,UACAC,UACA,2BACA,GACAH,QAEAA,MACA,EACAI,8DACA,uDACA,EACAC,iEACA,kBAKA,MAJAL,yEAEA,MADAM,qBACA,kBACA,GACA1B,kBACA,CACA,EAEA,WAEA,GAEAnD,MC3LA,2FAEAmD,sEACA2B,sEAEA,0BAEAC,uCACA,aACAC,QACAC,iBACAC,YACAC,aACA,EAkBA,MAhBAhC,2BACAiC,MACAA,eACAC,qBACAD,6BACAC,wBACAlC,gBACAkC,qBACAlC,qBACAkC,iBAEAC,oCAGA,GAEAD,OACA,CA3BA,EA6BA,2BAEA,GAEArF,MCtCA,6NAEA8E,sEACA3B,sEACAoC,kIACAC,qFACAC,0IAqBAC,eAKAC,wDAEAC,sBACAC,YACAC,UACAC,iBACAC,iCAiBA,GAfA,mBAGA,iBAGA,0BACAC,kBACAH,WAGAA,SACAA,4CAGAA,kEACA,wDAGA,uBACAJ,wBACA,mBACA,uCAEA,kEAGA,uCACA,qCAEA,oCACA,iBAEA,EACAQ,sBACA,+BACA,EACAjB,uBACA,2BACA,EACAkB,qBACA,kBACA,EACAC,iCACA3C,YACA4C,iCACA,sBACAlC,aACAd,0BACAA,KAEAI,gBAEA,CACA,cACA,EAMA6C,iCACA,eAOA,MANAnD,qDACA,sBACAE,6BACAI,gBAEA,GACAA,OACA,EAEA8C,0BACA,QACA,kBACA,gCAEA,0BACA,qBACA,2BACA,IACA,gCACA,uCAGA,sBAKA,WACA,EACAvB,0BACA,QACA,kBACA,0BACAF,qFAEA,0BACA,qBACA,2BACA,IACA,gCACA,qCAGA,oBAKA,WACA,EACA0B,0BAEA,MADA,4BACA,IACA,EACAC,0BACA,kCACA,EACAC,mCAKA,MAJAvD,8BACAwC,mDAEA,2BACA,IACA,EACAgB,yBACA,+BACA,EACAC,qCAIA,YAHA,6BACAC,uBAEAA,UACA,qCAEA,WACA,EACAC,gCAEA,yBACAT,kCACAA,kDACA,CAJA,YAsBA,MAjBA,uCACAU,uBAEA,oCACAA,yBAEA5D,iCACAyC,4BACAmB,UACA5D,cACAA,qBACAyC,6BACAmB,SAEA,EAEA,GACAV,IACA,EACAW,0BACA,wBACAC,0CAMA,MAJA9D,oCACA+D,sBACA,GAEA/D,WACA,EACAgE,yBAEAzG,aADA0D,WAmBA,MAhBA,qCACA1D,wBACAA,yBACA0D,uDAIAA,+CACAgD,oBAEAhD,MADAgD,qBACA,2CAEA,kCAIAhD,KACA,EACAiD,kBACA,+BACA,SACA,sCACA,SACA,mBAEA,CACA,WACA,EAIAC,8BACA3B,kDACA,yBACA,EACA4B,8BACA,oBAEA,sCAGA,QAFA,uBACAN,0CACAA,cACAA,qCAGA,EAIAO,0BAEA,MADA7B,mDACA,qBACA,EACA8B,0BACA,aAIA,MAHA7B,kDACAsB,sBAEAA,GACA,EACAQ,+BACA,kCACA,uBACA,qCACA,uBACArB,kCAEA,KACA,oCAEA,EACAsB,uBACA,oBACA,EAUAC,4BAGAC,WAFAC,uDACAC,4CAGAC,WACAC,aACAC,kBACApC,mBACAG,+BACA,EAEA,cACA,4FAqBA,MAlBA,wCAEAgC,uDAEA,qCACAA,oBACAhC,sCACA,EACAgC,mFAGAD,2CACAA,sDACAH,0DACAC,kBACAA,wCAGAD,SACA,EACAM,mDACAC,kBACAL,uCAOA,GALA,wCAEAK,2DAGAL,UACAK,qEAEA,qFAGA,+BACA,EACAC,uCACA,gCACA,YACA,mDAEA,qFAEA,EACAC,mBACA,SACAxC,mBACAyC,mBACAtC,+BACA,EASA,MAPA,wCACAuC,mCAEA,qCACAA,kCAGAA,GACA,EACAC,mBAEA,QACA,EACAC,6BACA,iCACAC,gCACA,wDAEA,EACAC,6BACA,kDACA,EACAC,gCACA,iCACA,UACA,wDACAC,sCAEAA,MACA,yBAEA,wBAEA,CACA,EAQAC,4CACA,wBACAC,2DAGA,yBACA,4BAEA,wBACA,EACAC,iBACA,wCACA,EACAC,iBACA,wCACA,CACA,GAEAP,8CACA,2DACA,2CACA,EAmCA,MAhCA/C,2CACA,6DACA,EAEAA,4CACA,yBACA,EAEAA,sCACA,0BACA,EAOAA,sCACA,+CAEA,YACA,qDAMA,MALAzC,wCACA,6BACA,GACA,oCAGA,CACA,QACA,EAEAyC,OAEA,GAEA5F,MCvdA,qEAuCA,uCACA,QACA,sBACA,6BACA,WAGA,WACA,CAjBA,sFAmBA,kBAMAmJ,oCACAC,6FACAC,iGACAC,qGACA,gEACA,EASAC,0HACAC,YACAC,eAGAD,wEAEAE,sKACAC,8KACAC,8BACAC,sCACAC,wCACAhG,qCACAiG,6CACA,iCAEA,aACA,WACA,KAEAxG,MACA,wCACAyG,gBACAJ,YACAK,YACA,2CACA,gCAEA,CAcA,MAXAL,gDACAI,iEAIAA,uFACAA,gBACA,gEACA,uFACA,CAEAA,GACA,CACA,EAEA,mBAEA,GAEAhK,MCvHA,sEAoBA,mBACAkK,wDACArE,6BACAsE,YACAtE,sBACAuE,YACAvE,iBACAwE,aACA,CACAxE,oBACAI,YACAqE,6BACA,CACA,EACA,CACAzE,mBACAI,YACAqE,6BACA,CACA,EAEA,EACAC,eACA,CACA1E,2BACAI,YACAqE,4BACA,EACAF,YACAvE,eACAwE,aACA,CACAxE,oBACAI,YACAqE,4BACA,CACA,EACA,CACAzE,qBACAI,YACAuE,kBACA,EACAC,SACA,EAEA,CACA,EAEA,CACA,GACAC,uDACA7E,6BACAsE,YACAtE,sBACAuE,YACAvE,eACAwE,aACA,CACAxE,kBACAwE,cACAxE,oBACAI,YACAqE,6BACA,CACA,EACA,EAEA,EACAC,eACA,CACA1E,2BACAI,YACAqE,4BACA,EACAF,YACAvE,eACAwE,aACA,CACAxE,oBACAI,YACAqE,4BACA,CACA,EACA,CACAzE,uBACAI,YACAqE,6BACA,CACA,EAEA,CACA,EAEA,CACA,GACAK,6DACA9E,6BACAsE,YACAtE,sBACAuE,YACAvE,eACAwE,aACA,CACAxE,kBACAwE,cACAxE,oBACAI,YACAqE,6BACA,CACA,EACA,EAEA,EACAC,eACA,CACA1E,2BACAI,YACAqE,4BACA,EACAF,YACAvE,eACAwE,aACA,CACAxE,oBACAI,YACAqE,4BACA,CACA,EACA,CACAzE,4BACAI,YACAqE,6BACA,CACA,EAEA,CACA,EAEA,CACA,EACA,EAEA,oBAEA,GAEAtK,MCtKA,wIAEAmD,sEACAyH,gKAqBA,sBACAV,qFACAQ,mFACAC,+FACAE,6BACA,EAGA,cACAC,uCACA3H,kBACA4H,kEAMA,EACAC,6BACA,4CACA,EACAC,gCACA,kCACA,EACAC,+BACA,eASA,MAPA/H,qCACA,gBAEA,MADAgI,gBAGA,GAEAA,OACA,EACAC,mEACA,kBACA,aACA,KAEA,CACAjB,YACAI,kCACA,IACA,gBACA,CACAtE,YACAqE,4BACA,IACA,qBAEAe,mBAIAC,sCACAC,6FACA,CALA,EAMA,CACA,EAEA,eAEA,GAEAvL,MC1FA,kEA2BA,oCACA,sEACA6F,oBACAI,YACAqE,uCACA,CACA,IAEA,OACAzE,2BACAI,YACAqE,kBACA,EACAF,YACAvE,eACAwE,8BACA,CACA,CACA,EAEA,gBAEA,GAEArK,MCnDA,gXAEAmD,sEACAqI,mHACA5F,oGACA6F,6HACAC,6HACAC,uIACAC,iJAwBAC,uEACA,kBAEA1I,qCACA,IACA2I,iCACA,UACAA,qBACA,CACA,GACAC,qCACA,EAEAC,uDACAD,mDACAA,mCACAA,2CACAA,yCACAA,4CAEAF,oEACA,EAEA,yBACA7F,2BACA,YACA,wBACA,qBAEA,oDACA,EACAiG,mCAGA,MAFA9I,+CAEA,IACA,EACA+I,yBACA,WAEA,kBACA,yDAEAhF,kBACA,gDAEAA,mDAIA,UACA,EACAiF,0CACA,uBACAC,sDACAC,YAEA,6BAEA,GADAC,iCACA,oCACAD,eACAE,2CACAC,cACA,OAEA,8EAIAd,iEACAe,4BACA,8CACA,GACAC,4BACA,EACA,EACAC,mBACA,uBACA,EACAC,4BACA,oCACA,4DASA,YAPA5H,cACAY,kCAGA,kEACA,kDAEAZ,eACA,kDAEA6H,SACA,wCAEA,CAEA,6BACA,oDAEAC,UACA,oCAEA,CAEA,+BACA,wDAEAzM,YACA,mCAEA,CAGA,iFACA,2CACA,GACA,kCACA0M,iDACAC,qEACA5C,YACAC,8BACA,IACA,yCACAD,uDAEAA,wBACAA,2BACAA,sCACAA,oEACA,EACA,CACA,0CAEA,GADAG,6CACA,CAEA0C,4BACAjI,kBACAkI,aACA,CAEA,aACA,2CAEA,oDAEAC,eACAhK,wCACA,MACA8C,YACAqE,oCACA,IACA,4CACA2C,6EAGA,+DAIA,IAJA,CACA9C,YACAI,4CACA,IACA,aACA,gDACAc,wCAEA,sDACA,4BACA,GAEA,gCACAd,iDAEA,EAEA,CACA,CAEA,+DACA6C,yEAEA,4BACA,+BAEA,wBACA,EACA,0BACAjK,UACAoH,iBACAqB,gBACAyB,oBACA,CACA,CACA,EAGA,qBACA/B,iCACAgC,6DACA,CAEA,+GACA,CACA,yCACA,mDACA,sDACA,CAEA,6BACAZ,6BAEA,EACA,EACAa,mCACA,mCACA,sCAEA,6BACAb,2BAEA,EACA,EACAc,mCACA,mCACA,mCAEA,6BACAd,2BAEA,EACA,EASAe,4BACA,cACA,kEAGA,mCACA,mDAEA,mBACA,0BAEAC,uDAEAC,iCACA,iEAGA,CAEA,6BACAjB,6BAEA,EACA,EACAkB,iCACA,uCAqBA,MAnBAX,yDACAtB,8EACA,EACA3G,eACA,KAEAiI,8CACAA,qDAGAA,oBADA9J,qBACA6B,aACA7B,yBACA6B,iBAEA,GAGAiI,sDAEAA,QACA,EACAY,uCACA,2CAEAC,4EAGAA,4EACAA,4EACAA,4EAGA,mDAUA,MARAA,4BACAA,kEAGAA,2BACAA,kEAGAA,YACA,EACAC,mBACA,sCAGA,MAFAlB,8CAEAA,OACA,EACAmB,uDACA,iCASA,MAPAC,2BACAC,iBACAA,4BAEAA,mCAGAA,EACA,EACAC,mCACA,yCACA,sDAGA,mFACA,yCAGA,+EAGA,iBAFAC,sCAEAC,wBACAC,mCACAC,mCAGAA,SACAH,4CAEA,CAEAA,oDACA,EACAI,0BACA,4DACA,4CAGA,qCAEA,wBACA,sEAGA,sDAGA,MAFA,uCAEArK,GACA,EACAsK,8BAEA,wEACAF,kCAEA,mBA4BA,MA3BA,mDACAnH,mCAEAmH,oBACAA,aACA,2CAIAA,6BACAA,gBACA,gDAIA3I,mCACA,uCACAA,8BACA,kCACAA,4BACA,gCACAA,mCACA,+BACAA,iCACA,mCAGA2I,OACA,EACAG,sCACA9I,6CACAZ,aACA,6DAIA,+CAEAY,8CACA,kCAEA,EACA+I,0CAEA,iBACA,+CACA,2BACA,sBACA,6CAGA,iCAEA,4BACA,iDAEAC,QACAC,iCAEA,CACA,KAEA,iCACA,qDAEAD,QACAC,6BAEA,CAGA,0DACA7J,aACA,gCACA,qDAEAhE,QACA6N,6BAEA,CAGA,CACA,EACAC,4BACA,4CACAF,0BACA,wEAEAA,eACAA,2BAEA,2CACA,EACAG,4BACArO,sCAGAsE,YACA,8BACAtE,2CAEAA,sBAGA,EACAsO,wBACA1O,oBACAA,gCACA6C,gDACA7C,kCACA,EACA,EACA2O,8BACAC,6BACA,EACAC,sBACAnD,uCACA,EACAoD,sBACApD,uCACA,CACA,GAEA,aAEA,GAEAhM,MCphBA,qEAEAmD,sEAEA,SACAkM,8BACA,4BACA,wBACA,6BACA,eACA,4BAEA,CACA,wBACA,CACA,EAEA,UAEA,GAEArP,MCrBA,sFAoCA,sCACA,mEACA,SAEA,6CAEA,CASA,8BACA,gCACA,kBACAsP,qBACAnI,sBAEA,CAUA,qDACA,uDACA,6CAEAoI,yCAEAhB,6BACA,CACA,CAUA,kDACA,6CACAiB,kBAEAC,oDACAD,0CAEAE,UACAF,+BAEAG,UACAH,2BAEA,CAWA,kEACAD,wGACA,CASA,qDACAK,iBACA,4BAEA,EACA,CAUA,mDACA,8CACA,wBACArB,QACAsB,yCACAA,yCAEA,CASA,6CACA,8CACAD,oBACAE,qEAEA,CAUA,gDACA,wCACAC,uCACAA,qDAGA,CASA,6CACAC,eACAD,2BACA,wDACAC,yDACAC,yCACAA,SACA,iBAGA,CA7LA9M,sEACA2B,yEAwBAoL,kBAyKAC,WACAC,8BACAC,8BACAC,8BACAC,oCACAC,uCACA,EAEA,gBAEA,GAEAxQ,MChNA,4SA0BA,6CACA,gCACA,gCACA,CAaA,8CACA,kCACA,gCACA,CAkCA,2FAOAyQ,eANAC,yDACAC,YACAC,oBACAC,kBACAC,mCACAC,mDAkGA,MA/FA5N,kDACA6N,uFACA3F,qDACA4F,SAGA,mCAGA,GADAD,6DACA,0CACA,SAmBA,GAfAE,8CACAC,0EACAC,qFACAD,kCACAE,4CACAC,sDACAL,8BAEAI,qBACAC,mCAGAX,mCACAA,qCAEA,uDACA,SAEAA,+CAIAE,qBACA/D,kBACAuE,sBACAJ,WACA,EACA,CACA,GAEAJ,wBACAA,gDAGAU,oCAGApO,+CACAqO,oBACAC,wBACAC,OACAvM,SACAsM,0BACAX,eACA,wBAEAL,gBACAA,sCAGAkB,kDACAC,0CACA,GAGAhB,qCACAA,kDAEAgB,2CAMAnB,eACAoB,0BAIA1O,8BACA2O,iBAGA,EAEA,GAGAC,iEAGAlB,qBACA,CAMA,kCACAmB,WACAX,gBACAY,OAEAD,+BAEA,GADAA,aACAA,WACAX,gCACAA,mBACA,kBAIA,WACA,CAOA,gCAGAa,sDAFAC,sBACAd,6BAGAc,8BACAD,wCACAE,mCACAC,qEACAC,yEACAA,8BACAjB,0CAGA,CASA,4CAGAkB,kCAFAC,iDACAzF,0DAgBA,MAbA8B,sCACA4D,yFACAF,6DACA,kBAEAA,mDACAE,gEAGAF,kCACAE,yCAGA,CACA1F,sCACA2F,2CACAC,mCACAJ,8BACAtB,QACA,CACA,CAQA,6CACAP,4BACAI,mCACA8B,mBAwBA,MArBAzP,sDACA,uBACAoL,4BACAxB,sDACA2D,0DAEA,GAGAI,wDACA,8BACA3N,0DACA,mEAEA,MADA0P,2CAGA,GACAD,kBACA,GACAlC,kEAEAA,uBACA,CAOA,6CACAI,kDACA,CAcA,kGAEA3L,4BAEA2N,oBACAhG,iBACAiG,SACA,GACA,CACAC,qBACAC,kBACA3I,yBACAxE,4BACAoN,kBACA,EACA,EACA7B,kCAIA8B,cACAA,YACAhQ,oDAEA,2CACA,GACA,CACA,qCACAA,oEACA,GACA,EACAiQ,WACAC,oBAGA,KADAL,QACA,2CACA,EACA,4BACA,CAWA,kEACA,sCACAtT,4DACAoR,qDAEAwC,kDACAC,wEACAC,2DACAC,sGAGAH,wEACAC,oCACAC,+CACAC,uGAIAH,8CACAG,sFAEA,CAaA,2BACA7C,iBACAE,eACAyC,UACAC,iBACAE,qBACAhH,SACA,CACA,qDAEAvJ,qCACAwQ,aACA,GAGAC,0BACAC,aACAN,iBAGA7G,UACA,GAEA6G,iBACAC,6BACAM,uBACA,CAOA,sCACA,6DACA3Q,oDACA4Q,2BACA,EACA,CAOA,wCACA5Q,oDACA4Q,gDACA,EACA,CAQA,+CACA,kDACAC,cACAC,OACAlQ,uCACA,CA9cAZ,sEACAwO,gFACAuC,oGACAC,gFACAC,4IACAC,mHACAC,yGACA1C,uIAEA0C,yBACAA,qBACAA,2BAEA,mFACA,iCACAC,6DACA,wGAMA,MAHAC,2KACAC,0KACA,2BACAD,MACA,GAMAF,yBACAA,qBACAA,8BAEAI,kFAKA,MAJA,kCACAH,+CAGA,uQACA,GAyBAI,qDAgZAC,gBACAC,2BACA,EAEA,qBAEA,GAEA7U,MC1dA,qJAqCA,wFACA,UACA2Q,YACAmE,0BAoBA,GAjBA3R,iDACA6N,qBACA3F,qDAEA0J,iCACA/D,6DACAE,8CACA,4EAEA4D,sCACAnE,wBAGA,GAGAqE,oCACAA,OAEA,iBAGA7R,sDAEA,gBACA,uBACA8R,uBACAC,iBACA,GAGAC,4BACA3D,oBACA1E,SACA4E,OACAvM,SACA,WACAiQ,QACA,EACAH,YAEA,EACA,GAEAI,kCAEAlS,8BACA2O,gBAEA,EACA,CAEA,YACA,CAWA,sFACA,cACAwD,kCAEAxI,8BAEA3H,yBACAoQ,sDACAA,iBAKAA,mBAHAA,4BACAD,gCAKArC,mBAEAnG,qBACAJ,sBACA,EACA,4BAEA,CAQA,+CACA,kDACAsH,cACAC,OACAlQ,uCACA,CA7IAZ,sEACA2B,sEACAuQ,0FACAlB,gFA4IA,mBACAU,2BACA,EAEA,oBAEA,GAEA7U,MCzJA,kVAEA8E,sEACA3B,sEACA+Q,oGACA3H,+FACAqF,uIACA4D,mHACAC,gKACAC,8JAsBAf,sDAEAgB,qBACA,eACA,mBACA,mBACA,iBACA,mBACA,EA4QA,MA1QAA,iDACAC,+BACAC,wBACAC,aAEA,uBACA,sBAOA,2DACA,wCACA,qBACA,kCAGArL,gBACAsL,MACAC,MACAC,eACAC,oCACAlR,uDACA,CACA,CACA,CACA,CAIA8Q,oBACA,CAGA,qCAGA,sCACA,yCACA,EAEAH,iDACA,wBACAQ,WACAC,yDAEAC,sCAKAF,qBACA,6DAGAC,6EACAC,0BAEAA,wCACAC,eACA,GAEAA,eAEA,EACA,EAEAX,mDACA,uBACA,2BAEA,wBAEA,EAEAA,yCAIA,MAHA,eACA,4BAEA,WACA,EAEAA,yDACA,cACA,kDACAY,eACA7J,mBACA,EACA,EAEAiJ,6DACA,yBACA,qDAEA,sDAEA,EAEAA,mDACA,cAEA3C,oCAEA,sBACA,cACA,sCAEA,iBACAuD,8BACAA,qCACAA,oCAIApD,cACAA,oCACA,qCACAhQ,oEACA,GACA,EACAiQ,gBACAmD,8DACAvR,8EACA4M,wCACA5M,4CACAA,cACA,CAEA,GAEAuR,gCACAA,4BACAvD,MACA,GACAK,oBAIA,KAFAL,QAEA,2CACA,EACA,2CAEA,2CAEA,EAEA,sBACA,+BAEApL,QAEA,EAEA+N,wDACA,cACA,cACA,6CACA,8BACA9G,6BACA2H,kDACAD,qDACA,UACA1H,6BACA+C,4DACA,CACA,4BACAzO,+BACAoT,wDACA1H,yCACA+C,oEAEA,CACA,EACA,CACA,CACA,EAMA+D,4EACAY,WACAlF,iDACAA,oBACAA,2BAEAA,qEACA,+CACAoF,4CACAC,aACAA,6BAEA,EACA,EAEAf,wCACA,qBACA,qBACA,EAEAA,+CACAC,cACAe,yCAYA,MAVAxT,8CACA,gBACA,IACA8J,kCACA,UACA3H,gBACA,CACAsQ,0DACA,GAEAA,SACA,EAEAD,4CACAE,WACAc,yCAYA,MAVAxT,8CACA,aACA,IACA6F,4BACA,UACA1D,gBACA,CACAuQ,oDACA,GAEAA,MACA,EAEAF,6DACA,sBACA,EAEAA,gFACA,8DAGAiB,eACAnB,kCACA,UACA,iBACA,cACAV,YACArI,SACAoF,eACA,CAEA4D,iCACA,UACA,iBACA,cACAX,YACArI,SACAoF,eAGA,EAEA6D,SAEA,GAEA3V,MCvTA,4IAqFA6W,WAnFA1T,sEACAyC,oGAKA,uBACAkR,4CACA,WACAC,WAmBA,MAjBA5T,4BACAyC,wBAEA,WADAoR,WAEA9P,wBAEA,eAJA8P,WAKA9P,iBAGAA,YAEA/D,cACA+D,4CAEA,GAEAA,GACA,EACA+P,oDACA,WACAF,WAyBA,MAvBA5T,4BACA,WACAA,cACA,sBACAyL,gCACAA,QACA1H,kBAEA,0BACA0H,4CACAA,QACA1H,kBAGAA,YAEA/D,aACA+D,qDAEAA,WAEA,GAEAA,GACA,EACAgQ,iCACA,SACAC,KACAC,IAEA,qBACA,qCACA,sBACAxI,uBACAuI,aAEAE,eACAD,GACA,KACA,sDAIA,6BACA,UAGA,SACA,EACAE,kDACAH,MACA,aACAE,UACAA,SAGA,QACA,EACAE,sDACA,qDACA3I,QACAA,YAEA,EAEA,CACA,EAEA,wBAEA,GAEA5O,MC5GA,8SAkKA,8BACA,0GACA,CAlKAmD,sEACA2B,sEACAc,oGACA4R,sJACAd,wHACAe,6HACA/L,6HACA2I,mHAwBA,kBACA,gCACAqD,+BAGAC,qBACA,aACA,iBACA,aACA,sBACA,qBACA,qBACA,sBACA,WACA,SACA,MACA,aACA,OACA,SACA,QACA,gBACA,cACA,uBACA,oBACA,0BACA,sBACA,8BACA,6BACA,0BACA,qBACA,qBACA,0BACA,mBACA,mBACA,mBACA,yBACA,oBACA,uBACA,oBACA,wBACA,oBACA,SACA,oBACA,MACA,SACA,UACA,gBACA,UACA,eACA,yBACA,eACA,cACA,UACA,kBACA,CAKAC,eACA1X,oEACAW,2BACAU,gDACAC,mCACAG,sCACAC,kDACAC,0DACAC,0CACAC,qCACAC,+BACAC,yCACAC,4CACAE,iCACA,EAKAyV,uBACAxW,mEACAC,qDACA,EAKAwW,WACAZ,iBACA,EAEAa,oCACA,aAEA,6BACA,SAGA,oBACA,qBACA,sDACAC,oBACA,CACA,yCACA,eACAnS,yCACAoS,wCACAJ,0FACAG,gBAEA,CACA,CAEA,iBAEA,KADAE,UACA,iFAGA,sBAEA,KADAA,UACA,2EAGA,YACA,EAoBAC,2BA8CA,8CACA,eASA,MARA,2BAEAC,wBACAC,YACAC,uBACAC,gCACAF,YAEAA,OACA,MArDAC,eAKAF,cAEA/S,0CAEA,mBAEA,aAGA,wBAMA,2CACA,aACA,wBACA6B,6BACA,CACA,gCACA,QACArB,+BACAuS,uBACAlR,0BAGA,CACA,UACA,EA2BA,mCAIA,MAHA,uBACA7B,oBAEA,IACA,EAOA,+BAEA,MADAA,gCACA,IACA,EAOA,mCACA,mCACAA,aAEA,IACA,EAEA,wEACA,gDACAsL,6FAEA+G,8CAEA,IAEA,EAMA,gDACA,2BACA,EAMA,8CACA,uBACA,EAUA,qDACAc,KACAtR,YACArB,wCACAV,qCACAsT,wCAEA,+CACA,gFAiCA,MA7BAtV,2DAOAqV,2CACArV,kBACA+D,WAKAA,6BAGA/D,yDAOAqV,0CACArV,kBACA+D,WAGAA,GACA,EAEA,gDACA,kBACArB,wCACAV,qCAQA,MANAA,WACA,sCACA+B,8CAIAA,GACA,EAEA,qCACA,4BACA,EAEA,0DACA,kBACArB,2CACAV,qCAEA,YACA+B,iDAEA,2EAEA,UACA,EAEA,2DACArB,2CACAV,qCAEA,gDACA,iDAEA,EAEA,+DACA,gBACAU,+CACAV,qCAEA,aASA,yEARA,6CACA+B,4DACA,iEACAmK,4CACAA,2DAEA,CAIA,UACA,EAEA,sDACA,gBACAxL,+CACAV,qCAEA,YACA,0CACA+B,wDAGA,sEAEA,UACA,EAEA,wDACA,gBACArB,+CACAV,qCAEA,YACA,4CACA+B,0DAGA,sEAEA,UACA,EAYA,mDACA,gBACArB,+CACAV,qCAEA,YAEA+B,IADA/D,gCACAgC,4CAEAA,mDAGA,sEAEA,UACA,EAYA,8DACAU,+CACAV,qCAEA,YACAhC,gCACAgC,mDAEAA,iDACAA,0DAGA,qEAEA,EAQA,kDACA,gBACAU,+CACAV,qCAEA,YACAhC,iCACA+D,oDAGA,sEAEA,UACA,EAEA,mCACA,iBACA,EAEA,2CACA/D,uCACA,EAEA,6CACA,gBACA,gBAEA,mDAaA,GAZAuV,YACArT,0BAEAA,iBAEAA,yDACAlC,yDACAkC,gEACA,GACA,qEAGA+G,gBAyCAC,kCAxCA,+BAEAD,mEAGAjJ,0CACA,mCACAwV,OACAvM,8CAEA,GAEAjJ,6CACA,uBACA,mCACAyV,mFACAzV,6CACA,GACA,wDACA,0CAEA,gBACAoT,UACA,8CACA1Q,SACA,eACAX,SAGA,OAEA,8CACA,iFAGA,OAEA,qFAqBA,MAfAwG,yBACAmN,yDACAC,OACA1F,cACA2F,uBACAhB,0BACAK,iCAGA,GACA,6BACA1L,8BAEA,GAEA,IACA,EAKA,8BAIA,MAHA,mBACAgK,qCAEA,IACA,EASA,yEACA9Q,yCACA,sDACA4R,sEACA,SACA,CAEA,EAUA,wEAEA1R,UADAkT,WAGA,2CAIA,GAHAlT,+BAGA,yCAcAF,4CACAzC,yCACA,SACAA,iEACAyL,gDACA,EAEA,GAEAzL,8DACA6V,iDACA,OAxBA,gDAEA,IADA,gCACAzV,YACAyV,uEACA,6DACA,IAEAA,oEACA,uDAkBA,MAGA,qDACAxB,uDAIArU,gBACA,CAEA,QACA,EAEA,6BACA,iBACA,EAEA,6BACA,iBACA,EAOA,+CACAkC,sBAGA,mCACAA,yCAHA4T,GAKA,EAKA,qCAKA,GAHA3T,+DAGA,kCACA,mCAGA,+FAEA,kBACA,CACA,cACA,0DAWA,GATA4T,4CACA/V,kEACA,sCAEA,MADAgW,yDAGA,GAGAA,OACA,kBACA,CACA,8DACA,qBACA,CACA,CACA,EAEA,sDACA,2BACA,EAEA,4CACA,oBACA,uBAEA,EAEA,8CACA,oCACA,CACA,EAMA,gBAOAC,uDACA,6BACA,4DAEAjB,qBAEA,kCACA,mBACA,uDACA,EAEA,MADAkB,0CACAA,WACA,CACA,EAEA,iBAEA,GC7vBArZ,uIACA,gBAEAsZ,2BACAC,wBACAC,SACA,EAEAC,qDACA,+CAEAC,SADAC,wBAEAC,cACAC,iBAEAC,iCAIAJ,yBAEAvW,oEACAA,sDACAA,sBACAyW,+CAEAG,eACAF,qDACAE,gBACAH,mDAGA,GAGA7Z,8BAEA,sBAEA4Z,sDAEA,4BAEAE,8CACA,qCACA,WAEA1W,0DACA6W,6DACAC,yBAEA,GAEAJ,wCAEA1W,qCACA6W,qCACAL,oDACA,2CACA,EACA,IAGAO,6BAEA,WAjDAC,0BAoDA,EACA,EAOAC,uEACA,4CACA,EAEA,oDAEAC,YACAC,eAMA,0CACAC,aAQAC,yCAEA,wCAEAC,SACAtX,yDAGAA,sCAGA,EAQAuX,gEAGA,MAFAJ,2EACAD,WACA,IACA,EAMAM,yCAGA,MAFAL,gBACAD,WACA,IACA,EAQAO,iDAEAC,aADAtE,UA0BA,MAtBAsE,aADAR,yBACAlH,oBAEA,qCACA,4BACAhQ,0CACA,iBACA2X,6BAEA,GACAxB,2CACAnW,mDACAiX,sCACAE,mDAEA,GACAJ,qBACAG,WACA9D,2CACA,SACA,GAGAsE,WACA,EAMAE,yCACA,WAIA,MAHA5X,8CACA6X,iCACA,GACAA,GACA,EAQAC,uDACA,2DACAlP,iBACA5I,kCACAE,kCACA6X,4BACAxB,gCACAyB,2BACA,OAEA,uBACAjK,4CACAkK,8BACAX,eACA,EAEA,EAQAY,uDACA,2DACAtP,0CACA5I,kCACAE,kCACA6X,4BACAxB,gCACAzM,kCACAkO,4BACAG,2BACA,OAEA,uBACApK,4CACAkK,8BACAX,eACA,EAEA,EAMAc,+CACA,WASA,MARApY,8CACA,iCAGAqY,qEACAR,oBAEA,GACAA,GACA,EAQAS,uDACA,mDACAC,SACAA,gBAEA,EACA,EAUAC,+CAEAd,aADAtE,UAuDA,MApDAlR,wDAEAwV,iEAEA,iBASA,MAPA1X,wCACAyY,UACAC,+BAEA,GAGA1I,8CAEA,0BAeA,MAZAoD,qDACA,yBACA,sBAGApT,kEACAA,8EAGA2Y,oEACA,GAEA3I,6DACA,oEACA,yBACA,MAIAmG,+CACA,EACA,EAEA,GAGAuB,YACAzH,gBACAmD,8BACA,GACAlD,oBACAkD,yBACA,GAEAsE,WACA,EAUAkB,+CACAlB,aACAtE,UAyDA,MAvDAlR,wDAEAwV,uDACA,kCAEA1X,0DACA,kDACA,oEACA,iCACA,2EACA,SACA,KAEA,6EACA,SAGA6Y,gFACA,CACA,GAEAA,4BACA,qCAEA1C,2CACA,gBACAnW,0CACAE,oCACA4Y,kCACA1Y,yEACA,IACAgT,8FAEAA,iDACA2F,yBAEA,GACAhC,iBACA,SACA,GAEA/G,mBAGA,GAEA0H,YACAzH,wBAEA,MADAmD,yCACA2F,QACA,GACA7I,oBACAkD,yBACA,GAEAsE,WACA,EAQAsB,+CACA,qDAIA,MAHApQ,mBACAA,4BAEA,IACA,EAQAqQ,iDACA,qDAIA,MAHArQ,mBACAA,4BAEA,IACA,EAQAsQ,qDACA,qDACA,oDACA,CACA,GACA,CACA,GCrbArc,kIACA,aAEA,mBACAsc,SAEAC,kEACAC,aACAC,mDACAC,oBACAC,WACA,EACAC,cACAH,oDACAC,oBACAC,WACA,EACAE,gGACAC,cACAL,oDACAC,oBACAC,WACA,EACAI,0CACAC,4CACAC,8CACAC,0CACAC,kEAEAC,+DACAC,uCACAC,6DACAC,oFACAC,wFACAC,wDACAC,sDACAC,iEACArd,oEACAsd,wDACAC,iFACAC,iFACApd,8FACAqd,wCACA/a,OACAyZ,mDACAC,8DACAsB,QACA,EACAC,yDACAC,yDACAC,yDACAC,oCACAC,oCACAC,6DACAC,sCACAC,yCACAC,4CACAC,sCACAC,wCACAC,yCACAC,yCACAC,wCACAC,uCACAxb,sCACAyb,wCACAC,sCACAC,yCACAC,0CACAC,yCACAC,2CACAC,wCACAC,wCACAC,uCACAC,wCACAC,8CACAC,2CACAC,sCACAC,sCACAC,sCACAC,sCACAC,sCACAC,sCACAC,qCACAC,uCACA3f,6FACA4f,uCAEAtd,wEACAud,uDACA1d,mEACAD,+CACA7B,6CACAyf,iEACAC,mEACAxf,sCACAI,iFACA8B,8FACAZ,kEACAme,iDACAC,eACAhE,uDACAC,yBACAgE,MACA,EACAC,gBACAlE,wDACAC,0BACAgE,MACA,EACAlf,wDACAD,2DACAa,uDACAF,uDACAF,yDACAL,0DACAQ,uDACAI,wDACAE,wDACAme,yDACAC,yDACA9e,2DACAH,oEACAE,gEACAD,mEACAS,+DACAE,gFACAd,kFACAO,+DACAR,6DACAoB,kEACA5C,qCACA,EAEA6gB,8CAEAC,kDACA,yDACA,kBACA,qBACAzE,iBAEA0E,+BAQA,MAJAA,cACAA,wDAGAlc,+EACA,EAEAmc,+BACA,QACA,2CACA/Z,gDACA,CACAA,OACA,wDACA,uCACA,wCACA,mBACA,uDACAga,mBACA,iBACAha,iBAEAA,wDAEA,CACA,CACAia,2CACA,CAEA,UACA,EAEAC,+CACA,WACAC,oBAEA,0CACA,yBACA,6BACA,gCACA,sBACAA,oBAGAna,kBAGA,uDACA,uBACA,wBACAma,iBACAA,kBAEAna,gBAGAoa,YACApa,mEAGA,CAGAoa,YACApa,oEAEA,CACA,CAIA,wDACA,qBACAA,8EAGA,qBACA,EAEAqa,kDACA,uEACA,mDACA,EAEAC,qCACA,QACA,kDACAta,4CACA,CAEA,GADAA,OACAia,gCACAja,0CACAoa,YACA,iBACApa,gEAEAA,kBACA,CAEAia,uCACA,CAEA,UACA,EAEAM,yCACA,QACA,gCACA,oGACAva,wDACA,CAEA,iBADAA,QACAia,qBACA,wCACA,uCACA5Y,KACA4S,aACAjU,iBAGAA,iBAEAoa,YACApa,qEAGA,CACAia,uCACAA,yCAEAA,mDACA,CAEA,UACA,EAEAO,kBACA,uCACA,EAEAC,mBACA,wCACA,EAEAzb,sBACA,uBACA,aACA,CACA,wDACA,qCACA,CACA,EAOA0b,0BACA,uCACAC,6IAEA,iCACAA,kGAGA,EAOAC,qCACAC,YACAC,6CACAC,6CACAC,8CACA,EAEAC,mBACA3gB,mBACA0Z,+BACAkH,eACA,8FACA,CACAC,mBACAC,mBACAzc,6BACA0c,0CACAC,2BACA,EACApgB,kBACA8Y,8BACAmH,kBACAD,kEACAE,kBACAzc,4BACA0c,+CACAC,2BACA,EACAjhB,sBACA2Z,kCACAmH,sBACAD,2DACAE,sBACAzc,gCACA0c,kDACAC,2BACA,EACAtgB,kBACAgZ,8BACAmH,kBACAD,eACA,2FACA,CACAE,kBACAzc,4BACA0c,kDACAC,2BACA,EACAxgB,oBACAkZ,gCACAmH,oBACAD,yEACAE,oBACAzc,8BACA0c,2CACAC,2BACA,EACA7gB,qBACAuZ,kCACAmH,sBACAD,qEACAE,sBACAzc,+BACA0c,yDACAC,2BACA,EACAjgB,mBACA2Y,+BACAmH,mBACAD,2DACAE,mBACAzc,6BACA0c,8CACAC,2BACA,EACA9gB,yBACAwZ,sCACAmH,0BACAD,eACA,0FACA,CACAE,0BACAzc,mCACA0c,2CACAC,2BACA,EACA/f,mBACAyY,oCACAmH,mBACAD,2EACAE,wBACAzc,6BACA0c,8CACAC,2BACA,EACArgB,kBACA+Y,8BACAmH,kBACAD,eACA,+HACA,CACAE,kBACAzc,4BACA0c,4CACAC,2BACA,EACAviB,YACAib,uBACAmH,iBACAD,eACA,wHACA,CACAE,kBACAzc,sBACA0c,2CACAC,2BACA,EACAvgB,yBACAiZ,sCACAmH,0BACAD,yDACAE,0BACAzc,mCACA0c,gEACAC,2BACA,EACAhgB,sBACA0Y,mCACAmH,uBACAD,eACA,oFACA,CACAE,uBACAzc,gCACA0c,iEACAC,2BACA,EACA/gB,uBACAyZ,oCACAmH,wBACAD,uDACAE,wBACAzc,iCACA0c,4EACAC,2BACA,EACAzgB,oBACAmZ,gCACAmH,oBACAD,+EACAE,oBACAzc,8BACA0c,2CACAC,4BACA,EACA1gB,yBACAoZ,sCACAmH,0BACAD,qEACAE,kBACAzc,mCACA0c,gDACAC,4BACA,EACA5gB,6BACAsZ,0CACAmH,8BACAD,yFACAE,sBACAzc,uCACA0c,mDACAC,4BACA,EACA3gB,4BACAqZ,0CACAmH,wBACAD,6EACAE,sBACAzc,sCACA0c,mDACAC,4BACA,EACAlgB,wBACA4Y,qCACAmH,yBACAD,+FACAE,yBACAzc,kCACA0c,qCACAC,4BACA,CACA,EAGAC,qBACA,iEACA,4BACAA,sCAGA,wBACA,CACA,EAEA,kBACA,GC7gBAziB,gEACA,SACA,OACA,qDACA,2CACA,oDACA,aAQA,4CACA,gCASA0iB,uGACArd,gEACAsd,mDACA9c,wDACA,GACA8c,UACAA,kBACAA,uBACAA,wBACAA,yEAEA,OACAzH,qBACAmH,uFACAC,qBACAF,iCACAvc,SACA0c,wDACAC,2BACA,CAEA,CACA,kCACA,wCACArf,oDACAyf,4DACAnG,8BACAiE,MACA,CACA,EACA,EACA,CACA,GCxDA1gB,iKACA,gBAGA6iB,uBACAC,aACAC,uBAYA,MAVAA,4BACAD,4BAGA3f,oCACAyY,gCACAiH,0CAEA,GAEAA,QACA,GCnBA7iB,gEACA,SACA,qDACA,qCACA,aAOA,sCACA,gCACA,CAEA,GCfAA,iKACA,gBAGA6iB,uBACAC,aACAC,uBAYA,MAVAA,4BACAD,4BAGA3f,oCACAyY,gCACAiH,0CAEA,GAEAA,QACA,GCnBA7iB,gFACA,gDACA,gDACA,iCACA,aAEA,sDACAgjB,gCACAA,sCAEAC,+BACAA,sCAEA7H,cACA,CAIA,OACAnF,+BACAiN,mDAEA,uBACA,wCASA,MARAjK,2BACAA,iGACA,iEACAkK,iBACAA,4BAEAC,SACA,SAEA,CACA,CACA,GACApjB,MCtDA,mUAEAmD,sEACA+Q,oGACAmP,+FACAC,gKACAC,4IACAhX,+FACAiX,6KAoBAC,gCACAC,6BAGAC,iCACA,CACA,CACA1N,aACAiN,iCACA,GACAO,YACAxK,WACAA,uFAEA,sCAEA,CACA,EACAsK,yBACAA,yBACAA,uBACAA,+BACAA,wBACAC,sBACA,CACA,aACA,CAGAI,WACA1jB,6DACAD,8DACAG,uBACA8C,0DACA7C,+DACAM,sBACAC,uBACAT,sBACAI,uDACAC,iDACAC,+DACAH,mDACAI,uDACAsC,qDACAC,yEACApC,iEACA+B,qEACAP,oEACAb,0FACAE,sGACAU,wFACAb,gGACAW,wFACAM,gGACAD,0FACAN,sGACA,iHACA,+GACAd,iEACAJ,yDACAE,iEACA,0CACA,yFACA,8CACA,6FACAG,2EACAY,4FACAD,4FACAb,iBACAS,8FACAW,oGACAR,sGACAK,wFACAM,0FACAZ,4GACAb,+DACAY,8GACAd,qBACA+B,kGACAC,yEACAC,yDACAtB,iGACA,EAEAshB,QACA9M,sBACA2N,oBACAve,SACAse,0BACAN,kBACAQ,mBACAC,8CACAC,4CACAC,0DACA/S,qCACA,EACAN,8BACA,CACA,EAEA,aAEA,GAEA3Q,MCpIA,mLAEAikB,mHACAlB,+FAoBA,2EAEA,eAEA,GAEA/iB,MC7BA,sGAEAmD,sEACAoJ,+FAoBA,iBAMAuM,gCACA,iCAEAoL,uCACAnB,0DACAmB,+BAEAA,gBAGAA,mBAGA,qCACAxkB,sCACAyD,yCACAghB,2CACAA,iBAEA,GACAjK,SACA,gBACAC,mBACA,EACA,GAbAhH,iBAcA,CACA,EAEA,kBAEA,GC1CAnT,0CACA,SACA,SACA,SACA,sCACA,kDACA,iBACA,eACA,iDACA,4EACA,aAaA,MAVAokB,6BAUA,kCAGA1kB,0DACA2kB,yBACAC,oCACAC,iGAEApf,sBAIAzF,2BAEA2kB,8BACAA,gCAEAA,+CAEAA,uDAEAA,0CAIAG,qBACAzB,uBACAA,yFACAyB,wCAEAN,sCACA9Q,gBAGAjQ,sCACApD,6CACAoD,yCACAA,+BACAghB,iDAEA,EACA,GAGAvS,oCAGAzO,mBACAzD,cACA,EACA,GACA2T,oBACA,uDACA,EAEA,EACA,EACA,EACA,EAGAlQ,mBAEAyO,kCACA,EAEA,CACA,GCzFA5R,uCACA,kCACA,4BACA,wBACA,aAEA,OACAykB,uBAEA,8CACAC,2BACA,CACA,CACA,GC9BA1kB,0DACAN,MCFA","names":["loaderScript","configUrl","bundle","loadController","controllerOptions","controllerPath","params","window","controller","document","startController","bundles","require","define","_container","assessmentItem","responseProcessing","_simpleFeedbackRule","stylesheet","math","figure","img","figcaption","object","outcomeDeclaration","responseDeclaration","rubricBlock","associableHotspot","gap","gapImg","gapText","hotspotChoice","hottext","inlineChoice","simpleAssociableChoice","simpleChoice","associateInteraction","choiceInteraction","endAttemptInteraction","extendedTextInteraction","gapMatchInteraction","graphicAssociateInteraction","graphicGapMatchInteraction","graphicOrderInteraction","hotspotInteraction","hottextInteraction","inlineChoiceInteraction","matchInteraction","mediaInteraction","orderInteraction","prompt","selectPointInteraction","sliderInteraction","textEntryInteraction","uploadInteraction","feedbackBlock","feedbackInline","modalFeedback","customInteraction","infoControl","include","table","printedVariable","_tooltip","_","buildSerial","id","chars","i","buildId","usedIds","suffix","exists","buildIdentifier","useSuffix","prefix","replace","findInCollection","collectionNames","collection","elt","found","addMarkupNamespace","ns","markup","$0","$1","$3","removeMarkupNamespaces","getMarkupUsedNamespaces","namespaces","$","getOptionsFromArguments","data","placeholder","subclass","renderer","arg","options","console","loggerFactory","util","rendererConfig","_instances","logger","Element","qtiClass","serial","rootElement","init","attributes","is","getSerial","getUsedIdentifiers","elts","getUsedIds","attr","removeData","removeAttr","setAttributes","getAttributes","removeAttributes","attrNames","getComposingElements","append","getUsedClasses","composingElts","ret","find","body","parent","setRelatedItem","setRootElement","getRelatedItem","getRootElement","setRenderer","getRenderer","render","rendering","args","_renderer","tplData","defaultData","tag","postRender","postRenderers","getContainer","toArray","type","arr","isEmpty","addClass","_containClass","hasClass","removeClass","clazz","toggleClass","state","isset","unset","stripNs","pattern","openRegEx","closeRegEx","restoreNs","xmlCopy","ignoreMarkup","xmlRe","tagRe","xmlMatch","imsXsd","html5Ns","prefixAtt","xml","tagMatch","MATCH_CORRECT","responseIf","expression","expressions","identifier","responseRules","baseType","value","MAP_RESPONSE","MAP_RESPONSE_POINT","responseRulesHelper","NONE","isUsingTemplate","tpl","isValidTemplateName","getTemplateUriFromName","getTemplateNameFromUri","tplName","getTemplateNameFromResponseRules","outcomeIdentifier","Object","key","qtiClasses","xmlNsHandler","moduleLoader","responseHelper","itemScoreHelper","loadPortableCustomElementProperties","properties","portableElement","loadPortableCustomElementData","setClassesLocation","getRequiredClasses","loadRequiredClasses","requiredClasses","required","requiredClass","module","category","loadeded","callback","getLoadedClasses","loadItemData","outcome","feedback","responseIdentifier","responseRuleItemIndex","response","responseRule","feedbackRules","map","responseIdentifiers","some","loadAndBuildElement","loadElement","loadElements","elementData","allElements","buildResponse","buildSimpleFeedbackRule","feedbackRule","buildOutcome","buildResponseProcessing","customResponseProcessing","rp","loadContainer","bodyObject","bodyData","eltData","element","buildElement","loadElementData","loadInteractionData","buildInteractionChoices","choice","interaction","loadChoiceData","loadObjectData","loadMathData","loadTooltipData","tooltip","loadPciData","loadPicData","getRawValues","html","_setDomClass","$bodyDom","$wrapper","oldClass","newClass","dataName","_getEncodedDataString","_setBodyDomClass","$body","regex","matches","_prefix","container","setEncodedData","hasEncodedData","getEncodedData","removeEncodedData","setEncodedDataToDom","firstFeedback","interactionsDisplayInfo","messages","renderedFeebacks","renderingQueue","$itemContainer","$itemBody","feedbackIds","order","message","comparedOutcome","interactionInfo","$container","_currentMessageGroupId","clearModalFeedbacks","renderModalFeedback","renderingToken","loader","$$1","iframeNotifier","autoscroll","onShowCallback","replaceControl","me","max","currentScrollTop","$element","maxScrollTop","minScrollTop","scrollTop","messageGroupId","$interactionContainer","$displayContainer","interactionContainer","displayContainer","interactionOrder","_interactionInfo","$modalFeedback","inline","done","renderedCallback","dom","Promise","then","catch","$scope","$controls","$toggleContainer","initControlToggle","toggleButtonTemplate","fb","uncover","$ok","cover","$interaction","toLowerCase","trim","context","pci","containerHelper","Handlebars","Helpers0","helpers","buffer","escapeExpression","Template$1","timeout","inlineRenderer","showFeedbacks","feedbacksToBeDisplayed","itemSession","count","endCallback","onCloseCallback","callstack","cb","async","$feedbackBox","$feedback","ItemLoader","modalFeedbackInline","modalFeedbackModal","QtiRunner","responses","states","variables","base","file","name","mime","that","oldStateVariables","itemApi","killCallback","self","responseId","themeName","themeLoader","interactions","inlineDisplay","Math","convertChoices","_this","outputType","findChoices","shuffleChoices","f","j","r","k","serialToIdentifier","interactionHelper","themesHelper","hb","_renderableClasses","_dependencies","_renderableSubclasses","_defaults","_isValidRenderer","classCorrect","subClass","valid","Renderer","_renderers","success","_locations","list","res","decorators","themeData","deps","requiredSubClasses","addList","load","loaded","choices","url","runtimeLocations","absUrl","build","NewRenderer","_requirejs","_defaultLoadingOptions","reload","loadModuleConfig","baseUrl","requireConfigAliases","reqConfigs","modules","manifest","pciConfig","paths","runtimeModules","resolve","reject","isPortableElementProvider","_loaded","__providers","_registry","get","version","registerProvider","resetProviders","loadProviders","loadPromise","providerLoadingStack","getAllVersions","all","getRuntime","label","model","typeIdentifier","getCreator","xmlns","getLatestCreators","lastVersion","getBaseUrl","runtime","loadRuntimes","provider","loadStack","configLoadingStack","loadCreators","requiredCreatorHooks","portableElementModel","creators","enable","disable","isEnabled","classes","itemBody","atomicBlock","parents","contains","abstract","atomicInline","simpleBlock","simpleInline","flowStatic","blockStatic","inlineStatic","flow","tableCell","caption","col","colgroup","div","dl","dt","dd","hr","li","ol","ul","param","xhtml","tbody","tfoot","thead","td","th","tr","a","abbr","acronym","b","big","cite","code","dfn","em","kbd","q","samp","small","span","strong","sub","sup","tt","var","blockquote","address","h1","h2","h3","h4","h5","h6","p","pre","br","textRun","blockInteraction","inlineInteraction","templateElement","templateBlock","qti","templateInline","drawingInteraction","graphicInteraction","cache","getAllowedContainersElements","jqSelector","getAllowedContainers","intersect","QtiElements","getAllowedContents","checked","recursive","isAllowedClass","getParentClasses","getChildClasses","isBlock","isInline","isVisible","featuresService","getAvailableAuthoringElements","tagTitles","commonInteractions","inlineInteractions","graphicInteractions","authoringElements","description","icon","short","tags","group","availableElements","getAuthoringData","pciModel","qtiElements","registry","providers","config","ciRegistry","icRegistry","handle","runtimeLocation","fullmatch","themes","assetManagerFactory","assetStrategies","portableAssetStrategy","itemThemes","moduleConfig","assetManager","locations","enableDragAndDrop","associate","gapMatch","graphicGapMatch","Renderer$1","userModules","dependency","history","qtiRunner","coreItemData","variableElementsData","userModulesOverride","start","qtiBootstrap"],"sources":["../../loader/bootstrap.js","../qtiItem/core/qtiClasses.js","../qtiItem/helper/util.js","../qtiItem/helper/rendererConfig.js","../qtiItem/core/Element.js","../qtiItem/helper/xmlNsHandler.js","../qtiItem/helper/responseRules.js","../qtiItem/helper/response.js","../qtiItem/helper/itemScore.js","../qtiItem/core/Loader.js","../qtiItem/helper/pci.js","../qtiItem/helper/container.js","../qtiRunner/modalFeedback/inlineRenderer.js","../qtiRunner/modalFeedback/modalRenderer.js","../qtiRunner/core/QtiRunner.js","../qtiItem/helper/interactionHelper.js","../qtiRunner/core/Renderer.js","../portableElementRegistry/factory/factory.js","../qtiCreator/helper/qtiElements.js","../portableElementRegistry/factory/ciRegistry.js","../portableElementRegistry/ciRegistry.js","../portableElementRegistry/factory/icRegistry.js","../portableElementRegistry/icRegistry.js","../portableElementRegistry/assetManager/portableAssetStrategy.js","../qtiCommonRenderer/renderers/config.js","../qtiCommonRenderer/renderers/Renderer.js","../runner/provider/manager/userModules.js","../runtime/qtiBootstrap.js","../runtime/qtiLoader.js","module-create.js","/Users/tamasbesenyei/work/package-tao/tao/views/build/config-wrap-end-default.js"],"sourcesContent":["/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016-2018 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Bootstrap the app, start the entry controller\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\n(function(){\n    'use strict';\n\n\n\n    var loaderScript = document.getElementById('amd-loader');\n    var configUrl = loaderScript.getAttribute('data-config');\n    var bundle  = loaderScript.getAttribute('data-bundle');\n\n    var loadController = function loadController(){\n        var controllerOptions = {};\n        var controllerPath = loaderScript.getAttribute('data-controller');\n        var params = loaderScript.getAttribute('data-params');\n        try{\n            controllerOptions = JSON.parse(params);\n        } catch(err){\n            controllerOptions = {};\n        }\n        window.require([controllerPath], function(controller) {\n            var startController = function startController(){\n                if(!window.started){\n                    window.started = true;\n                    controller.start(controllerOptions);\n                }\n            };\n            document.addEventListener('readystatechange', startController, false);\n            if (document.readyState === 'complete') {\n                startController();\n            }\n        });\n    };\n\n    //always start to load the config\n    window.require([configUrl], function() {\n\n        //define the global loading mechanism\n        if(!window.loadBundles){\n            //keep tracl of loaded bundles, even if require does it,\n            //this prevent some unecessary cycles\n            window.loaded = {};\n\n            /**\n             * Loading entry point for inter bundle dependency,\n             * always take the bundles from the params and window.bundles\n             * @param {String[]} [bundles] - an optional list of bundle to load\n             */\n            window.loadBundles = function loadBundles(bundles){\n                bundles = bundles || [];\n                bundles = bundles.concat(window.bundles)\n                bundles = bundles.filter( function(item, index){\n                    return item && bundles.indexOf(item) === index && window.loaded[item] !== true;\n                });\n                require(bundles, function(){\n                    bundles.forEach( function( item ) {\n                        window.loaded[item] = true;\n                    });\n                    loadController();\n                });\n            }\n        }\n\n        if(bundle || (window.bundles && window.bundles.length)) {\n            window.loadBundles([bundle]);\n        } else {\n            loadController();\n        }\n    });\n})();\n\ndefine(\"loader/bootstrap\", function(){});\n\n","define('taoQtiItem/qtiItem/core/qtiClasses',[],function () { 'use strict';\n\n    var qtiClasses = {\n        _container: 'taoQtiItem/qtiItem/core/Container',\n        assessmentItem: 'taoQtiItem/qtiItem/core/Item',\n        responseProcessing: 'taoQtiItem/qtiItem/core/ResponseProcessing',\n        _simpleFeedbackRule: 'taoQtiItem/qtiItem/core/response/SimpleFeedbackRule',\n        stylesheet: 'taoQtiItem/qtiItem/core/Stylesheet',\n        math: 'taoQtiItem/qtiItem/core/Math',\n        figure: 'taoQtiItem/qtiItem/core/Figure',\n        img: 'taoQtiItem/qtiItem/core/Img',\n        figcaption: 'taoQtiItem/qtiItem/core/Figcaption',\n        object: 'taoQtiItem/qtiItem/core/Object',\n        outcomeDeclaration: 'taoQtiItem/qtiItem/core/variables/OutcomeDeclaration',\n        responseDeclaration: 'taoQtiItem/qtiItem/core/variables/ResponseDeclaration',\n        rubricBlock: 'taoQtiItem/qtiItem/core/RubricBlock',\n        associableHotspot: 'taoQtiItem/qtiItem/core/choices/AssociableHotspot',\n        gap: 'taoQtiItem/qtiItem/core/choices/Gap',\n        gapImg: 'taoQtiItem/qtiItem/core/choices/GapImg',\n        gapText: 'taoQtiItem/qtiItem/core/choices/GapText',\n        hotspotChoice: 'taoQtiItem/qtiItem/core/choices/HotspotChoice',\n        hottext: 'taoQtiItem/qtiItem/core/choices/Hottext',\n        inlineChoice: 'taoQtiItem/qtiItem/core/choices/InlineChoice',\n        simpleAssociableChoice: 'taoQtiItem/qtiItem/core/choices/SimpleAssociableChoice',\n        simpleChoice: 'taoQtiItem/qtiItem/core/choices/SimpleChoice',\n        associateInteraction: 'taoQtiItem/qtiItem/core/interactions/AssociateInteraction',\n        choiceInteraction: 'taoQtiItem/qtiItem/core/interactions/ChoiceInteraction',\n        endAttemptInteraction: 'taoQtiItem/qtiItem/core/interactions/EndAttemptInteraction',\n        extendedTextInteraction: 'taoQtiItem/qtiItem/core/interactions/ExtendedTextInteraction',\n        gapMatchInteraction: 'taoQtiItem/qtiItem/core/interactions/GapMatchInteraction',\n        graphicAssociateInteraction: 'taoQtiItem/qtiItem/core/interactions/GraphicAssociateInteraction',\n        graphicGapMatchInteraction: 'taoQtiItem/qtiItem/core/interactions/GraphicGapMatchInteraction',\n        graphicOrderInteraction: 'taoQtiItem/qtiItem/core/interactions/GraphicOrderInteraction',\n        hotspotInteraction: 'taoQtiItem/qtiItem/core/interactions/HotspotInteraction',\n        hottextInteraction: 'taoQtiItem/qtiItem/core/interactions/HottextInteraction',\n        inlineChoiceInteraction: 'taoQtiItem/qtiItem/core/interactions/InlineChoiceInteraction',\n        matchInteraction: 'taoQtiItem/qtiItem/core/interactions/MatchInteraction',\n        mediaInteraction: 'taoQtiItem/qtiItem/core/interactions/MediaInteraction',\n        orderInteraction: 'taoQtiItem/qtiItem/core/interactions/OrderInteraction',\n        prompt: 'taoQtiItem/qtiItem/core/interactions/Prompt',\n        selectPointInteraction: 'taoQtiItem/qtiItem/core/interactions/SelectPointInteraction',\n        sliderInteraction: 'taoQtiItem/qtiItem/core/interactions/SliderInteraction',\n        textEntryInteraction: 'taoQtiItem/qtiItem/core/interactions/TextEntryInteraction',\n        uploadInteraction: 'taoQtiItem/qtiItem/core/interactions/UploadInteraction',\n        feedbackBlock: 'taoQtiItem/qtiItem/core/feedbacks/FeedbackBlock',\n        feedbackInline: 'taoQtiItem/qtiItem/core/feedbacks/FeedbackInline',\n        modalFeedback: 'taoQtiItem/qtiItem/core/feedbacks/ModalFeedback',\n        customInteraction: 'taoQtiItem/qtiItem/core/interactions/CustomInteraction',\n        infoControl: 'taoQtiItem/qtiItem/core/PortableInfoControl',\n        include: 'taoQtiItem/qtiItem/core/Include',\n        table: 'taoQtiItem/qtiItem/core/Table',\n        printedVariable: 'taoQtiItem/qtiItem/core/PrintedVariable',\n        _tooltip: 'taoQtiItem/qtiItem/core/Tooltip'\n    };\n\n    return qtiClasses;\n\n});\n\n","define('taoQtiItem/qtiItem/helper/util',['lodash'], function (_) { 'use strict';\n\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n\n    /*\n     * This program is free software; you can redistribute it and/or\n     * modify it under the terms of the GNU General Public License\n     * as published by the Free Software Foundation; under version 2\n     * of the License (non-upgradable).\n     *\n     * This program is distributed in the hope that it will be useful,\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n     * GNU General Public License for more details.\n     *\n     * You should have received a copy of the GNU General Public License\n     * along with this program; if not, write to the Free Software\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n     *\n     * Copyright (c) 2015 (original work) Open Assessment Technologies SA\n     *\n     */\n\n    var util = {\n        buildSerial: function buildSerial(prefix) {\n            var id = prefix || '';\n            var chars = 'abcdefghijklmnopqrstuvwxyz0123456789';\n            for (var i = 0; i < 22; i++) {\n                id += chars.charAt(Math.floor(Math.random() * chars.length));\n            }\n            return id;\n        },\n\n        /**\n         * Generates an id for a Qti element (the generation is different from identifier)\n         * @param {Object} item - the element related item\n         * @param {String} prefix - identifier prefix\n         * @returns {String} the identifier\n         * @throws {TypeError} if there is no item\n         */\n        buildId: function buildId(item, prefix) {\n            var id;\n            var usedIds;\n            var i = 1;\n            var suffix = '';\n            var exists = false;\n\n            if (!item) {\n                throw new TypeError('A item is required to generate a unique identifier');\n            }\n\n            usedIds = item.getUsedIds();\n\n            do {\n                exists = false;\n                id = prefix + suffix;\n                if (_.contains(usedIds, id)) {\n                    exists = true;\n                    suffix = '_' + i;\n                    i++;\n                }\n            } while (exists);\n\n            return id;\n        },\n\n        /**\n         * Generates an identifier for a Qti element\n         * @param {Object} item - the element related item\n         * @param {String} prefix - identifier prefix\n         * @param {Boolean} [useSuffix = true] - add a \"_ + index\" to the identifier\n         * @returns {String} the identifier\n         * @throws {TypeError} if there is no item\n         */\n        buildIdentifier: function buildIdentifier(item, prefix, useSuffix) {\n            var id;\n            var usedIds;\n            var suffix = '';\n            var i = 1;\n            var exists = false;\n\n            if (!item) {\n                throw new TypeError('A item is required to generate a unique identifier');\n            }\n\n            if (!prefix) {\n                throw new TypeError('Prefix is required to build an identifier');\n            }\n\n            usedIds = item.getUsedIdentifiers();\n            useSuffix = _.isUndefined(useSuffix) ? true : useSuffix;\n\n            if (prefix) {\n                prefix = prefix\n                    .replace(/_[0-9]+$/gi, '_') //detect incremental id of type choice_12, response_3, etc.\n                    .replace(/[^a-zA-Z0-9_]/gi, '_')\n                    .replace(/(_)+/gi, '_');\n                if (useSuffix) {\n                    suffix = '_' + i;\n                }\n            }\n\n            do {\n                exists = false;\n                id = prefix + suffix;\n                if (usedIds[id]) {\n                    exists = true;\n                    suffix = '_' + i;\n                    i++;\n                }\n            } while (exists);\n\n            return id;\n        },\n\n        findInCollection: function findInCollection(element, collectionNames, searchedSerial) {\n            var found = null;\n\n            if (_.isString(collectionNames)) {\n                collectionNames = [collectionNames];\n            }\n\n            if (_.isArray(collectionNames)) {\n                _.each(collectionNames, function(collectionName) {\n                    //get collection to search in (resolving case like interaction.choices.0\n                    var collection = element;\n                    _.each(collectionName.split('.'), function(nameToken) {\n                        collection = collection[nameToken];\n                    });\n                    var elt = collection[searchedSerial];\n\n                    if (elt) {\n                        found = { parent: element, element: elt };\n                        return false; //break the each loop\n                    }\n\n                    //search inside each elements:\n                    _.each(collection, function(elt) {\n                        if (_.isFunction(elt.find)) {\n                            found = elt.find(searchedSerial);\n                            if (found) {\n                                return false; //break the each loop\n                            }\n                        }\n                    });\n\n                    if (found) {\n                        return false; //break the each loop\n                    }\n                });\n            } else {\n                throw new Error('invalid argument : collectionNames must be an array or a string');\n            }\n\n            return found;\n        },\n        addMarkupNamespace: function addMarkupNamespace(markup, ns) {\n            if (ns) {\n                markup = markup.replace(/<(\\/)?([a-z:]+)(\\s?)([^><]*)>/g, function($0, $1, $2, $3, $4) {\n                    if ($2.indexOf(':') > 0) {\n                        return $0;\n                    }\n                    $1 = $1 || '';\n                    $3 = $3 || '';\n                    return '<' + $1 + ns + ':' + $2 + $3 + $4 + '>';\n                });\n                return markup;\n            }\n            return markup;\n        },\n        removeMarkupNamespaces: function removeMarkupNamespace(markup) {\n            return markup.replace(/<(\\/)?(\\w*):([^>]*)>/g, '<$1$3>');\n        },\n        getMarkupUsedNamespaces: function getMarkupUsedNamespaces(markup) {\n            var namespaces = [];\n            markup.replace(/<(\\/)?(\\w*):([^>]*)>/g, function(original, slash, ns, node) {\n                namespaces.push(ns);\n                return '<' + slash + node + '>';\n            });\n            return _.uniq(namespaces);\n        }\n    };\n\n    return util;\n\n});\n\n","define('taoQtiItem/qtiItem/helper/rendererConfig',['lodash', 'jquery'], function (_, $) { 'use strict';\n\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    $ = $ && Object.prototype.hasOwnProperty.call($, 'default') ? $['default'] : $;\n\n    var rendererConfigHelper = {};\n\n    rendererConfigHelper.getOptionsFromArguments = function(args) {\n        var options = {\n            data: {},\n            placeholder: null,\n            subclass: '',\n            renderer: null\n        };\n\n        _.each(args, function(arg) {\n            if (arg) {\n                if (arg.isRenderer) {\n                    options.renderer = arg;\n                } else if (arg instanceof $ && arg.length) {\n                    options.placeholder = arg;\n                } else if (_.isString(arg)) {\n                    options.subclass = arg;\n                } else if (_.isPlainObject(arg)) {\n                    options.data = arg;\n                } else {\n                    console.log('invalid arg', arg, args);\n                }\n            }\n        });\n\n        return options;\n    };\n\n    return rendererConfigHelper;\n\n});\n\n","define('taoQtiItem/qtiItem/core/Element',['jquery', 'lodash', 'class', 'core/logger', 'taoQtiItem/qtiItem/helper/util', 'taoQtiItem/qtiItem/helper/rendererConfig'], function ($, _, _class, loggerFactory, util, rendererConfig) { 'use strict';\n\n    $ = $ && Object.prototype.hasOwnProperty.call($, 'default') ? $['default'] : $;\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    loggerFactory = loggerFactory && Object.prototype.hasOwnProperty.call(loggerFactory, 'default') ? loggerFactory['default'] : loggerFactory;\n    util = util && Object.prototype.hasOwnProperty.call(util, 'default') ? util['default'] : util;\n    rendererConfig = rendererConfig && Object.prototype.hasOwnProperty.call(rendererConfig, 'default') ? rendererConfig['default'] : rendererConfig;\n\n    /*\n     * This program is free software; you can redistribute it and/or\n     * modify it under the terms of the GNU General Public License\n     * as published by the Free Software Foundation; under version 2\n     * of the License (non-upgradable).\n     *\n     * This program is distributed in the hope that it will be useful,\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n     * GNU General Public License for more details.\n     *\n     * You should have received a copy of the GNU General Public License\n     * along with this program; if not, write to the Free Software\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n     *\n     * Copyright (c) 2015 (original work) Open Assessment Technologies SA\n     *\n     */\n\n    var _instances = {};\n\n    /**\n     * Create a logger\n     */\n    var logger = loggerFactory('taoQtiItem/qtiItem/core/Element');\n\n    var Element = Class.extend({\n        qtiClass: '',\n        serial: '',\n        rootElement: null,\n        init: function(serial, attributes) {\n            //init own attributes\n            this.attributes = {};\n\n            //system properties, for item creator internal use only\n            this.metaData = {};\n\n            //init call in the format init(attributes)\n            if (typeof serial === 'object') {\n                attributes = serial;\n                serial = '';\n            }\n\n            if (!serial) {\n                serial = util.buildSerial(this.qtiClass + '_');\n            }\n\n            if (serial && (typeof serial !== 'string' || !serial.match(/^[a-z_0-9]*$/i))) {\n                throw 'invalid QTI serial : (' + typeof serial + ') ' + serial;\n            }\n\n            if (!_instances[serial]) {\n                _instances[serial] = this;\n                this.serial = serial;\n                this.setAttributes(attributes || {});\n            } else {\n                throw 'a QTI Element with the same serial already exists ' + serial;\n            }\n\n            if (typeof this.initContainer === 'function') {\n                this.initContainer(arguments[2] || '');\n            }\n            if (typeof this.initObject === 'function') {\n                this.initObject();\n            }\n        },\n        is: function(qtiClass) {\n            return qtiClass === this.qtiClass;\n        },\n        placeholder: function() {\n            return '{{' + this.serial + '}}';\n        },\n        getSerial: function() {\n            return this.serial;\n        },\n        getUsedIdentifiers: function() {\n            var usedIds = {};\n            var elts = this.getComposingElements();\n            for (var i in elts) {\n                var elt = elts[i];\n                var id = elt.attr('identifier');\n                if (id) {\n                    //warning: simplistic implementation, allow only one unique identifier in the item no matter the element class/type\n                    usedIds[id] = elt;\n                }\n            }\n            return usedIds;\n        },\n\n        /**\n         * Get the ids in use. (id is different from identifier)\n         * @returns {Array} of the ids in use\n         */\n        getUsedIds: function getUsedIds() {\n            var usedIds = [];\n            _.forEach(this.getComposingElements(), function(elt) {\n                var id = elt.attr('id');\n                if (id && !_.contains(usedIds, id)) {\n                    usedIds.push(id);\n                }\n            });\n            return usedIds;\n        },\n\n        attr: function(name, value) {\n            if (name) {\n                if (value !== undefined) {\n                    this.attributes[name] = value;\n                } else {\n                    if (typeof name === 'object') {\n                        for (var prop in name) {\n                            this.attr(prop, name[prop]);\n                        }\n                    } else if (typeof name === 'string') {\n                        if (this.attributes[name] === undefined) {\n                            return undefined;\n                        } else {\n                            return this.attributes[name];\n                        }\n                    }\n                }\n            }\n            return this;\n        },\n        data: function(name, value) {\n            if (name) {\n                if (value !== undefined) {\n                    this.metaData[name] = value;\n                    $(document).trigger('metaChange.qti-widget', { element: this, key: name, value: value });\n                } else {\n                    if (typeof name === 'object') {\n                        for (var prop in name) {\n                            this.data(prop, name[prop]);\n                        }\n                    } else if (typeof name === 'string') {\n                        if (this.metaData[name] === undefined) {\n                            return undefined;\n                        } else {\n                            return this.metaData[name];\n                        }\n                    }\n                }\n            }\n            return this;\n        },\n        removeData: function(name) {\n            delete this.metaData[name];\n            return this;\n        },\n        removeAttr: function(name) {\n            return this.removeAttributes(name);\n        },\n        setAttributes: function(attributes) {\n            if (!_.isPlainObject(attributes)) {\n                logger.warn('attributes should be a plain object');\n            }\n            this.attributes = attributes;\n            return this;\n        },\n        getAttributes: function() {\n            return _.clone(this.attributes);\n        },\n        removeAttributes: function(attrNames) {\n            if (typeof attrNames === 'string') {\n                attrNames = [attrNames];\n            }\n            for (var i in attrNames) {\n                delete this.attributes[attrNames[i]];\n            }\n            return this;\n        },\n        getComposingElements: function() {\n            var elts = {};\n            function append(element) {\n                elts[element.getSerial()] = element; //pass individual object by ref, instead of the whole list(object)\n                elts = _.extend(elts, element.getComposingElements());\n            }\n            if (typeof this.initContainer === 'function') {\n                append(this.getBody());\n            }\n            if (typeof this.initObject === 'function') {\n                append(this.getObject());\n            }\n            _.each(this.metaData, function(v) {\n                if (Element.isA(v, '_container')) {\n                    append(v);\n                } else if (_.isArray(v)) {\n                    _.each(v, function(v) {\n                        if (Element.isA(v, '_container')) {\n                            append(v);\n                        }\n                    });\n                }\n            });\n            return elts;\n        },\n        getUsedClasses: function() {\n            var ret = [this.qtiClass],\n                composingElts = this.getComposingElements();\n\n            _.each(composingElts, function(elt) {\n                ret.push(elt.qtiClass);\n            });\n\n            return _.uniq(ret);\n        },\n        find: function(serial) {\n            var found = null;\n            var object, body;\n\n            if (typeof this.initObject === 'function') {\n                object = this.getObject();\n                if (object.serial === serial) {\n                    found = { parent: this, element: object, location: 'object' };\n                }\n            }\n\n            if (!found && typeof this.initContainer === 'function') {\n                body = this.getBody();\n                if (body.serial === serial) {\n                    found = { parent: this, element: body, location: 'body' };\n                } else {\n                    found = this.getBody().find(serial, this);\n                }\n            }\n\n            return found;\n        },\n        parent: function() {\n            var item = this.getRootElement();\n            if (item) {\n                var found = item.find(this.getSerial());\n                if (found) {\n                    return found.parent;\n                }\n            }\n            return null;\n        },\n        /**\n         * @deprecated - use setRootElement() instead\n         */\n        setRelatedItem: function(item) {\n            logger.warn('Deprecated use of setRelatedItem()');\n            this.setRootElement(item);\n        },\n        setRootElement: function(item) {\n            var composingElts, i;\n\n            if (Element.isA(item, 'assessmentItem')) {\n                this.rootElement = item;\n                composingElts = this.getComposingElements();\n                for (i in composingElts) {\n                    composingElts[i].setRootElement(item);\n                }\n            }\n        },\n        /**\n         * @deprecated - use getRootElement() instead\n         */\n        getRelatedItem: function() {\n            logger.warn('Deprecated use of getRelatedItem()');\n            return this.getRootElement();\n        },\n        getRootElement: function() {\n            var ret = null;\n            if (Element.isA(this.rootElement, 'assessmentItem')) {\n                ret = this.rootElement;\n            }\n            return ret;\n        },\n        setRenderer: function(renderer) {\n            if (renderer && renderer.isRenderer) {\n                this.renderer = renderer;\n                var elts = this.getComposingElements();\n                for (var serial in elts) {\n                    elts[serial].setRenderer(renderer);\n                }\n            } else {\n                throw 'invalid qti rendering engine';\n            }\n        },\n        getRenderer: function() {\n            return this.renderer;\n        },\n        /**\n         * Render the element. Arguments are all optional and can be given in any order.\n         * Argument parsing is based on argument type and is done by taoQtiItem/qtiItem/core/helpers/rendererConfig\n         * @param {Renderer} renderer - specify which renderer to use\n         * @param {jQuery} placeholder - DOM element that will be replaced by the rendered element\n         * @param {Object} data - template data for the rendering\n         * @param {String} subclass - subclass enables different behaviour of the same qti class in different contexts (eg. we could have different rendering for simpleChoice according to where it is being used: simpleChoice.orderInteraction, simpleChoice.choiceInteraction...)\n         * @returns {String} - the rendered element as an HTML string\n         */\n        render: function render() {\n            var args = rendererConfig.getOptionsFromArguments(arguments);\n            var _renderer = args.renderer || this.getRenderer();\n            var rendering;\n\n            var tplData = {},\n                defaultData = {\n                    tag: this.qtiClass,\n                    serial: this.serial,\n                    attributes: this.getAttributes()\n                };\n\n            if (!_renderer) {\n                throw new Error('render: no renderer found for the element ' + this.qtiClass + ':' + this.serial);\n            }\n\n            if (typeof this.initContainer === 'function') {\n                //allow body to have a different renderer if it has its own renderer set\n                defaultData.body = this.getBody().render(args.renderer);\n            }\n            if (typeof this.initObject === 'function') {\n                defaultData.object = {\n                    attributes: this.object.getAttributes()\n                };\n                defaultData.object.attributes.data = _renderer.resolveUrl(this.object.attr('data'));\n            }\n\n            tplData = _.merge(defaultData, args.data || {});\n            tplData = _renderer.getData(this, tplData, args.subclass);\n            rendering = _renderer.renderTpl(this, tplData, args.subclass);\n            if (args.placeholder) {\n                args.placeholder.replaceWith(rendering);\n            }\n\n            return rendering;\n        },\n        postRender: function(data, altClassName, renderer) {\n            var postRenderers = [];\n            var _renderer = renderer || this.getRenderer();\n\n            if (typeof this.initContainer === 'function') {\n                //allow body to have a different renderer if it has its own renderer set\n                postRenderers = this.getBody().postRender(data, '', renderer);\n            }\n\n            if (_renderer) {\n                postRenderers.push(_renderer.postRender(this, data, altClassName));\n            } else {\n                throw 'postRender: no renderer found for the element ' + this.qtiClass + ':' + this.serial;\n            }\n\n            return _.compact(postRenderers);\n        },\n        getContainer: function($scope, subclass) {\n            var renderer = this.getRenderer();\n            if (renderer) {\n                return renderer.getContainer(this, $scope, subclass);\n            } else {\n                throw 'getContainer: no renderer found for the element ' + this.qtiClass + ':' + this.serial;\n            }\n        },\n        toArray: function() {\n            var arr = {\n                serial: this.serial,\n                type: this.qtiClass,\n                attributes: this.getAttributes()\n            };\n\n            if (typeof this.initContainer === 'function') {\n                arr.body = this.getBody().toArray();\n            }\n            if (typeof this.initObject === 'function') {\n                arr.object = this.object.toArray();\n            }\n\n            return arr;\n        },\n        isEmpty: function() {\n            //tells whether the element should be considered empty or not, from the rendering point of view\n            return false;\n        },\n        addClass: function(className) {\n            var clazz = this.attr('class') || '';\n            if (!_containClass(clazz, className)) {\n                this.attr('class', clazz + (clazz.length ? ' ' : '') + className);\n            }\n        },\n        hasClass: function(className) {\n            return _containClass(this.attr('class'), className);\n        },\n        removeClass: function(className) {\n            var clazz = this.attr('class') || '';\n            if (clazz) {\n                var regex = new RegExp('(?:^|\\\\s)' + className + '(?:\\\\s|$)');\n                clazz = clazz.replace(regex, ' ').trim();\n\n                if (clazz) {\n                    this.attr('class', clazz);\n                } else {\n                    this.removeAttr('class');\n                }\n            }\n        },\n        /**\n         * Add or remove class. Setting the optional state will force addition/removal.\n         * State is here to keep the jQuery syntax\n         *\n         * @param {String} className\n         * @param {Boolean} [state]\n         */\n        toggleClass: function(className, state) {\n            if (typeof state === 'boolean') {\n                return state ? this.addClass(className) : this.removeClass(className);\n            }\n\n            if (this.hasClass(className)) {\n                return this.removeClass(className);\n            }\n            return this.addClass(className);\n        },\n        isset: function() {\n            return Element.issetElement(this.serial);\n        },\n        unset: function() {\n            return Element.unsetElement(this.serial);\n        }\n    });\n\n    var _containClass = function(allClassStr, className) {\n        var regex = new RegExp('(?:^|\\\\s)' + className + '(?:\\\\s|$)', '');\n        return allClassStr && regex.test(allClassStr);\n    };\n\n    //helpers\n    Element.isA = function(qtiElement, qtiClass) {\n        return qtiElement instanceof Element && qtiElement.is(qtiClass);\n    };\n\n    Element.getElementBySerial = function(serial) {\n        return _instances[serial];\n    };\n\n    Element.issetElement = function(serial) {\n        return !!_instances[serial];\n    };\n\n    /**\n     * Unset a registered element from it's serial\n     * @param {String} serial - the element serial\n     * @returns {Boolean} true if unset\n     */\n    Element.unsetElement = function(serial) {\n        var element = Element.getElementBySerial(serial);\n\n        if (element) {\n            var composingElements = element.getComposingElements();\n            _.each(composingElements, function(elt) {\n                delete _instances[elt.serial];\n            });\n            delete _instances[element.serial];\n\n            return true;\n        }\n        return false;\n    };\n\n    return Element;\n\n});\n\n","define('taoQtiItem/qtiItem/helper/xmlNsHandler',[],function () { 'use strict';\n\n    /*\n     * This program is free software; you can redistribute it and/or\n     * modify it under the terms of the GNU General Public License\n     * as published by the Free Software Foundation; under version 2\n     * of the License (non-upgradable).\n     *\n     * This program is distributed in the hope that it will be useful,\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n     * GNU General Public License for more details.\n     *\n     * You should have received a copy of the GNU General Public License\n     * along with this program; if not, write to the Free Software\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n     *\n     * Copyright (c) 2017-2022 (original work) Open Assessment Technologies SA\n     */\n\n    /**\n     * XML namespace handling\n     */\n\n    /**\n     * Elements that need to be prefixed\n     *\n     * @see http://www.imsglobal.org/xsd/qti/qtiv2p2/imsqti_v2p2.xsd\n     * @type {string}\n     */\n    const prefixed = 'article|aside|bdi|figure|footer|header|nav|rb|rp|rt|rtc|ruby|section';\n\n    /**\n     * Find a possibly existing prefix\n     *\n     * @param namespaces\n     * @param html5Ns\n     * @returns {*}\n     */\n    function getPrefix(namespaces, html5Ns) {\n        let key;\n        for (key in namespaces) {\n            if (namespaces[key] === html5Ns) {\n                return key;\n            }\n        }\n        return 'qh5';\n    }\n\n    var xmlNsHandler = {\n        /**\n         * Remove prefix to make sure elements are properly displayed\n         *\n         * @param body\n         */\n        stripNs: function stripNs(body) {\n            const pattern = '([\\\\w]+)\\\\:(' + prefixed + ')';\n            const openRegEx = new RegExp('(<' + pattern + ')', 'gi');\n            const closeRegEx = new RegExp('(<\\\\/' + pattern + '>)', 'gi');\n            return body.replace(openRegEx, '<$3').replace(closeRegEx, '</$3>');\n        },\n\n        /**\n         * Add a prefix to those elements that require one\n         *\n         * @param xml\n         * @param namespaces\n         * @returns {*}\n         */\n        restoreNs: function restoreNs(xml, namespaces, ignoreMarkup = false) {\n            let xmlCopy = xml;\n            if (ignoreMarkup) {\n                // cut from xmlCopy <markup...>...</markup>\n                // because markup should be html without namespace qh5\n                xmlCopy = xml.replace(/((?=<markup)(.|\\n)*?(?:<\\/markup>)+)/gim, '');\n            }\n            const xmlRe = new RegExp('(<(' + prefixed + ')[^>]*>|<\\\\/(' + prefixed + ')>)', 'gi');\n            const tagRe = new RegExp('((<)(' + prefixed + ')([^>]*)(>)|(<\\\\/)(' + prefixed + ')(>))', 'i');\n            const xmlMatch = xmlCopy.match(xmlRe);\n            const imsXsd = 'http://www.imsglobal.org/xsd';\n            const html5Ns = imsXsd + '/imsqtiv2p2_html5_v1p0';\n            const prefix = getPrefix(namespaces, html5Ns);\n            const prefixAtt = 'xmlns:' + prefix + '=\"' + html5Ns + '\"';\n            let i = xmlMatch ? xmlMatch.length : 0;\n\n            if (!xmlMatch) {\n                return xml;\n            }\n\n            while (i--) {\n                const tagMatch = xmlMatch[i].match(tagRe);\n                xml = xml.replace(\n                    xmlMatch[i],\n                    tagMatch[5]\n                        ? '<' + prefix + ':' + tagMatch[3] + tagMatch[4] + '>'\n                        : '</' + prefix + ':' + tagMatch[7] + '>'\n                );\n            }\n\n            // we found matches but no namespace has been set\n            if (xmlMatch.length && xml.indexOf(prefixAtt) === -1) {\n                xml = xml.replace('<assessmentItem', '<assessmentItem ' + prefixAtt);\n            }\n\n            // make sure the item is set to qti 2.2\n            xml = xml.replace('xmlns=\"' + imsXsd + '/imsqti_v2p1\"', 'xmlns=\"' + imsXsd + '/imsqti_v2p2\"');\n            xml = xml.replace(\n                'xsi:schemaLocation=\"' + imsXsd + '/imsqti_v2p1 imsqti_v2p1.xsd\"',\n                'xsi:schemaLocation=\"' + imsXsd + '/imsqti_v2p2 ' + imsXsd + '/qti/qtiv2p2/imsqti_v2p2.xsd\"'\n            );\n\n            return xml;\n        }\n    };\n\n    return xmlNsHandler;\n\n});\n\n","define('taoQtiItem/qtiItem/helper/responseRules',[],function () { 'use strict';\n\n    /*\n     * This program is free software; you can redistribute it and/or\n     * modify it under the terms of the GNU General Public License\n     * as published by the Free Software Foundation; under version 2\n     * of the License (non-upgradable).\n     *\n     * This program is distributed in the hope that it will be useful,\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n     * GNU General Public License for more details.\n     *\n     * You should have received a copy of the GNU General Public License\n     * along with this program; if not, write to the Free Software\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n     *\n     * Copyright (c) 2020 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n     *\n     */\n    var responseRules = {\n        MATCH_CORRECT: (responseIdentifier, outcomeIdentifier) => ({\n            qtiClass: 'responseCondition',\n            responseIf: {\n                qtiClass: 'responseIf',\n                expression: {\n                    qtiClass: 'match',\n                    expressions: [\n                        {\n                            qtiClass: 'variable',\n                            attributes: {\n                                identifier: responseIdentifier,\n                            },\n                        },\n                        {\n                            qtiClass: 'correct',\n                            attributes: {\n                                identifier: responseIdentifier,\n                            },\n                        },\n                    ],\n                },\n                responseRules: [\n                    {\n                        qtiClass: 'setOutcomeValue',\n                        attributes: {\n                            identifier: outcomeIdentifier,\n                        },\n                        expression: {\n                            qtiClass: 'sum',\n                            expressions: [\n                                {\n                                    qtiClass: 'variable',\n                                    attributes: {\n                                        identifier: outcomeIdentifier,\n                                    },\n                                },\n                                {\n                                    qtiClass: 'baseValue',\n                                    attributes: {\n                                        baseType: 'integer'\n                                    },\n                                    value: '1',\n                                },\n                            ],\n                        },\n                    },\n                ],\n            },\n        }),\n        MAP_RESPONSE: (responseIdentifier, outcomeIdentifier) => ({\n            qtiClass: 'responseCondition',\n            responseIf: {\n                qtiClass: 'responseIf',\n                expression: {\n                    qtiClass: 'not',\n                    expressions: [\n                        {\n                            qtiClass: 'isNull',\n                            expressions: [{\n                                qtiClass: 'variable',\n                                attributes: {\n                                    identifier: responseIdentifier,\n                                },\n                            }],\n                        },\n                    ],\n                },\n                responseRules: [\n                    {\n                        qtiClass: 'setOutcomeValue',\n                        attributes: {\n                            identifier: outcomeIdentifier,\n                        },\n                        expression: {\n                            qtiClass: 'sum',\n                            expressions: [\n                                {\n                                    qtiClass: 'variable',\n                                    attributes: {\n                                        identifier: outcomeIdentifier,\n                                    }\n                                },\n                                {\n                                    qtiClass: 'mapResponse',\n                                    attributes: {\n                                        identifier: responseIdentifier,\n                                    },\n                                },\n                            ],\n                        },\n                    },\n                ],\n            },\n        }),\n        MAP_RESPONSE_POINT: (responseIdentifier, outcomeIdentifier) => ({\n            qtiClass: 'responseCondition',\n            responseIf: {\n                qtiClass: 'responseIf',\n                expression: {\n                    qtiClass: 'not',\n                    expressions: [\n                        {\n                            qtiClass: 'isNull',\n                            expressions: [{\n                                qtiClass: 'variable',\n                                attributes: {\n                                    identifier: responseIdentifier,\n                                },\n                            }],\n                        },\n                    ],\n                },\n                responseRules: [\n                    {\n                        qtiClass: 'setOutcomeValue',\n                        attributes: {\n                            identifier: outcomeIdentifier,\n                        },\n                        expression: {\n                            qtiClass: 'sum',\n                            expressions: [\n                                {\n                                    qtiClass: 'variable',\n                                    attributes: {\n                                        identifier: outcomeIdentifier,\n                                    }\n                                },\n                                {\n                                    qtiClass: 'mapResponsePoint',\n                                    attributes: {\n                                        identifier: responseIdentifier,\n                                    },\n                                },\n                            ],\n                        },\n                    },\n                ],\n            },\n        }),\n    };\n\n    return responseRules;\n\n});\n\n","define('taoQtiItem/qtiItem/helper/response',['lodash', 'taoQtiItem/qtiItem/helper/responseRules'], function (_, responseRulesHelper) { 'use strict';\n\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    responseRulesHelper = responseRulesHelper && Object.prototype.hasOwnProperty.call(responseRulesHelper, 'default') ? responseRulesHelper['default'] : responseRulesHelper;\n\n    /*\n     * This program is free software; you can redistribute it and/or\n     * modify it under the terms of the GNU General Public License\n     * as published by the Free Software Foundation; under version 2\n     * of the License (non-upgradable).\n     *\n     * This program is distributed in the hope that it will be useful,\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n     * GNU General Public License for more details.\n     *\n     * You should have received a copy of the GNU General Public License\n     * along with this program; if not, write to the Free Software\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n     *\n     * Copyright (c) 2014-2020 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n     *\n     */\n\n    const _templateNames = {\n        MATCH_CORRECT: 'http://www.imsglobal.org/question/qti_v2p1/rptemplates/match_correct',\n        MAP_RESPONSE: 'http://www.imsglobal.org/question/qti_v2p1/rptemplates/map_response',\n        MAP_RESPONSE_POINT: 'http://www.imsglobal.org/question/qti_v2p1/rptemplates/map_response_point',\n        NONE: 'no_response_processing'\n    };\n\n\n    var response = {\n        isUsingTemplate(response, tpl) {\n            if (_.isString(tpl)) {\n                if (tpl === response.template || _templateNames[tpl] === response.template) {\n                    return true;\n                }\n            }\n\n            return false;\n        },\n        isValidTemplateName(tplName) {\n            return !!this.getTemplateUriFromName(tplName);\n        },\n        getTemplateUriFromName(tplName) {\n            return _templateNames[tplName] || '';\n        },\n        getTemplateNameFromUri(tplUri) {\n            let tplName = '';\n\n            _.forIn(_templateNames, (uri, name) => {\n                if (uri === tplUri) {\n                    tplName = name;\n                    return false;\n                }\n            });\n\n            return tplName;\n        },\n        getTemplateNameFromResponseRules(responseIdentifier, responseRules) {\n            if (!responseRules) {\n                return 'NONE';\n            }\n\n            const {\n                responseIf: {\n                    responseRules: [outcomeRules = {}] = [],\n                } = {}\n            } = responseRules;\n            const {\n                attributes: {\n                    identifier: outcomeIdentifier,\n                } = {},\n            } = outcomeRules;\n\n            if (!outcomeIdentifier) {\n                return '';\n            }\n\n            return Object.keys(responseRulesHelper).find(\n                (key) => _.isEqual(responseRules, responseRulesHelper[key](responseIdentifier, outcomeIdentifier))\n            );\n        }\n    };\n\n    return response;\n\n});\n\n","define('taoQtiItem/qtiItem/helper/itemScore',[],function () { 'use strict';\n\n    /*\n     * This program is free software; you can redistribute it and/or\n     * modify it under the terms of the GNU General Public License\n     * as published by the Free Software Foundation; under version 2\n     * of the License (non-upgradable).\n     *\n     * This program is distributed in the hope that it will be useful,\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n     * GNU General Public License for more details.\n     *\n     * You should have received a copy of the GNU General Public License\n     * along with this program; if not, write to the Free Software\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n     *\n     * Copyright (c) 2020 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n     *\n     */\n\n    /**\n     * Returns iteraction score response rule object\n     *\n     * @param {String} responseIdentifiers interactions reponse indentifiers\n     * @returns {Obeject}\n     */\n    var itemScore = (responseIdentifiers) => {\n        const outcomeExpressions = responseIdentifiers.map((outcomeIdentifier) => ({\n            qtiClass: 'variable',\n            attributes: {\n                identifier: `SCORE_${outcomeIdentifier}`,\n            },\n        }));\n\n        return {\n            qtiClass: 'setOutcomeValue',\n            attributes: {\n                identifier: 'SCORE',\n            },\n            expression: {\n                qtiClass: 'sum',\n                expressions: outcomeExpressions,\n            },\n        };\n    };\n\n    return itemScore;\n\n});\n\n","define('taoQtiItem/qtiItem/core/Loader',['lodash', 'class', 'taoQtiItem/qtiItem/core/qtiClasses', 'taoQtiItem/qtiItem/core/Element', 'taoQtiItem/qtiItem/helper/xmlNsHandler', 'core/moduleLoader', 'taoQtiItem/qtiItem/helper/response', 'taoQtiItem/qtiItem/helper/itemScore'], function (_, _class, qtiClasses, Element, xmlNsHandler, moduleLoader, responseHelper, itemScoreHelper) { 'use strict';\n\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    qtiClasses = qtiClasses && Object.prototype.hasOwnProperty.call(qtiClasses, 'default') ? qtiClasses['default'] : qtiClasses;\n    Element = Element && Object.prototype.hasOwnProperty.call(Element, 'default') ? Element['default'] : Element;\n    xmlNsHandler = xmlNsHandler && Object.prototype.hasOwnProperty.call(xmlNsHandler, 'default') ? xmlNsHandler['default'] : xmlNsHandler;\n    moduleLoader = moduleLoader && Object.prototype.hasOwnProperty.call(moduleLoader, 'default') ? moduleLoader['default'] : moduleLoader;\n    responseHelper = responseHelper && Object.prototype.hasOwnProperty.call(responseHelper, 'default') ? responseHelper['default'] : responseHelper;\n    itemScoreHelper = itemScoreHelper && Object.prototype.hasOwnProperty.call(itemScoreHelper, 'default') ? itemScoreHelper['default'] : itemScoreHelper;\n\n    /*\n     * This program is free software; you can redistribute it and/or\n     * modify it under the terms of the GNU General Public License\n     * as published by the Free Software Foundation; under version 2\n     * of the License (non-upgradable).\n     *\n     * This program is distributed in the hope that it will be useful,\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n     * GNU General Public License for more details.\n     *\n     * You should have received a copy of the GNU General Public License\n     * along with this program; if not, write to the Free Software\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n     *\n     * Copyright (c) 2015-2020 (original work) Open Assessment Technologies SA ;\n     *\n     */\n\n    /**\n     * If a property is given as a serialized JSON object, parse it directly to a JS object\n     */\n    const loadPortableCustomElementProperties = (portableElement, rawProperties) => {\n        var properties = {};\n\n        _.forOwn(rawProperties, (value, key) => {\n            try {\n                properties[key] = JSON.parse(value);\n            } catch (e) {\n                properties[key] = value;\n            }\n        });\n        portableElement.properties = properties;\n    };\n\n    const loadPortableCustomElementData = (portableElement, data) => {\n        portableElement.typeIdentifier = data.typeIdentifier;\n        portableElement.markup = data.markup;\n        portableElement.entryPoint = data.entryPoint;\n        portableElement.libraries = data.libraries;\n        portableElement.setNamespace('', data.xmlns);\n\n        loadPortableCustomElementProperties(portableElement, data.properties);\n    };\n\n    var Loader = Class.extend({\n        init(item, classesLocation) {\n            this.qti = {}; //loaded qti classes are store here\n            this.classesLocation = {};\n            this.item = item || null; //starts either from scratch or with an existing item object\n\n            this.setClassesLocation(classesLocation || qtiClasses); //load default location for qti classes model\n        },\n        setClassesLocation(qtiClassesList) {\n            _.extend(this.classesLocation, qtiClassesList);\n\n            return this;\n        },\n        getRequiredClasses(data) {\n            let ret = [];\n\n            for (let i in data) {\n                if (i === 'qtiClass' && data[i] !== '_container' && i !== 'rootElement') {\n                    //although a _container is a concrete class in TAO, it is not defined in QTI standard\n                    ret.push(data[i]);\n                } else if (typeof data[i] === 'object' && i !== 'responseRules') {\n                    //responseRules should'nt be part of the parsing\n                    ret = _.union(ret, this.getRequiredClasses(data[i]));\n                }\n            }\n\n            return ret;\n        },\n        loadRequiredClasses(data, callback, reload) {\n            let requiredClass;\n            const requiredClasses = this.getRequiredClasses(data, reload);\n            const required = [];\n\n            for (let i in requiredClasses) {\n                requiredClass = requiredClasses[i];\n                if (this.classesLocation[requiredClass]) {\n                    required.push({\n                        module: this.classesLocation[requiredClass],\n                        category: 'qti'\n                    });\n                } else {\n                    throw new Error(`missing qti class location declaration : ${requiredClass}`);\n                }\n            }\n\n            moduleLoader([], () => true).addList(required).load().then(loadeded => {\n                loadeded.forEach(QtiClass => {\n                    this.qti[QtiClass.prototype.qtiClass] = QtiClass;\n                });\n                callback.call(this, this.qti);\n            });\n        },\n        getLoadedClasses() {\n            return _.keys(this.qti);\n        },\n        loadItemData(data, callback) {\n            this.loadRequiredClasses(data, Qti => {\n                if (typeof data === 'object' && data.qtiClass === 'assessmentItem') {\n                    //unload an item from it's serial (in case of a reload)\n                    if (data.serial) {\n                        Element.unsetElement(data.serial);\n                    }\n\n                    this.item = new Qti.assessmentItem(data.serial, data.attributes || {});\n                    this.loadContainer(this.item.getBody(), data.body);\n\n                    for (let i in data.outcomes) {\n                        const outcome = this.buildOutcome(data.outcomes[i]);\n\n                        if (outcome) {\n                            this.item.addOutcomeDeclaration(outcome);\n                        }\n                    }\n\n                    for (let i in data.feedbacks) {\n                        const feedback = this.buildElement(data.feedbacks[i]);\n\n                        if (feedback) {\n                            this.item.addModalFeedback(feedback);\n                        }\n                    }\n\n                    for (let i in data.stylesheets) {\n                        const stylesheet = this.buildElement(data.stylesheets[i]);\n\n                        if (stylesheet) {\n                            this.item.addStylesheet(stylesheet);\n                        }\n                    }\n\n                    //important : build responses after all modal feedbacks and outcomes has been loaded, because the simple feedback rules need to reference them\n                    let responseRules = data.responseProcessing && data.responseProcessing.responseRules\n                        ? [...data.responseProcessing.responseRules]\n                        : [];\n                    for (let i in data.responses) {\n                        const responseIdentifier = data.responses[i].identifier;\n                        const responseRuleItemIndex = responseRules.findIndex(({ responseIf: {\n                            expression: {\n                                expressions: [expression = {}] = [],\n                            } = {}\n                        } = {} }) => expression.attributes\n                        && expression.attributes.identifier === responseIdentifier\n                            || (\n                                expression.expressions\n                                && expression.expressions[0]\n                                && expression.expressions[0].attributes\n                                && expression.expressions[0].attributes.identifier === responseIdentifier\n                            )\n                        );\n                        const [responseRule] = responseRuleItemIndex !== -1\n                            ? responseRules.splice(responseRuleItemIndex, 1)\n                            : [];\n\n                        const response = this.buildResponse(\n                            data.responses[i],\n                            responseRule\n                        );\n\n                        if (response) {\n                            this.item.addResponseDeclaration(response);\n\n                            const feedbackRules = data.responses[i].feedbackRules;\n\n                            if (feedbackRules) {\n                                _.forIn(feedbackRules, (fbData, serial) => {\n                                    const {\n                                        attributes: {\n                                            identifier: feedbackOutcomeIdentifier,\n                                        } = {}\n                                    } = data.outcomes[fbData.feedbackOutcome] || {};\n                                    response.feedbackRules[serial] = this.buildSimpleFeedbackRule(fbData, response);\n\n                                    // remove feedback response rule from response rules array\n                                    const feedbackResponseRuleIndex = responseRules.findIndex(({\n                                        responseIf: {\n                                            responseRules: [setOutcomeResponseRule = {}] = [],\n                                        } = {}\n                                    }) => {\n                                        const { attributes = {}, qtiClass } = setOutcomeResponseRule;\n                                        const outcomeIdentifier = attributes.identifier;\n\n                                        return feedbackOutcomeIdentifier === outcomeIdentifier\n                                            && qtiClass === 'setOutcomeValue';\n                                    });\n\n                                    if (feedbackResponseRuleIndex !== -1) {\n                                        responseRules.splice(feedbackResponseRuleIndex, 1);\n                                    }\n                                });\n                            }\n                        }\n                    }\n\n                    const responseIdentifiers = Object.keys(this.item.responses || {})\n                        .map((responseKey) => this.item.responses[responseKey].attributes.identifier);\n\n                    if (data.responseProcessing) {\n                        const customResponseProcessing =\n                            (\n                                responseRules.length > 0\n                                && !(\n                                    responseRules.length === 1\n                                    && _.isEqual(\n                                        responseRules[0],\n                                        itemScoreHelper(\n                                            responseIdentifiers\n                                        )\n                                    )\n                                )\n                            )\n                            || (\n                                this.item.responses\n                                && Object.keys(this.item.responses)\n                                    .some((responseKey) => !this.item.responses[responseKey].template)\n                            );\n\n                        this.item.setResponseProcessing(this.buildResponseProcessing(data.responseProcessing, customResponseProcessing));\n                    }\n                    this.item.setNamespaces(data.namespaces);\n                    this.item.setSchemaLocations(data.schemaLocations);\n                    this.item.setApipAccessibility(data.apipAccessibility);\n                }\n\n                if (typeof callback === 'function') {\n                    callback.call(this, this.item);\n                }\n            });\n        },\n        loadAndBuildElement(data, callback) {\n            this.loadRequiredClasses(data, () => {\n                const element = this.buildElement(data);\n\n                if (typeof callback === 'function') {\n                    callback.call(this, element);\n                }\n            });\n        },\n        loadElement(element, data, callback) {\n            this.loadRequiredClasses(data, () => {\n                this.loadElementData(element, data);\n\n                if (typeof callback === 'function') {\n                    callback.call(this, element);\n                }\n            });\n        },\n        /**\n         * Load ALL given elements into existing loaded item\n         *\n         * @todo to be renamed to loadItemElements\n         * @param {object} data\n         * @param {function} callback\n         * @returns {undefined}\n         */\n        loadElements(data, callback) {\n            if (!this.item) {\n                throw new Error('QtiLoader : cannot load elements in empty item');\n            }\n\n            this.loadRequiredClasses(data, () => {\n                const allElements = this.item.getComposingElements();\n\n                for (let i in data) {\n                    const elementData = data[i];\n\n                    if (elementData && elementData.qtiClass && elementData.serial) {\n                        //find and update element\n                        if (allElements[elementData.serial]) {\n                            this.loadElementData(allElements[elementData.serial], elementData);\n                        }\n                    }\n                }\n\n                if (typeof callback === 'function') {\n                    callback.call(this, this.item);\n                }\n            });\n        },\n        buildResponse(data, responseRule) {\n            const response = this.buildElement(data);\n\n            response.template = responseHelper.getTemplateUriFromName(\n                responseHelper.getTemplateNameFromResponseRules(data.identifier, responseRule)\n            )\n                || data.howMatch\n                || null;\n\n            response.defaultValue = data.defaultValue || null;\n            response.correctResponse = data.correctResponses || null;\n\n            if (_.size(data.mapping)) {\n                response.mapEntries = data.mapping;\n            } else if (_.size(data.areaMapping)) {\n                response.mapEntries = data.areaMapping;\n            } else {\n                response.mapEntries = {};\n            }\n\n            response.mappingAttributes = data.mappingAttributes || {};\n\n            return response;\n        },\n        buildSimpleFeedbackRule(data, response) {\n            const feedbackRule = this.buildElement(data);\n\n            feedbackRule.setCondition(response, data.condition, data.comparedValue || null);\n\n            //            feedbackRule.comparedOutcome = this.item.responses[data.comparedOutcome] || null;\n            feedbackRule.feedbackOutcome = this.item.outcomes[data.feedbackOutcome] || null;\n            feedbackRule.feedbackThen = this.item.modalFeedbacks[data.feedbackThen] || null;\n            feedbackRule.feedbackElse = this.item.modalFeedbacks[data.feedbackElse] || null;\n\n            //associate the compared outcome to the feedbacks if applicable\n            const comparedOutcome = feedbackRule.comparedOutcome;\n\n            if (feedbackRule.feedbackThen) {\n                feedbackRule.feedbackThen.data('relatedResponse', comparedOutcome);\n            }\n\n            if (feedbackRule.feedbackElse) {\n                feedbackRule.feedbackElse.data('relatedResponse', comparedOutcome);\n            }\n\n            return feedbackRule;\n        },\n        buildOutcome(data) {\n            const outcome = this.buildElement(data);\n            outcome.defaultValue = data.defaultValue || null;\n\n            return outcome;\n        },\n        buildResponseProcessing(data, customResponseProcessing) {\n            const rp = this.buildElement(data);\n\n            if (customResponseProcessing) {\n                rp.xml = data.data;\n                rp.processingType = 'custom';\n            } else {\n                rp.processingType = 'templateDriven';\n            }\n\n            return rp;\n        },\n        loadContainer(bodyObject, bodyData) {\n            if (!Element.isA(bodyObject, '_container')) {\n                throw new Error('bodyObject must be a QTI Container');\n            }\n\n            if (!(bodyData && typeof bodyData.body === 'string' && typeof bodyData.elements === 'object')) {\n                throw new Error('wrong bodydata format');\n            }\n            //merge attributes when loading element data\n            const attributes = _.defaults(bodyData.attributes || {}, bodyObject.attributes || {});\n            bodyObject.setAttributes(attributes);\n\n            for (let serial in bodyData.elements) {\n                const eltData = bodyData.elements[serial];\n                const element = this.buildElement(eltData);\n\n                //check if class is loaded:\n                if (element) {\n                    bodyObject.setElement(element, bodyData.body);\n                }\n            }\n\n            bodyObject.body(xmlNsHandler.stripNs(bodyData.body));\n        },\n        buildElement(elementData) {\n            if (!(elementData && elementData.qtiClass && elementData.serial)) {\n                throw new Error('wrong elementData format');\n            }\n\n            const className = elementData.qtiClass;\n\n            if (!this.qti[className]) {\n                throw new Error(`the qti element class does not exist: ${className}`);\n            }\n\n            const elt = new this.qti[className](elementData.serial);\n            this.loadElementData(elt, elementData);\n\n            return elt;\n        },\n        loadElementData(element, data) {\n            //merge attributes when loading element data\n            const attributes = _.defaults(data.attributes || {}, element.attributes || {});\n            element.setAttributes(attributes);\n\n            let body = data.body;\n            if (!body && data.text && data.qtiClass === 'inlineChoice') {\n                body = { body: data.text, elements: {} };\n            }\n            if (element.body && body) {\n                if (element.bdy) {\n                    this.loadContainer(element.getBody(), body);\n                }\n            }\n\n            if (element.object && data.object) {\n                if (element.object) {\n                    this.loadObjectData(element.object, data.object);\n                }\n            }\n\n            if (Element.isA(element, 'interaction')) {\n                this.loadInteractionData(element, data);\n            } else if (Element.isA(element, 'choice')) {\n                this.loadChoiceData(element, data);\n            } else if (Element.isA(element, 'math')) {\n                this.loadMathData(element, data);\n            } else if (Element.isA(element, 'infoControl')) {\n                this.loadPicData(element, data);\n            } else if (Element.isA(element, '_tooltip')) {\n                this.loadTooltipData(element, data);\n            }\n\n            return element;\n        },\n        loadInteractionData(interaction, data) {\n            if (Element.isA(interaction, 'blockInteraction')) {\n                if (data.prompt) {\n                    this.loadContainer(interaction.prompt.getBody(), data.prompt);\n                }\n            }\n\n            this.buildInteractionChoices(interaction, data);\n\n            if (Element.isA(interaction, 'customInteraction')) {\n                this.loadPciData(interaction, data);\n            }\n        },\n        buildInteractionChoices(interaction, data) {\n            // note: Qti.ContainerInteraction (Qti.GapMatchInteraction and Qti.HottextInteraction) has already been parsed by builtElement(interacionData);\n            if (data.choices) {\n                if (Element.isA(interaction, 'matchInteraction')) {\n                    for (let set = 0; set < 2; set++) {\n                        if (!data.choices[set]) {\n                            throw new Error(`missing match set #${set}`);\n                        }\n\n                        const matchSet = data.choices[set];\n\n                        for (let serial in matchSet) {\n                            const choice = this.buildElement(matchSet[serial]);\n\n                            if (choice) {\n                                interaction.addChoice(choice, set);\n                            }\n                        }\n                    }\n                } else {\n                    for (let serial in data.choices) {\n                        const choice = this.buildElement(data.choices[serial]);\n\n                        if (choice) {\n                            interaction.addChoice(choice);\n                        }\n                    }\n                }\n\n                if (Element.isA(interaction, 'graphicGapMatchInteraction')) {\n                    if (data.gapImgs) {\n                        for (let serial in data.gapImgs) {\n                            const gapImg = this.buildElement(data.gapImgs[serial]);\n\n                            if (gapImg) {\n                                interaction.addGapImg(gapImg);\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        loadChoiceData(choice, data) {\n            if (Element.isA(choice, 'textVariableChoice')) {\n                choice.val(data.text);\n            } else if (Element.isA(choice, 'gapImg')) ; else if (Element.isA(choice, 'gapText')) {\n                // this ensure compatibility of Qti 2.1 items\n                if (!choice.body()) {\n                    choice.body(data.text);\n                }\n            } else if (Element.isA(choice, 'containerChoice')) ;\n        },\n        loadObjectData(object, data) {\n            object.setAttributes(data.attributes);\n\n            //@todo: manage object like a container\n            if (data._alt) {\n                if (data._alt.qtiClass === 'object') {\n                    object._alt = Loader.buildElement(data._alt);\n                } else {\n                    object._alt = data._alt;\n                }\n            }\n        },\n        loadMathData(math, data) {\n            math.ns = data.ns || {};\n            math.setMathML(data.mathML || '');\n            _.forIn(data.annotations || {}, (value, encoding) => {\n                math.setAnnotation(encoding, value);\n            });\n        },\n        loadTooltipData(tooltip, data) {\n            tooltip.content(data.content);\n        },\n        loadPciData(pci, data) {\n            loadPortableCustomElementData(pci, data);\n        },\n        loadPicData(pic, data) {\n            loadPortableCustomElementData(pic, data);\n        }\n    });\n\n    return Loader;\n\n});\n\n","define('taoQtiItem/qtiItem/helper/pci',['lodash'], function (_) { 'use strict';\n\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n\n    var pci = {\n        getRawValues: function(pciVar) {\n            if (_.isPlainObject(pciVar)) {\n                if (pciVar.base !== undefined) {\n                    return _.values(pciVar.base);\n                } else if (pciVar.list) {\n                    return _.values(pciVar.list);\n                }\n            }\n            throw 'unsupported type ';\n        }\n    };\n\n    return pci;\n\n});\n\n","define('taoQtiItem/qtiItem/helper/container',['lodash', 'jquery'], function (_, $) { 'use strict';\n\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    $ = $ && Object.prototype.hasOwnProperty.call($, 'default') ? $['default'] : $;\n\n    /*\n     * This program is free software; you can redistribute it and/or\n     * modify it under the terms of the GNU General Public License\n     * as published by the Free Software Foundation; under version 2\n     * of the License (non-upgradable).\n     *\n     * This program is distributed in the hope that it will be useful,\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n     * GNU General Public License for more details.\n     *\n     * You should have received a copy of the GNU General Public License\n     * along with this program; if not, write to the Free Software\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n     *\n     * Copyright (c) 2016 (original work) Open Assessment Technologies SA\n     **/\n\n    /**\n     * Prefix used to the variable storage\n     * @type String\n     */\n    var _prefix = 'x-tao-';\n\n    /**\n     * Check if the element is of a qti container type\n     *\n     * @private\n     * @param {Object} element\n     * @returns {Boolean}\n     */\n    function _checkContainerType(element) {\n        if (_.isFunction(element.initContainer) && _.isFunction(element.body)) {\n            return true;\n        } else {\n            throw 'the element is not of a container type';\n        }\n    }\n\n    /**\n     * Get the body element of the container\n     *\n     * @private\n     * @param {Object} element\n     * @returns {JQuery}\n     */\n    function _getBodyDom(element) {\n        if (_checkContainerType(element)) {\n            return $('<div>')\n                .html(element.body())\n                .find('.x-tao-wrapper');\n        }\n    }\n\n    /**\n     * Add a class to the body element of the qti container\n     *\n     * @private\n     * @param {Object} element\n     * @param {String} newClass\n     * @param {String} [oldClass]\n     */\n    function _setBodyDomClass(element, newClass, oldClass) {\n        if (_checkContainerType(element) && (oldClass || newClass)) {\n            var $wrapper = $('<div>').html(element.body());\n            //set css class to element\n            _setDomClass($wrapper, newClass, oldClass);\n            //set to the model\n            element.body($wrapper.html());\n        }\n    }\n\n    /**\n     * Switch class to the wrapped DOM\n     *\n     * @param {JQuery} $wrapper\n     * @param {String} newClass\n     * @param {String} oldClass\n     * @returns {undefined}\n     */\n    function _setDomClass($wrapper, newClass, oldClass) {\n        var $bodyDom = $wrapper.find('.x-tao-wrapper');\n        if (!$bodyDom.length) {\n            //create one\n            $wrapper.wrapInner('<div class=\"x-tao-wrapper\">');\n            $bodyDom = $wrapper.find('.x-tao-wrapper');\n        }\n        if (oldClass) {\n            $bodyDom.removeClass(oldClass);\n        }\n        if (newClass) {\n            $bodyDom.addClass(newClass);\n        }\n    }\n\n    /**\n     * Add manually the encoded information to a dom element\n     *\n     * @param {JQuery} $wrapper - the wrapper of the element that will holds the information\n     * @param {String} dataName - the name of the information\n     * @param {String} newValue - the new value to be added\n     * @param {String} [oldValue] - the old value to be removed\n     * @returns {undefined}\n     */\n    function setEncodedDataToDom($wrapper, dataName, newValue, oldValue) {\n        _setDomClass($wrapper, _getEncodedDataString(dataName, newValue), _getEncodedDataString(dataName, oldValue));\n    }\n\n    /**\n     * Get the full variable name for the data store\n     *\n     * @param {String} dataName\n     * @param {String} value\n     * @returns {String}\n     */\n    function _getEncodedDataString(dataName, value) {\n        if (dataName && value) {\n            return _prefix + dataName + '-' + value;\n        }\n        return '';\n    }\n\n    /**\n     * Set a data string to the element identified by its dataName\n     *\n     * @param {Object} element\n     * @param {String} dataName\n     * @param {String} newValue\n     * @returns {undefined}\n     */\n    function setEncodedData(element, dataName, newValue) {\n        var oldValue = getEncodedData(element, dataName);\n        return _setBodyDomClass(\n            element,\n            _getEncodedDataString(dataName, newValue),\n            _getEncodedDataString(dataName, oldValue)\n        );\n    }\n\n    /**\n     * Remove the stored data from the element by its dataName\n     *\n     * @param {Object} element\n     * @param {String} dataName\n     * @returns {unresolved}\n     */\n    function removeEncodedData(element, dataName) {\n        var oldValue = getEncodedData(element, dataName);\n        if (dataName && oldValue) {\n            _setBodyDomClass(element, '', _getEncodedDataString(dataName, oldValue));\n        }\n    }\n\n    /**\n     * Check if the stored data exist\n     *\n     * @param {Object} element\n     * @param {String} dataName\n     * @param {String} value\n     * @returns {Boolean}\n     */\n    function hasEncodedData(element, dataName, value) {\n        var $body = _getBodyDom(element);\n        if ($body && $body.length && dataName && value) {\n            return $body.hasClass(_getEncodedDataString(dataName, value));\n        }\n        return false;\n    }\n\n    /**\n     * Get the encoded data identified by its dataName\n     *\n     * @param {Object} element\n     * @param {String} dataName\n     * @returns {String}\n     */\n    function getEncodedData(element, dataName) {\n        var regex, matches;\n        var $body = _getBodyDom(element);\n        if (dataName && $body && $body.length && $body.attr('class')) {\n            regex = new RegExp(_prefix + dataName + '-([a-zA-Z0-9-._]*)');\n            matches = $body.attr('class').match(regex);\n            if (matches) {\n                return matches[1];\n            }\n        }\n    }\n\n    /**\n     * Provide a set of helper functions to set,retirve and manage string data to a container type qti element.\n     */\n    var container = {\n        setEncodedData: setEncodedData,\n        hasEncodedData: hasEncodedData,\n        getEncodedData: getEncodedData,\n        removeEncodedData: removeEncodedData,\n        setEncodedDataToDom: setEncodedDataToDom\n    };\n\n    return container;\n\n});\n\n","define('taoQtiItem/qtiRunner/modalFeedback/inlineRenderer',['lodash', 'jquery', 'context', 'taoQtiItem/qtiItem/helper/pci', 'taoQtiItem/qtiItem/helper/container', 'handlebars', 'lib/handlebars/helpers', 'iframeNotifier'], function (_, $$1, context, pci, containerHelper, Handlebars, Helpers0, iframeNotifier) { 'use strict';\n\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    $$1 = $$1 && Object.prototype.hasOwnProperty.call($$1, 'default') ? $$1['default'] : $$1;\n    context = context && Object.prototype.hasOwnProperty.call(context, 'default') ? context['default'] : context;\n    pci = pci && Object.prototype.hasOwnProperty.call(pci, 'default') ? pci['default'] : pci;\n    containerHelper = containerHelper && Object.prototype.hasOwnProperty.call(containerHelper, 'default') ? containerHelper['default'] : containerHelper;\n    Handlebars = Handlebars && Object.prototype.hasOwnProperty.call(Handlebars, 'default') ? Handlebars['default'] : Handlebars;\n    Helpers0 = Helpers0 && Object.prototype.hasOwnProperty.call(Helpers0, 'default') ? Helpers0['default'] : Helpers0;\n    iframeNotifier = iframeNotifier && Object.prototype.hasOwnProperty.call(iframeNotifier, 'default') ? iframeNotifier['default'] : iframeNotifier;\n\n    if (!Helpers0.__initialized) {\n      Helpers0(Handlebars);\n      Helpers0.__initialized = true;\n    }\n    var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n      this.compilerInfo = [4,'>= 1.0.0'];\n    helpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n      var buffer = \"\", helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n      buffer += \"<li class=\\\"small btn-info action action-button rgt\\\" id=\\\"preview-feedback-ok-button\\\">\\n    <a class=\\\"li-inner\\\" href=\\\"#\\\">\\n        <span class=\\\"label\\\">\"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"OK\", options) : helperMissing.call(depth0, \"__\", \"OK\", options)))\n        + \"</span>\\n    </a>\\n</li>\";\n      return buffer;\n      });\n    function previewOkBtn(data, options, asString) {\n      var html = Template(data, options);\n      return (asString || true) ? html : $(html);\n    }\n\n    if (!Helpers0.__initialized) {\n      Helpers0(Handlebars);\n      Helpers0.__initialized = true;\n    }\n    var Template$1 = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n      this.compilerInfo = [4,'>= 1.0.0'];\n    helpers = this.merge(helpers, Handlebars.helpers);  \n\n\n      return \"<li data-control=\\\"feedback-ok\\\" class=\\\"small btn-info action forward\\\" title=\\\"Feedback ok and ready to proceed.\\\">\\n    <a class=\\\"li-inner\\\" href=\\\"#\\\">\\n        <span class=\\\"icon-result-ok\\\"></span>\\n        <span class=\\\"text\\\">OK</span>\\n    </a>\\n</li>\";\n      });\n    function deliveryOkBtn(data, options, asString) {\n      var html = Template$1(data, options);\n      return (asString || true) ? html : $(html);\n    }\n\n    /*\n     * This program is free software; you can redistribute it and/or\n     * modify it under the terms of the GNU General Public License\n     * as published by the Free Software Foundation; under version 2\n     * of the License (non-upgradable).\n     *\n     * This program is distributed in the hope that it will be useful,\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n     * GNU General Public License for more details.\n     *\n     * You should have received a copy of the GNU General Public License\n     * along with this program; if not, write to the Free Software\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n     *\n     * Copyright (c) 2015 (original work) Open Assessment Techonologies SA;\n     *\n     */\n\n    var timeout = (context.timeout > 0 ? context.timeout + 1 : 30) * 1000;\n\n    /**\n     * Main function for the module. It loads and render the feedbacks accodring to the given itemSession variables\n     *\n     * @param {Object} item - the standard tao qti item object\n     * @param {Object} loader - the item loader instance\n     * @param {Object} renderer - the item render instance\n     * @param {Object} itemSession - session information containing the list of feedbacks to display\n     * @param {Function} onCloseCallback - the callback to be executed when the feedbacks are closed\n     * @param {Function} [onShowCallback] - the callback to be executed when the feedbacks are shown\n     * @returns {Number} Number of feedbacks to be displayed\n     */\n    function showFeedbacks(item, loader, renderer, itemSession, onCloseCallback, onShowCallback) {\n        var interactionsDisplayInfo = getInteractionsDisplayInfo(item);\n        var messages = {};\n        var renderedFeebacks = [];\n        var renderingQueue = [];\n        var $itemContainer = item.getContainer();\n        var $itemBody = $itemContainer.children('.qti-itemBody');\n        var firstFeedback;\n\n        _.each(item.modalFeedbacks, function(feedback) {\n            var feedbackIds, message, $container, comparedOutcome, _currentMessageGroupId, interactionInfo;\n            var outcomeIdentifier = feedback.attr('outcomeIdentifier');\n            var order = -1;\n\n            //verify if the feedback should be displayed\n            if (itemSession[outcomeIdentifier]) {\n                //is the feedback in the list of feedbacks to be displayed ?\n                feedbackIds = pci.getRawValues(itemSession[outcomeIdentifier]);\n                if (_.indexOf(feedbackIds, feedback.id()) === -1) {\n                    return true; //continue with next feedback\n                }\n\n                //which group of feedbacks (interaction related) the feedback belongs to ?\n                message = getFeedbackMessageSignature(feedback);\n                comparedOutcome = containerHelper.getEncodedData(feedback, 'relatedOutcome');\n                interactionInfo = _.find(interactionsDisplayInfo, { responseIdentifier: comparedOutcome });\n                if (comparedOutcome && interactionInfo) {\n                    $container = interactionInfo.displayContainer;\n                    _currentMessageGroupId = interactionInfo.messageGroupId;\n                    order = interactionInfo.order;\n                } else {\n                    $container = $itemBody;\n                    _currentMessageGroupId = '__item__';\n                }\n                //is this message already displayed ?\n                if (!messages[_currentMessageGroupId]) {\n                    messages[_currentMessageGroupId] = [];\n                }\n                if (_.indexOf(messages[_currentMessageGroupId], message) >= 0) {\n                    return true; //continue\n                } else {\n                    messages[_currentMessageGroupId].push(message);\n                }\n\n                //ok, display feedback\n                renderingQueue.push({\n                    feedback: feedback,\n                    $container: $container,\n                    order: order\n                });\n            }\n        });\n\n        if (renderingQueue.length) {\n            renderingQueue = _.sortBy(renderingQueue, 'order');\n\n            //clear previously displayed feedbacks\n            clearModalFeedbacks($itemContainer);\n\n            //process rendering queue\n            _.each(renderingQueue, function(renderingToken) {\n                renderModalFeedback(\n                    renderingToken.feedback,\n                    loader,\n                    renderer,\n                    renderingToken.$container,\n                    $itemContainer,\n                    function(renderingData) {\n                        // keep the first feedback to force focus on it if needed\n                        if (!firstFeedback) {\n                            firstFeedback = $$1(renderingData.dom);\n                        }\n\n                        $$1('img', renderingData.dom).on('load', function() {\n                            iframeNotifier.parent('itemcontentchange');\n                        });\n\n                        //record rendered feedback for later reference\n                        renderedFeebacks.push(renderingData);\n                        if (renderedFeebacks.length === renderingQueue.length) {\n                            //rendering processing queue completed\n                            iframeNotifier.parent('itemcontentchange');\n\n                            // set the focus on the first feedback if needed\n                            // TODO: this is heavily related to the old TestRunner, with the ugly iframes.\n                            // To make this working, a search is made accross parent frames.\n                            // When the InlineFeedbacks will be ported to the new TestRunner, a strong improvement will be needed!\n                            if (firstFeedback) {\n                                autoscroll(firstFeedback);\n                            }\n\n                            //if an optional \"on show modal\" callback has been provided, execute it\n                            if (_.isFunction(onShowCallback)) {\n                                onShowCallback();\n                            }\n                        }\n                    }\n                );\n            });\n\n            //if any feedback is displayed, replace the controls by a \"ok\" button\n            replaceControl(renderedFeebacks, $itemContainer, onCloseCallback);\n        }\n\n        return renderingQueue.length;\n    }\n\n    /**\n     * Gets the QTI Container element\n     * @returns {jQuery|null}\n     */\n    function getQtiContainer() {\n        var me = window;\n        var $container = null;\n        var max = 10;\n\n        while (me && me.__knownParent__ && max--) {\n            me = me.parent;\n            if (me && me.$) {\n                $container = me.$('#qti-content');\n                if ($container.length) {\n                    return $container;\n                }\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Keeps an element visible inside the QTI container.\n     * If the element is outside the container viewport, scroll to display it.\n     * @param {String|jQuery|HTMLElement} element\n     */\n    function autoscroll(element) {\n        var $element = $$1(element);\n        var $container = getQtiContainer();\n        var currentScrollTop, minScrollTop, maxScrollTop, scrollTop;\n\n        if ($element.length && $container) {\n            currentScrollTop = $container.scrollTop();\n            maxScrollTop = $element.offset().top;\n            minScrollTop = maxScrollTop - $container.height() + $element.outerHeight();\n            scrollTop = Math.max(Math.min(maxScrollTop, currentScrollTop), minScrollTop);\n            if (scrollTop !== currentScrollTop) {\n                $container.animate({ scrollTop: scrollTop });\n            }\n        }\n    }\n\n    /**\n     * Extract the display information for an interaction-related feedback\n     *\n     * @private\n     * @param {Object} interaction - a qti interaction object\n     * @returns {Object} Object containing useful display information\n     */\n    function extractDisplayInfo(interaction) {\n        var $interactionContainer = interaction.getContainer();\n        var responseIdentifier = interaction.attr('responseIdentifier');\n        var messageGroupId, $displayContainer;\n\n        if (interaction.is('inlineInteraction')) {\n            $displayContainer = $interactionContainer.closest('[class*=\" col-\"], [class^=\"col-\"]');\n            messageGroupId = $displayContainer.attr('data-messageGroupId');\n            if (!messageGroupId) {\n                //generate a messageFroupId\n                messageGroupId = _.uniqueId('inline_message_group_');\n                $displayContainer.attr('data-messageGroupId', messageGroupId);\n            }\n        } else {\n            messageGroupId = responseIdentifier;\n            $displayContainer = $interactionContainer;\n        }\n\n        return {\n            responseIdentifier: responseIdentifier,\n            interactionContainer: $interactionContainer,\n            displayContainer: $displayContainer,\n            messageGroupId: messageGroupId,\n            order: -1\n        };\n    }\n\n    /**\n     * Get interaction display information sorted in the order of appearance within the item\n     *\n     * @param {Object} item\n     * @returns {Array}\n     */\n    function getInteractionsDisplayInfo(item) {\n        var interactionsDisplayInfo = [];\n        var $itemContainer = item.getContainer();\n        var interactionOrder = 0;\n\n        //extract all interction related information needed to display their\n        _.each(item.getComposingElements(), function(element) {\n            var responseIdentifier;\n            if (element.is('interaction')) {\n                responseIdentifier = element.attr('responseIdentifier');\n                interactionsDisplayInfo.push(extractDisplayInfo(element));\n            }\n        });\n\n        //sort interactionsDisplayInfo on the item level\n        $itemContainer.find('.qti-interaction').each(function() {\n            var interactionContainer = this;\n            _.each(interactionsDisplayInfo, function(_interactionInfo) {\n                if (_interactionInfo.interactionContainer[0] === interactionContainer) {\n                    _interactionInfo.order = interactionOrder;\n                    return false;\n                }\n            });\n            interactionOrder++;\n        });\n        interactionsDisplayInfo = _.sortBy(interactionsDisplayInfo, 'order');\n\n        return interactionsDisplayInfo;\n    }\n\n    /**\n     * Remove previously displayed feedbacks contained in the given container element\n     *\n     * @param {JQuery} $itemContainer\n     */\n    function clearModalFeedbacks($itemContainer) {\n        $itemContainer.find('.qti-modalFeedback').remove();\n    }\n\n    /**\n     * Render a modal feedback into a given container, scoped within an item container\n     *\n     * @private\n     * @param {type} feedback - feedback object\n     * @param {type} loader - loader instance\n     * @param {type} renderer - renderer instance\n     * @param {JQuery} $container - the targeted feedback container\n     * @param {JQuery} $itemContainer - the item container\n     * @param {type} renderedCallback - callback when the feedback has been rendered\n     * @returns {undefined}\n     */\n    function renderModalFeedback(feedback, loader, renderer, $container, $itemContainer, renderedCallback) {\n        //load (potential) new qti classes used in the modal feedback (e.g. math, img)\n        renderer.load(function() {\n            //render the modal feedback\n            var $modalFeedback = $$1(\n                feedback.render({\n                    inline: true\n                })\n            );\n            var done = function done() {\n                renderedCallback({\n                    identifier: feedback.id(),\n                    serial: feedback.getSerial(),\n                    dom: $modalFeedback\n                });\n            };\n            $container.append($modalFeedback);\n\n            // Race between postRendering and timeout\n            // postRendering waits for everything to be resolved or one reject\n            Promise.race([\n                Promise.all(\n                    _.map(feedback.getComposingElements(), function(elt) {\n                        //render also internal elements, such as math or img\n                        return elt.postRender({}, '', renderer).pop();\n                    })\n                ),\n                new Promise(function(resolve, reject) {\n                    _.delay(reject, timeout, new Error('Post rendering ran out of time.'));\n                })\n            ])\n                .then(done)\n                .catch(function(err) {\n                    //in case of postRendering issue, we are also done\n                    done();\n                    throw new Error('Error in post rendering : ' + err);\n                });\n        }, loader.getLoadedClasses());\n    }\n\n    /**\n     * Replace the controls in the running environment  with an \"OK\" button to trigger the end of the feedback state\n     *\n     * @private\n     * @todo FIX ME ! replace the hack to preview and delivery toolbar with a proper plugin in the new test runner is ready\n     * @param {Array} renderedFeebacks\n     * @param {JQuery} $itemContainer\n     * @param {Function} callback\n     */\n    function replaceControl(renderedFeebacks, $itemContainer, callback) {\n        var $scope, $controls, $toggleContainer;\n        if (window.parent && window.parent.parent && window.parent.parent.$) {\n            if ($itemContainer.parents('.tao-preview-scope').length) {\n                //preview mode\n                $scope = window.parent.parent.$('#preview-console');\n                $controls = $scope.find('.preview-console-header .action-bar li:visible');\n                $toggleContainer = $scope.find('.console-button-action-bar');\n                initControlToggle(renderedFeebacks, $itemContainer, $controls, $toggleContainer, previewOkBtn, callback);\n            } else {\n                //delivery delivery\n                $scope = window.parent.parent.$('body.qti-test-scope .bottom-action-bar');\n                $controls = $scope.find('li:visible');\n                $toggleContainer = $scope.find('.navi-box-list');\n                initControlToggle(renderedFeebacks, $itemContainer, $controls, $toggleContainer, deliveryOkBtn, callback);\n            }\n        } else {\n            //not in an iframe, add to item body for now\n            $scope = $itemContainer.find('#modalFeedbacks');\n            initControlToggle(renderedFeebacks, $itemContainer, $$1(), $scope, previewOkBtn, callback);\n        }\n    }\n\n    /**\n     * Initialize the \"OK\" button to trigger the end of the feedback mode\n     *\n     * @private\n     * @param {Array} renderedFeebacks\n     * @param {JQuery} $itemContainer\n     * @param {JQuery} $controls\n     * @param {JQuery} $toggleContainer\n     * @param {Function} toggleButtonTemplate\n     * @param {Function} callback\n     */\n    function initControlToggle(\n        renderedFeebacks,\n        $itemContainer,\n        $controls,\n        $toggleContainer,\n        toggleButtonTemplate,\n        callback\n    ) {\n        var $ok = $$1(toggleButtonTemplate()).click(function() {\n            //end feedback mode, hide feedbacks\n            _.each(renderedFeebacks, function(fb) {\n                fb.dom.hide();\n            });\n\n            //restore controls\n            uncover([$itemContainer]);\n            $ok.remove();\n            $controls.show();\n\n            //exec callback\n            callback();\n        });\n\n        $controls.hide();\n        $toggleContainer.append($ok);\n        cover([$itemContainer]);\n    }\n\n    /**\n     * Cover the given interaction containers with a transparent layer to prevent user interacting with the item\n     * @private\n     * @param {Array} interactionContainers\n     */\n    function cover(interactionContainers) {\n        var $cover = $$1('<div class=\"interaction-cover modal-bg\">');\n        _.each(interactionContainers, function($interaction) {\n            $interaction.append($cover);\n        });\n    }\n\n    /**\n     * Remove the layer set by the function cover()\n     * @private\n     * @param {Array} interactionContainers\n     */\n    function uncover(interactionContainers) {\n        _.each(interactionContainers, function($interaction) {\n            $interaction.find('.interaction-cover').remove();\n        });\n    }\n\n    /**\n     * Provide the feedbackMessage signature to check if the feedback contents should be considered equals\n     *\n     * @param {type} feedback\n     * @returns {String}\n     */\n    function getFeedbackMessageSignature(feedback) {\n        return ('' + feedback.body() + feedback.attr('title'))\n            .toLowerCase()\n            .trim()\n            .replace(/x-tao-[a-zA-Z0-9\\-._\\s]*/g, '');\n    }\n\n    var inlineRenderer = {\n        showFeedbacks: showFeedbacks\n    };\n\n    return inlineRenderer;\n\n});\n\n","define('taoQtiItem/qtiRunner/modalFeedback/modalRenderer',['lodash', 'jquery', 'async', 'taoQtiItem/qtiItem/helper/pci'], function (_, $, async, pci) { 'use strict';\n\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    $ = $ && Object.prototype.hasOwnProperty.call($, 'default') ? $['default'] : $;\n    async = async && Object.prototype.hasOwnProperty.call(async, 'default') ? async['default'] : async;\n    pci = pci && Object.prototype.hasOwnProperty.call(pci, 'default') ? pci['default'] : pci;\n\n    /*\n     * This program is free software; you can redistribute it and/or\n     * modify it under the terms of the GNU General Public License\n     * as published by the Free Software Foundation; under version 2\n     * of the License (non-upgradable).\n     *\n     * This program is distributed in the hope that it will be useful,\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n     * GNU General Public License for more details.\n     *\n     * You should have received a copy of the GNU General Public License\n     * along with this program; if not, write to the Free Software\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n     *\n     * Copyright (c) 2015 (original work) Open Assessment Techonologies SA;\n     *\n     */\n\n    /**\n     * Main function for the module. It loads and render the feedbacks accodring to the given itemSession variables\n     *\n     * @param {Object} item - the standard tao qti item object\n     * @param {Object} loader - the item loader instance\n     * @param {Object} renderer - the item render instance\n     * @param {Object} itemSession - session information containing the list of feedbacks to display\n     * @param {Function} onCloseCallback - the callback to be executed when the feedbacks are closed\n     * @param {Function} [onShowCallback] - the callback to be executed when the feedbacks are shown\n     * @returns {Number} Number of feedbacks to be displayed\n     */\n    function showFeedbacks(item, loader, renderer, itemSession, onCloseCallback, onShowCallback) {\n        var count,\n            messages = [],\n            feedbacksToBeDisplayed = [];\n\n        //find which modal feedbacks should be displayed according to the current item session:\n        _.each(item.modalFeedbacks, function(feedback) {\n            var feedbackIds, message;\n            var outcomeIdentifier = feedback.attr('outcomeIdentifier');\n\n            if (itemSession[outcomeIdentifier]) {\n                feedbackIds = pci.getRawValues(itemSession[outcomeIdentifier]);\n                message = getFeedbackMessageSignature(feedback);\n                if (_.indexOf(feedbackIds, feedback.id()) >= 0 && _.indexOf(messages, message) === -1) {\n                    //check content if is already in the display queue\n                    feedbacksToBeDisplayed.push(feedback);\n                    messages.push(message);\n                }\n            }\n        });\n\n        //record the number of feedbacks to be displayed:\n        count = feedbacksToBeDisplayed.length;\n        if (count) {\n            //show in reverse order\n            var callstack = [];\n\n            //iterate from the right because the modal popup will pile up.\n            _.eachRight(feedbacksToBeDisplayed, function(feedback) {\n                //the end callback should be executed to the last displayed modal, which is the last displayed one\n                var endCallback;\n                if (callstack.length === 0) {\n                    endCallback = function() {\n                        onCloseCallback();\n                    };\n                }\n\n                callstack.push(function(cb) {\n                    renderModalFeedback(\n                        feedback,\n                        loader,\n                        renderer,\n                        function() {\n                            cb(null);\n                        },\n                        endCallback\n                    );\n                });\n            });\n\n            async.series(callstack, function() {\n                //all modal are ready and displayed\n                if (_.isFunction(onShowCallback)) {\n                    onShowCallback();\n                }\n            });\n        }\n\n        return count;\n    }\n\n    /**\n     * Render modal feedback as a modal popup\n     *\n     * @param {Object} feedback - object\n     * @param {Object} loader - loader instance\n     * @param {Object} renderer - renderer instance\n     * @param {Function} [closeCallback] - feedback to be executed when the popop closes\n     * @returns {undefined}\n     */\n    function renderModalFeedback(feedback, loader, renderer, renderedCallback, closeCallback) {\n        var $feedback,\n            $feedbackBox = $('#modalFeedbacks'); //feedback.getItem().getContainer().find('#')\n\n        if (feedback.is('modalFeedback')) {\n            //load (potential) new qti classes used in the modal feedback (e.g. math, img)\n            renderer.load(function() {\n                $feedback = $feedbackBox.find('#' + feedback.getSerial());\n                if (!$feedback.length) {\n                    //render the modal feedback\n                    $feedback = feedback.render();\n                    $feedbackBox.append($feedback);\n                } else {\n                    $feedback.modal();\n                }\n\n                renderedCallback();\n\n                feedback.postRender({\n                    callback: closeCallback\n                });\n            }, loader.getLoadedClasses());\n        }\n    }\n\n    /**\n     * Provide the feedbackMessage signature to check if the feedback contents should be considered equals\n     *\n     * @param {type} feedback\n     * @returns {String}\n     */\n    function getFeedbackMessageSignature(feedback) {\n        return ('' + feedback.body() + feedback.attr('title'))\n            .toLowerCase()\n            .trim()\n            .replace(/x-tao-[a-zA-Z0-9\\-._\\s]*/g, '');\n    }\n\n    var modalRenderer = {\n        showFeedbacks: showFeedbacks\n    };\n\n    return modalRenderer;\n\n});\n\n","define('taoQtiItem/qtiRunner/core/QtiRunner',['jquery', 'lodash', 'context', 'module', 'iframeNotifier', 'taoQtiItem/qtiItem/core/Loader', 'taoQtiItem/qtiRunner/modalFeedback/inlineRenderer', 'taoQtiItem/qtiRunner/modalFeedback/modalRenderer'], function ($, _, context, module, iframeNotifier, ItemLoader, modalFeedbackInline, modalFeedbackModal) { 'use strict';\n\n    $ = $ && Object.prototype.hasOwnProperty.call($, 'default') ? $['default'] : $;\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    context = context && Object.prototype.hasOwnProperty.call(context, 'default') ? context['default'] : context;\n    module = module && Object.prototype.hasOwnProperty.call(module, 'default') ? module['default'] : module;\n    iframeNotifier = iframeNotifier && Object.prototype.hasOwnProperty.call(iframeNotifier, 'default') ? iframeNotifier['default'] : iframeNotifier;\n    ItemLoader = ItemLoader && Object.prototype.hasOwnProperty.call(ItemLoader, 'default') ? ItemLoader['default'] : ItemLoader;\n    modalFeedbackInline = modalFeedbackInline && Object.prototype.hasOwnProperty.call(modalFeedbackInline, 'default') ? modalFeedbackInline['default'] : modalFeedbackInline;\n    modalFeedbackModal = modalFeedbackModal && Object.prototype.hasOwnProperty.call(modalFeedbackModal, 'default') ? modalFeedbackModal['default'] : modalFeedbackModal;\n\n    /*\n     * This program is free software; you can redistribute it and/or\n     * modify it under the terms of the GNU General Public License\n     * as published by the Free Software Foundation; under version 2\n     * of the License (non-upgradable).\n     *\n     * This program is distributed in the hope that it will be useful,\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n     * GNU General Public License for more details.\n     *\n     * You should have received a copy of the GNU General Public License\n     * along with this program; if not, write to the Free Software\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n     *\n     * Copyright (c) 2013 (original work) Open Assessment Techonologies SA (under the project TAO-PRODUCT);\n     *\n     *\n     */\n\n    var timeout = (context.timeout > 0 ? context.timeout + 1 : 30) * 1000;\n\n    var QtiRunner = function() {\n        this.item = null;\n        this.rpEngine = null;\n        this.renderer = null;\n        this.loader = null;\n        this.itemApi = undefined;\n    };\n\n    QtiRunner.prototype.updateItemApi = function() {\n        var responses = this.getResponses();\n        var states = this.getStates();\n        var variables = [];\n        // Transform responses into state variables.\n        for (var key in states) {\n            var value = states[key];\n            // This is where we set variables that will be collected and stored\n            // as the Item State. We do not want to store large files into\n            // the state, and force the client to download these files\n            // all over again. We then transform them as a place holder, that will\n            // simply indicate that a file composes the state.\n\n            if (value.response && typeof value.response.base !== 'undefined') {\n                for (var property in value.response.base) {\n                    if (property === 'file') {\n                        var file = value.response.base.file;\n                        // QTI File found! Replace it with an appropriate placeholder.\n                        // The data is base64('qti_file_datatype_placeholder_data')\n                        value.response = {\n                            base: {\n                                file: {\n                                    name: file.name,\n                                    mime: 'qti+application/octet-stream',\n                                    data: 'cXRpX2ZpbGVfZGF0YXR5cGVfcGxhY2Vob2xkZXJfZGF0YQ=='\n                                }\n                            }\n                        };\n                    }\n                }\n            }\n\n            variables[key] = value;\n        }\n\n        //set all variables at once\n        this.itemApi.setVariables(variables);\n\n        // Save the responses that will be used for response processing.\n        this.itemApi.saveResponses(responses);\n        this.itemApi.resultApi.setQtiRunner(this);\n    };\n\n    QtiRunner.prototype.setItemApi = function(itemApi) {\n        this.itemApi = itemApi;\n        var that = this;\n        var oldStateVariables = JSON.stringify(itemApi.stateVariables);\n\n        itemApi.onKill(function(killCallback) {\n            // If the responses did not change,\n            // just close gracefully.\n\n            // Collect new responses and update item API.\n            that.updateItemApi();\n            var newStateVariables = JSON.stringify(itemApi.stateVariables);\n\n            // Store the results.\n            if (oldStateVariables !== newStateVariables || itemApi.serviceApi.getHasBeenPaused()) {\n                itemApi.submit(function() {\n                    // Send successful signal.\n                    itemApi.serviceApi.setHasBeenPaused(false);\n                    killCallback(0);\n                });\n            } else {\n                killCallback(0);\n            }\n        });\n    };\n\n    QtiRunner.prototype.setRenderer = function(renderer) {\n        if (renderer.isRenderer) {\n            this.renderer = renderer;\n        } else {\n            throw 'invalid renderer';\n        }\n    };\n\n    QtiRunner.prototype.getLoader = function() {\n        if (!this.loader) {\n            this.loader = new ItemLoader();\n        }\n        return this.loader;\n    };\n\n    QtiRunner.prototype.loadItemData = function(data, callback) {\n        var self = this;\n        this.getLoader().loadItemData(data, function(item) {\n            self.item = item;\n            callback(self.item);\n        });\n    };\n\n    QtiRunner.prototype.loadElements = function(elements, callback) {\n        if (this.getLoader().item) {\n            this.getLoader().loadElements(elements, callback);\n        } else {\n            throw 'QtiRunner : cannot load elements in empty item';\n        }\n    };\n\n    QtiRunner.prototype.renderItem = function(data, done) {\n        var self = this;\n\n        done = _.isFunction(done) ? done : _.noop;\n\n        var render = function() {\n            if (!self.item) {\n                throw 'cannot render item: empty item';\n            }\n            if (self.renderer) {\n                self.renderer.load(function() {\n                    self.item.setRenderer(self.renderer);\n                    self.item.render({}, $('#qti_item'));\n\n                    // Race between postRendering and timeout\n                    // postRendering waits for everything to be resolved or one reject\n                    Promise.race([\n                        Promise.all(self.item.postRender()),\n                        new Promise(function(resolve, reject) {\n                            _.delay(reject, timeout, new Error('Post rendering ran out of time.'));\n                        })\n                    ])\n                        .then(function() {\n                            self.item.getContainer().on('responseChange', function(e, data) {\n                                if (data.interaction && data.interaction.attr('responseIdentifier') && data.response) {\n                                    iframeNotifier.parent('responsechange', [\n                                        data.interaction.attr('responseIdentifier'),\n                                        data.response\n                                    ]);\n                                }\n                            });\n\n                            self.initInteractionsResponse();\n                            self.listenForThemeChange();\n                            done();\n                        })\n                        .catch(function(err) {\n                            //in case of postRendering issue, we are also done\n                            done();\n\n                            throw new Error('Error in post rendering : ' + err);\n                        });\n                }, self.getLoader().getLoadedClasses());\n            } else {\n                throw 'cannot render item: no rendered set';\n            }\n        };\n\n        if (typeof data === 'object') {\n            this.loadItemData(data, render);\n        } else {\n            render();\n        }\n    };\n\n    QtiRunner.prototype.initInteractionsResponse = function() {\n        var self = this;\n        if (self.item) {\n            var interactions = self.item.getInteractions();\n            for (var i in interactions) {\n                var interaction = interactions[i];\n                var responseId = interaction.attr('responseIdentifier');\n                self.itemApi.getVariable(responseId, function(values) {\n                    if (values) {\n                        interaction.setState(values);\n                        iframeNotifier.parent('stateready', [responseId, values]);\n                    } else {\n                        var states = self.getStates();\n                        if (_.indexOf(states, responseId)) {\n                            self.itemApi.setVariable(responseId, states[responseId]);\n                            interaction.setState(states[responseId]);\n                            iframeNotifier.parent('stateready', [responseId, states[responseId]]);\n                        }\n                    }\n                });\n            }\n        }\n    };\n\n    /**\n     * If an event 'themechange' bubbles to \"#qti_item\" node\n     * then we tell the renderer to switch the theme.\n     */\n    QtiRunner.prototype.listenForThemeChange = function listenForThemeChange() {\n        var self = this;\n        var $container = this.renderer.getContainer(this.item);\n        if (!$container.length) {\n            $container = $('.qti-item');\n        }\n        $container.off('themechange').on('themechange', function(e, themeName) {\n            var themeLoader = self.renderer.getThemeLoader();\n            themeName = themeName || e.originalEvent.detail;\n            if (themeLoader) {\n                themeLoader.change(themeName);\n            }\n        });\n    };\n\n    QtiRunner.prototype.validate = function() {\n        this.updateItemApi();\n        this.itemApi.finish();\n    };\n\n    QtiRunner.prototype.getResponses = function() {\n        var responses = {};\n        var interactions = this.item.getInteractions();\n\n        _.forEach(interactions, function(interaction) {\n            var response = {};\n            try {\n                response = interaction.getResponse();\n            } catch (e) {\n                console.error(e);\n            }\n            responses[interaction.attr('responseIdentifier')] = response;\n        });\n\n        return responses;\n    };\n\n    QtiRunner.prototype.getStates = function() {\n        var states = {};\n        var interactions = this.item.getInteractions();\n\n        _.forEach(interactions, function(interaction) {\n            var state = {};\n            try {\n                state = interaction.getState();\n            } catch (e) {\n                console.error(e);\n            }\n            states[interaction.attr('responseIdentifier')] = state;\n        });\n\n        return states;\n    };\n\n    QtiRunner.prototype.setResponseProcessing = function(callback) {\n        this.rpEngine = callback;\n    };\n\n    QtiRunner.prototype.showFeedbacks = function(itemSession, callback, onShowCallback) {\n        var inlineDisplay = !!module.config().inlineModalFeedback;\n\n        //currently only modal feedbacks are available\n        if (inlineDisplay) {\n            return modalFeedbackInline.showFeedbacks(\n                this.item,\n                this.getLoader(),\n                this.renderer,\n                itemSession,\n                callback,\n                onShowCallback\n            );\n        } else {\n            return modalFeedbackModal.showFeedbacks(\n                this.item,\n                this.getLoader(),\n                this.renderer,\n                itemSession,\n                callback,\n                onShowCallback\n            );\n        }\n    };\n\n    return QtiRunner;\n\n});\n\n","define('taoQtiItem/qtiItem/helper/interactionHelper',['lodash', 'taoQtiItem/qtiItem/core/Element'], function (_, Element) { 'use strict';\n\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    Element = Element && Object.prototype.hasOwnProperty.call(Element, 'default') ? Element['default'] : Element;\n\n    /**\n     * Common helper functions\n     */\n    var interactionHelper = {\n        convertChoices: function(choices, outputType) {\n            var ret = [],\n                _this = this;\n\n            _.each(choices, function(c) {\n                if (Element.isA(c, 'choice')) {\n                    switch (outputType) {\n                        case 'serial':\n                            ret.push(c.getSerial());\n                            break;\n                        case 'identifier':\n                            ret.push(c.id());\n                            break;\n                        default:\n                            ret.push(c);\n                    }\n                } else if (_.isArray(c)) {\n                    ret.push(_this.convertChoices(c, outputType));\n                }\n            });\n\n            return ret;\n        },\n        findChoices: function(interaction, choices, inputType) {\n            var ret = [],\n                _this = this;\n\n            _.each(choices, function(c) {\n                var choice;\n                if (_.isString(c)) {\n                    if (inputType === 'serial') {\n                        choice = interaction.getChoice(c);\n                        if (choice) {\n                            ret.push(choice);\n                        }\n                    } else if (inputType === 'identifier') {\n                        choice = interaction.getChoiceByIdentifier(c);\n                        if (choice) {\n                            ret.push(choice);\n                        }\n                    } else {\n                        ret.push(c);\n                    }\n                } else if (_.isArray(c)) {\n                    ret.push(_this.findChoices(interaction, c, inputType));\n                } else {\n                    ret.push(c);\n                }\n            });\n\n            return ret;\n        },\n        shuffleChoices: function(choices) {\n            var r = [], //returned array\n                f = {}, //fixed choices array\n                j = 0;\n\n            for (var i in choices) {\n                if (Element.isA(choices[i], 'choice')) {\n                    var choice = choices[i];\n                    if (choice.attr('fixed')) {\n                        f[j] = choice;\n                    }\n                    r.push(choice);\n                    j++;\n                } else {\n                    throw 'invalid element in array: is not a qti choice';\n                }\n            }\n\n            for (var n = 0; n < r.length - 1; n++) {\n                if (f[n]) {\n                    continue;\n                }\n                var k = -1;\n                do {\n                    k = n + Math.floor(Math.random() * (r.length - n));\n                } while (f[k]);\n                var tmp = r[k];\n                r[k] = r[n];\n                r[n] = tmp;\n            }\n\n            return r;\n        },\n        serialToIdentifier: function(interaction, choiceSerial) {\n            var choice = interaction.getChoice(choiceSerial);\n            if (choice) {\n                return choice.id();\n            } else {\n                return '';\n            }\n        }\n    };\n\n    return interactionHelper;\n\n});\n\n","define('taoQtiItem/qtiRunner/core/Renderer',['lodash', 'jquery', 'taoQtiItem/qtiItem/core/Element', 'taoQtiItem/qtiItem/helper/interactionHelper', 'ui/themeLoader', 'ui/themes', 'core/moduleLoader', 'handlebars'], function (_, $, Element, interactionHelper, themeLoader, themesHelper, moduleLoader, Handlebars) { 'use strict';\n\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    $ = $ && Object.prototype.hasOwnProperty.call($, 'default') ? $['default'] : $;\n    Element = Element && Object.prototype.hasOwnProperty.call(Element, 'default') ? Element['default'] : Element;\n    interactionHelper = interactionHelper && Object.prototype.hasOwnProperty.call(interactionHelper, 'default') ? interactionHelper['default'] : interactionHelper;\n    themeLoader = themeLoader && Object.prototype.hasOwnProperty.call(themeLoader, 'default') ? themeLoader['default'] : themeLoader;\n    themesHelper = themesHelper && Object.prototype.hasOwnProperty.call(themesHelper, 'default') ? themesHelper['default'] : themesHelper;\n    moduleLoader = moduleLoader && Object.prototype.hasOwnProperty.call(moduleLoader, 'default') ? moduleLoader['default'] : moduleLoader;\n    Handlebars = Handlebars && Object.prototype.hasOwnProperty.call(Handlebars, 'default') ? Handlebars['default'] : Handlebars;\n\n    /*\n     * This program is free software; you can redistribute it and/or\n     * modify it under the terms of the GNU General Public License\n     * as published by the Free Software Foundation; under version 2\n     * of the License (non-upgradable).\n     *\n     * This program is distributed in the hope that it will be useful,\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n     * GNU General Public License for more details.\n     *\n     * You should have received a copy of the GNU General Public License\n     * along with this program; if not, write to the Free Software\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n     *\n     * Copyright (c) 2014-2022 (original work) Open Assessment Technlogies SA (under the project TAO-PRODUCT);\n     *\n     */\n\n    //webpack trick : handlebar is usale only from cjs.\n    //but anyway we should deprecate the practice to invoke\n    //directly Handlebars at runtimej\n    let hb = Handlebars;\n    if(typeof hb.compile !== 'function'){\n        hb = require('handlebars');\n    }\n\n    const _renderableClasses = [\n        '_container',\n        'assessmentItem',\n        'stylesheet',\n        'responseDeclaration',\n        'outcomeDeclaration',\n        'responseProcessing',\n        '_simpleFeedbackRule',\n        '_tooltip',\n        'figure',\n        'img',\n        'figcaption',\n        'math',\n        'object',\n        'table',\n        'modalFeedback',\n        'rubricBlock',\n        'associateInteraction',\n        'choiceInteraction',\n        'extendedTextInteraction',\n        'gapMatchInteraction',\n        'graphicAssociateInteraction',\n        'graphicGapMatchInteraction',\n        'graphicOrderInteraction',\n        'hotspotInteraction',\n        'hottextInteraction',\n        'inlineChoiceInteraction',\n        'matchInteraction',\n        'mediaInteraction',\n        'orderInteraction',\n        'selectPointInteraction',\n        'sliderInteraction',\n        'textEntryInteraction',\n        'uploadInteraction',\n        'endAttemptInteraction',\n        'customInteraction',\n        'prompt',\n        'associableHotspot',\n        'gap',\n        'gapImg',\n        'gapText',\n        'hotspotChoice',\n        'hottext',\n        'inlineChoice',\n        'simpleAssociableChoice',\n        'simpleChoice',\n        'infoControl',\n        'include',\n        'printedVariable'\n    ];\n\n    /**\n     * The list of qti element dependencies. It is used internally to load dependent qti classes\n     */\n    const _dependencies = {\n        assessmentItem: ['stylesheet', '_container', 'prompt', 'modalFeedback'],\n        rubricBlock: ['_container'],\n        associateInteraction: ['simpleAssociableChoice'],\n        choiceInteraction: ['simpleChoice'],\n        gapMatchInteraction: ['gap', 'gapText'],\n        graphicAssociateInteraction: ['associableHotspot'],\n        graphicGapMatchInteraction: ['associableHotspot', 'gapImg'],\n        graphicOrderInteraction: ['hotspotChoice'],\n        hotspotInteraction: ['hotspotChoice'],\n        hottextInteraction: ['hottext'],\n        inlineChoiceInteraction: ['inlineChoice'],\n        matchInteraction: ['simpleAssociableChoice'],\n        orderInteraction: ['simpleChoice']\n    };\n\n    /**\n     * The list of supported qti subclasses.\n     */\n    const _renderableSubclasses = {\n        simpleAssociableChoice: ['associateInteraction', 'matchInteraction'],\n        simpleChoice: ['choiceInteraction', 'orderInteraction']\n    };\n\n    /**\n     * List of the default properties for the item\n     */\n    const _defaults = {\n        shuffleChoices: true\n    };\n\n    const _isValidRenderer = function(renderer) {\n        let valid = true;\n\n        if (typeof renderer !== 'object') {\n            return false;\n        }\n\n        let classCorrect = false;\n        if (renderer.qtiClass) {\n            if (_.indexOf(_renderableClasses, renderer.qtiClass) >= 0) {\n                classCorrect = true;\n            } else {\n                const pos = renderer.qtiClass.indexOf('.');\n                if (pos > 0) {\n                    const qtiClass = renderer.qtiClass.slice(0, pos);\n                    const subClass = renderer.qtiClass.slice(pos + 1);\n                    if (_renderableSubclasses[qtiClass] && _.indexOf(_renderableSubclasses[qtiClass], subClass) >= 0) {\n                        classCorrect = true;\n                    }\n                }\n            }\n        }\n        if (!classCorrect) {\n            valid = false;\n            throw new Error('invalid qti class name in renderer declaration : ' + renderer.qtiClass);\n        }\n\n        if (!renderer.template) {\n            valid = false;\n            throw new Error('missing template in renderer declaration : ' + renderer.qtiClass);\n        }\n\n        return valid;\n    };\n\n    /**\n     * Get the location of the document, useful to define a baseUrl for the required context\n     * @returns {String}\n     */\n    function getDocumentBaseUrl() {\n        return window.location.protocol + '//' + window.location.host + window.location.pathname.replace(/([^\\/]*)$/, '');\n    }\n\n    /**\n     * The built Renderer class\n     * @constructor\n     * @param {Object} [options] - the renderer options\n     * @param {AssetManager} [options.assetManager] - The renderer needs an AssetManager to resolve URLs (see {@link taoItems/assets/manager})\n     * @param {Boolean} [options.shuffleChoices = true] - Does the renderer take care of the shuffling\n     * @param {Object} [options.decorators] - to set up rendering decorator\n     * @param {preRenderDecorator} [options.decorators.before] - to set up a pre decorator\n     * @param {postRenderDecorator} [options.decorators.after] - to set up a post decorator\n     */\n    const Renderer = function(options) {\n        /**\n         * Store the registered renderer location\n         */\n        const _locations = {};\n\n        /**\n         * Store loaded renderers\n         */\n        const _renderers = {};\n\n        options = _.defaults(options || {}, _defaults);\n\n        this.isRenderer = true;\n\n        this.name = '';\n\n        //store shuffled choice here\n        this.shuffledChoices = [];\n\n        /**\n         * Get the actual renderer of the give qti class or subclass:\n         * e.g. simplceChoice, simpleChoice.choiceInteraction, simpleChoice.orderInteraction\n         */\n        const _getClassRenderer = function(qtiClass) {\n            let ret = null;\n            if (_renderers[qtiClass]) {\n                ret = _renderers[qtiClass];\n            } else {\n                const pos = qtiClass.indexOf('.');\n                if (pos > 0) {\n                    qtiClass = qtiClass.slice(0, pos);\n                    if (_renderers[qtiClass]) {\n                        ret = _renderers[qtiClass];\n                    }\n                }\n            }\n            return ret;\n        };\n\n        /**\n         * Registers a QTI renderer class\n         * @param {String} qtiClass\n         * @param {Array} list\n         * @returns {Boolean} `true` if the class has been successfully registered\n         */\n        function registerRendererClass(qtiClass, list) {\n            let success = false;\n            if (_locations[qtiClass] === false) {\n                //mark this class as not renderable\n                _renderers[qtiClass] = false;\n                success = true;\n            } else if (_locations[qtiClass]) {\n                list.push(_locations[qtiClass]);\n                success = true;\n            }\n            return success;\n        }\n\n        /**\n         * Set the renderer options\n         * @param {String} key - the name of the option\n         * @param {*} value - the option vallue\n         * @returns {Renderer} for chaining\n         */\n        this.setOption = function(key, value) {\n            if (typeof key === 'string') {\n                options[key] = value;\n            }\n            return this;\n        };\n\n        /**\n         * Set the renderer options\n         * @param {Object} opts - the options\n         * @returns {Renderer} for chaining\n         */\n        this.setOptions = function(opts) {\n            options = _.extend(options, opts);\n            return this;\n        };\n\n        /**\n         * Get the renderer option\n         * @param {String} key - the name of the option\n         * @returns {*|null} the option vallue\n         */\n        this.getOption = function(key) {\n            if (typeof key === 'string' && options[key]) {\n                return options[key];\n            }\n            return null;\n        };\n\n        this.getCustomMessage = function getCustomMessage(elementName, messageKey) {\n            const messages = this.getOption('messages');\n            if (messages && elementName && messages[elementName] && _.isString(messages[elementName][messageKey])) {\n                //currently not translatable but potentially could be if the need raises\n                return hb.compile(messages[elementName][messageKey]);\n            } else {\n                return null;\n            }\n        };\n\n        /**\n         * Get the bound assetManager\n         * @returns {AssetManager} the assetManager\n         */\n        this.getAssetManager = function getAssetManager() {\n            return options.assetManager;\n        };\n\n        /**\n         * Get the bound theme loader\n         * @returns {Object} the themeLoader\n         */\n        this.getThemeLoader = function getThemeLoader() {\n            return this.themeLoader;\n        };\n\n        /**\n         * Renders the template\n         * @param {Object} element - the QTI model element\n         * @param {Object} data - the data to give to the template\n         * @param {String} [qtiSubclass] - to get the render of the element subclass (when element's qtiClass is abstract)\n         * @returns {String} the template results\n         * @throws {Error} if the renderer is not set or has no template bound\n         */\n        this.renderTpl = function(element, data, qtiSubclass) {\n            let res;\n            let ret = '';\n            const qtiClass = qtiSubclass || element.qtiClass;\n            const renderer = _getClassRenderer(qtiClass);\n            const decorators = this.getOption('decorators');\n\n            if (!renderer || !_.isFunction(renderer.template)) {\n                throw new Error('no renderer template loaded under the class name : ' + qtiClass);\n            }\n\n            //pre rendering decoration\n            if (_.isObject(decorators) && _.isFunction(decorators.before)) {\n                /**\n                 * @callback preRenderDecoractor\n                 * @param {Object} element - the QTI model element\n                 * @param {String} [qtiSubclass] - to get the render of the element subclass (when element's qtiClass is abstract)\n                 * @returns {String} the decorator result\n                 */\n                res = decorators.before(element, qtiSubclass);\n                if (_.isString(res)) {\n                    ret += res;\n                }\n            }\n\n            //render the template\n            ret += renderer.template(data);\n\n            //post rendering decoration\n            if (_.isObject(decorators) && _.isFunction(decorators.after)) {\n                /**\n                 * @callback postRenderDecoractor\n                 * @param {Object} element - the QTI model element\n                 * @param {String} [qtiSubclass] - to get the render of the element subclass (when element's qtiClass is abstract)\n                 * @returns {String} the decorator result\n                 */\n                res = decorators.after(element, qtiSubclass);\n                if (_.isString(res)) {\n                    ret += res;\n                }\n            }\n            return ret;\n        };\n\n        this.getData = function(element, data, qtiSubclass) {\n            let ret = data;\n            const qtiClass = qtiSubclass || element.qtiClass;\n            const renderer = _getClassRenderer(qtiClass);\n\n            if (renderer) {\n                if (typeof renderer.getData === 'function') {\n                    ret = renderer.getData.call(this, element, data);\n                }\n            }\n\n            return ret;\n        };\n\n        this.renderDirect = function(tpl, data) {\n            return hb.compile(tpl)(data);\n        };\n\n        this.getContainer = function(qtiElement, $scope, qtiSubclass) {\n            let ret = null;\n            const qtiClass = qtiSubclass || qtiElement.qtiClass;\n            const renderer = _getClassRenderer(qtiClass);\n\n            if (renderer) {\n                ret = renderer.getContainer(qtiElement, $scope);\n            } else {\n                throw new Error('no renderer found for the class : ' + qtiElement.qtiClass);\n            }\n            return ret;\n        };\n\n        this.postRender = function(qtiElement, data, qtiSubclass) {\n            const qtiClass = qtiSubclass || qtiElement.qtiClass;\n            const renderer = _getClassRenderer(qtiClass);\n\n            if (renderer && typeof renderer.render === 'function') {\n                return renderer.render.call(this, qtiElement, data);\n            }\n        };\n\n        this.setResponse = function(qtiInteraction, response, qtiSubclass) {\n            let ret = false;\n            const qtiClass = qtiSubclass || qtiInteraction.qtiClass;\n            const renderer = _getClassRenderer(qtiClass);\n\n            if (renderer) {\n                if (typeof renderer.setResponse === 'function') {\n                    ret = renderer.setResponse.call(this, qtiInteraction, response);\n                    const $container = renderer.getContainer.call(this, qtiInteraction);\n                    if ($container instanceof $ && $container.length) {\n                        $container.trigger('responseSet', [qtiInteraction, response]);\n                    }\n                }\n            } else {\n                throw new Error('no renderer registered under the name : ' + qtiClass);\n            }\n            return ret;\n        };\n\n        this.getResponse = function(qtiInteraction, qtiSubclass) {\n            let ret = false;\n            const qtiClass = qtiSubclass || qtiInteraction.qtiClass;\n            const renderer = _getClassRenderer(qtiClass);\n\n            if (renderer) {\n                if (typeof renderer.getResponse === 'function') {\n                    ret = renderer.getResponse.call(this, qtiInteraction);\n                }\n            } else {\n                throw new Error('no renderer registered under the name : ' + qtiClass);\n            }\n            return ret;\n        };\n\n        this.resetResponse = function(qtiInteraction, qtiSubclass) {\n            let ret = false;\n            const qtiClass = qtiSubclass || qtiInteraction.qtiClass;\n            const renderer = _getClassRenderer(qtiClass);\n\n            if (renderer) {\n                if (typeof renderer.resetResponse === 'function') {\n                    ret = renderer.resetResponse.call(this, qtiInteraction);\n                }\n            } else {\n                throw new Error('no renderer registered under the name : ' + qtiClass);\n            }\n            return ret;\n        };\n\n        /**\n         * Retrieve the state of the interaction.\n         * If the renderer has no state management, it falls back to the response management.\n         *\n         * @param {Object} qtiInteraction - the interaction\n         * @param {String} [qtiSubClass] - (not sure of the type and how it is used - Sam ? )\n         * @returns {Object} the interaction's state\n         *\n         * @throws {Error} if no renderer is registered\n         */\n        this.getState = function(qtiInteraction, qtiSubclass) {\n            let ret = false;\n            const qtiClass = qtiSubclass || qtiInteraction.qtiClass;\n            const renderer = _getClassRenderer(qtiClass);\n\n            if (renderer) {\n                if (_.isFunction(renderer.getState)) {\n                    ret = renderer.getState.call(this, qtiInteraction);\n                } else {\n                    ret = renderer.getResponse.call(this, qtiInteraction);\n                }\n            } else {\n                throw new Error('no renderer registered under the name : ' + qtiClass);\n            }\n            return ret;\n        };\n\n        /**\n         * Retrieve the state of the interaction.\n         * If the renderer has no state management, it falls back to the response management.\n         *\n         * @param {Object} qtiInteraction - the interaction\n         * @param {Object} state - the interaction's state\n         * @param {String} [qtiSubClass] - (not sure of the type and how it is used - Sam ? )\n         *\n         * @throws {Error} if no renderer is found\n         */\n        this.setState = function(qtiInteraction, state, qtiSubclass) {\n            const qtiClass = qtiSubclass || qtiInteraction.qtiClass;\n            const renderer = _getClassRenderer(qtiClass);\n\n            if (renderer) {\n                if (_.isFunction(renderer.setState)) {\n                    renderer.setState.call(this, qtiInteraction, state);\n                } else {\n                    renderer.resetResponse.call(this, qtiInteraction);\n                    renderer.setResponse.call(this, qtiInteraction, state);\n                }\n            } else {\n                throw new Error('no renderer registered under the name : ' + qtiClass);\n            }\n        };\n\n        /**\n         * Calls the renderer destroy.\n         * Ask the renderer to run destroy if exists.\n         *\n         * @throws {Error} if no renderer is found\n         */\n        this.destroy = function(qtiInteraction, qtiSubclass) {\n            let ret = false;\n            const qtiClass = qtiSubclass || qtiInteraction.qtiClass;\n            const renderer = _getClassRenderer(qtiClass);\n\n            if (renderer) {\n                if (_.isFunction(renderer.destroy)) {\n                    ret = renderer.destroy.call(this, qtiInteraction);\n                }\n            } else {\n                throw new Error('no renderer registered under the name : ' + qtiClass);\n            }\n            return ret;\n        };\n\n        this.getLoadedRenderers = function() {\n            return _renderers;\n        };\n\n        this.register = function(renderersLocations) {\n            _.extend(_locations, renderersLocations);\n        };\n\n        this.load = function(callback, requiredClasses) {\n            const self = this;\n            let required = [];\n\n            const themeData = themesHelper.getCurrentThemeData();\n            if (themeData) {\n                options.themes = themeData;\n            }\n            if (options.themes) {\n                //resolve themes paths\n                options.themes.base = this.resolveUrl(options.themes.base);\n                _.forEach(options.themes.available, function(theme, index) {\n                    options.themes.available[index].path = self.resolveUrl(theme.path);\n                });\n                this.themeLoader = themeLoader(options.themes).load(options.preload);\n            }\n\n            if (requiredClasses) {\n                if (_.isArray(requiredClasses)) {\n                    //exclude abstract classes\n                    requiredClasses = _.intersection(requiredClasses, _renderableClasses);\n\n                    //add dependencies\n                    _.each(requiredClasses, function(reqClass) {\n                        const deps = _dependencies[reqClass];\n                        if (deps) {\n                            requiredClasses = _.union(requiredClasses, deps);\n                        }\n                    });\n\n                    _.forEach(requiredClasses, function(qtiClass) {\n                        let requiredSubClasses;\n                        if (_renderableSubclasses[qtiClass]) {\n                            requiredSubClasses = _.intersection(requiredClasses, _renderableSubclasses[qtiClass]);\n                            _.each(requiredSubClasses, function(subclass) {\n                                if (\n                                    !registerRendererClass(qtiClass + '.' + subclass, required) &&\n                                    !registerRendererClass(qtiClass, required)\n                                ) {\n                                    throw new Error(\n                                        self.name +\n                                            ' : missing qti class location declaration: ' +\n                                            qtiClass +\n                                            ', subclass: ' +\n                                            subclass\n                                    );\n                                }\n                            });\n                        } else {\n                            if (!registerRendererClass(qtiClass, required)) {\n                                throw new Error(self.name + ' : missing qti class location declaration: ' + qtiClass);\n                            }\n                        }\n                    });\n                } else {\n                    throw new Error('invalid argument type: expected array for arg \"requireClasses\"');\n                }\n            } else {\n                required = _.values(_locations);\n            }\n\n            moduleLoader([], ()=> true)\n                .addList( required.map( module => ({ module, category: 'qti'}) ) )\n                .load()\n                .then( loaded => {\n                    loaded.forEach( clazz => {\n                        if (_isValidRenderer(clazz)) {\n                            _renderers[clazz.qtiClass] = clazz;\n                        }\n\n                    });\n                    if (typeof callback === 'function') {\n                        callback.call(self, _renderers);\n                    }\n                });\n\n            return this;\n        };\n\n        /**\n         * Unload the renderer\n         */\n        this.unload = function unload() {\n            if (this.themeLoader) {\n                themeLoader(options.themes).unload();\n            }\n            return this;\n        };\n\n        /**\n         * Define the shuffling manually\n         *\n         * @param {Object} interaction - the interaction\n         * @param {Array} choices - the shuffled choices\n         * @param {String} identificationType -\n         */\n        this.setShuffledChoices = function(interaction, choices, identificationType) {\n            if (Element.isA(interaction, 'interaction')) {\n                this.shuffledChoices[interaction.getSerial()] = _.pluck(\n                    interactionHelper.findChoices(interaction, choices, identificationType),\n                    'serial'\n                );\n            }\n        };\n\n        /**\n         * Get the choices shuffled for this interaction.\n         *\n         * @param {Object} interaction - the interaction\n         * @param {Boolean} reshuffle - by default choices are shuffled only once and store, but if true you can force shuffling again\n         * @param {String} returnedType - the choice type\n         * @returns {Array} the choices\n         */\n        this.getShuffledChoices = function(interaction, reshuffle, returnedType) {\n            let choices = [];\n            let serial, i;\n\n            if (Element.isA(interaction, 'interaction')) {\n                serial = interaction.getSerial();\n\n                //1st time, we shuffle (or asked to force shuffling)\n                if (!this.shuffledChoices[serial] || reshuffle) {\n                    if (Element.isA(interaction, 'matchInteraction')) {\n                        this.shuffledChoices[serial] = [];\n                        for (i = 0; i < 2; i++) {\n                            choices[i] = interactionHelper.shuffleChoices(interaction.getChoices(i));\n                            this.shuffledChoices[serial][i] = _.pluck(choices[i], 'serial');\n                        }\n                    } else {\n                        choices = interactionHelper.shuffleChoices(interaction.getChoices());\n                        this.shuffledChoices[serial] = _.pluck(choices, 'serial');\n                    }\n\n                    //otherwise get the choices from the serials\n                } else {\n                    if (Element.isA(interaction, 'matchInteraction')) {\n                        _.forEach(choices, function(choice, index) {\n                            if (index < 2) {\n                                _.forEach(this.shuffledChoices[serial][i], function(choiceSerial) {\n                                    choice.push(interaction.getChoice(choiceSerial));\n                                });\n                            }\n                        });\n                    } else {\n                        _.forEach(this.shuffledChoices[serial], function(choiceSerial) {\n                            choices.push(interaction.getChoice(choiceSerial));\n                        });\n                    }\n                }\n\n                //do some type convertion\n                if (returnedType === 'serial' || returnedType === 'identifier') {\n                    return interactionHelper.convertChoices(choices, returnedType);\n                }\n\n                //pass value only, not ref\n                return _.clone(choices);\n            }\n\n            return [];\n        };\n\n        this.getRenderers = function() {\n            return _renderers;\n        };\n\n        this.getLocations = function() {\n            return _locations;\n        };\n\n        /**\n         * Resolve URLs using the defined assetManager's strategies\n         * @param {String} url - the URL to resolve\n         * @returns {String} the resolved URL\n         */\n        this.resolveUrl = function resolveUrl(url) {\n            if (!options.assetManager) {\n                return url;\n            }\n            if (typeof url === 'string' && url.length > 0) {\n                return options.assetManager.resolve(url);\n            }\n        };\n\n        /**\n         * @deprecated in favor of resolveUrl\n         */\n        this.getAbsoluteUrl = function(relUrl) {\n            //let until method is removed\n            console.warn('DEPRECATED used getAbsoluteUrl with ', arguments);\n\n            //allow relative url output only if explicitely said so\n            if (this.getOption('userRelativeUrl')) {\n                return relUrl.replace(/^\\.?\\//, '');\n            }\n\n            if (/^http(s)?:\\/\\//i.test(relUrl) || /^data:[^\\/]+\\/[^;]+(;charset=[\\w]+)?;base64,/.test(relUrl)) {\n                //already absolute or base64 encoded\n                return relUrl;\n            } else {\n                let absUrl = '';\n                const runtimeLocations = this.getOption('runtimeLocations');\n\n                if (runtimeLocations && _.size(runtimeLocations)) {\n                    _.forIn(runtimeLocations, function(runtimeLocation, typeIdentifier) {\n                        if (relUrl.indexOf(typeIdentifier) === 0) {\n                            absUrl = relUrl.replace(typeIdentifier, runtimeLocation);\n                            return false; //break\n                        }\n                    });\n                }\n\n                if (absUrl) {\n                    return absUrl;\n                } else {\n                    const baseUrl = this.getOption('baseUrl') || getDocumentBaseUrl();\n                    return baseUrl + relUrl;\n                }\n            }\n        };\n\n        this.setAreaBroker = function setAreaBroker(areaBroker) {\n            this._areaBroker = areaBroker;\n        };\n\n        this.getAreaBroker = function getAreaBroker() {\n            if (this._areaBroker) {\n                return this._areaBroker;\n            }\n        };\n\n        this.getItemCreator = function getItemCreator() {\n            return this.getOption('itemCreator');\n        };\n    };\n\n    /**\n     * Expose the renderer's factory\n     * @exports taoQtiItem/qtiRunner/core/Renderer\n     */\n    var Renderer$1 = {\n        /**\n         * Creates a new Renderer by extending the Renderer's prototype\n         * @param {Object} renderersLocations -\n         * @param {String} [name] - the new renderer name\n         * @param {Object} [defaultOptions] - the renderer options\n         */\n        build: function(renderersLocations, name, defaultOptions) {\n            const NewRenderer = function() {\n                const options = _.isPlainObject(arguments[0]) ? arguments[0] : {};\n\n                Renderer.apply(this);\n\n                this.register(renderersLocations);\n                this.name = name || '';\n                this.setOptions(_.defaults(options, defaultOptions || {}));\n            };\n            NewRenderer.prototype = Renderer.prototype;\n            return NewRenderer;\n        }\n    };\n\n    return Renderer$1;\n\n});\n\n","/*\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA;\n *\n */\ndefine('taoQtiItem/portableElementRegistry/factory/factory',['lodash', 'core/promise', 'core/eventifier'], function (_, Promise, eventifier){\n    'use strict';\n\n    var _requirejs = window.require;\n    var _defaultLoadingOptions = {\n        reload: false\n    };\n\n    var loadModuleConfig = function loadModuleConfig(manifest){\n        return new Promise(function(resolve, reject){\n            var requireConfigAliases = {};\n            var baseUrl;\n            var reqConfigs = [];\n            var modules = {};\n\n            if(!manifest || !manifest.runtime){\n                return reject('invalid manifest');\n            }\n\n            baseUrl = manifest.baseUrl;\n\n            if(_.isArray(manifest.runtime.config) && manifest.runtime.config.length){\n                _.forEach(manifest.runtime.config, function(pciConfig){\n                    if(_.isString(pciConfig)){\n                        reqConfigs.push('json!' + baseUrl + '/' + pciConfig);\n                    }else{\n                        if(pciConfig.data){\n                            modules = _.defaults(modules, pciConfig.data.paths || {});\n                        }else if(pciConfig.file){\n                            reqConfigs.push('json!' + baseUrl + '/' + pciConfig.file);\n                        }\n                    }\n                });\n            }\n\n            require(reqConfigs, function(){\n\n                var runtimeModules = {};\n\n                requireConfigAliases[manifest.typeIdentifier] = baseUrl;\n\n                if(manifest.model === 'IMSPCI'){\n\n                    modules = _.reduce(arguments, function(acc, conf){\n                        return _.defaults(acc, conf.paths || {});\n                    }, modules);\n\n                    _.forEach(manifest.runtime.modules || {}, function(paths, id){\n                        if(paths && (_.isString(paths) || (_.isArray(paths) && paths.length))){\n                            runtimeModules[id] = paths;\n                        }\n                    });\n\n                    modules = _.merge(modules, runtimeModules);\n\n                    _.forEach(modules, function(paths, id){\n                        paths = _.isArray(paths) ? paths : [paths];\n                        requireConfigAliases[id] = _.map(paths, function(path){\n                            return baseUrl+'/'+path.replace(/\\.js$/, '');\n                        });\n                    });\n                }\n\n                resolve(requireConfigAliases);\n\n            }, reject);\n\n\n        });\n    };\n\n    /**\n     * Evaluate if the given object is a proper portable element provider\n     * @param {Object} provider\n     * @returns {Boolean}\n     */\n    var isPortableElementProvider = function isPortableElementProvider(provider){\n        return (provider && _.isFunction(provider.load));\n    };\n\n    return function portableElementRegistry(methods){\n\n        var _loaded = false;\n        var __providers = {};\n\n        /**\n         * The portable element registry instance\n         * @typedef {portableElementRegistry}\n         */\n        return eventifier(_.defaults(methods || {}, {\n            _registry : {},\n\n            /**\n             * Get a register portable element\n             * @param {String} typeIdentifier\n             * @param {String} version\n             * @returns {Object}\n             */\n            get : function get(typeIdentifier, version){\n\n                if(this._registry[typeIdentifier]){\n                    //check version\n                    if(version){\n                        return _.find(this._registry[typeIdentifier], {version : version});\n                    }else{\n                        //latest\n                        return _.last(this._registry[typeIdentifier]);\n                    }\n                }\n            },\n\n            /**\n             * Register a portable element provider\n             * @param moduleName\n             * @param {String|Object }provider - the portable provider object or module name\n             * @returns {portableElementRegistry}\n             */\n            registerProvider : function registerProvider(moduleName, provider){\n                __providers[moduleName] = isPortableElementProvider(provider) ? provider : null;\n                _loaded = false;\n                return this;\n            },\n\n            /**\n             * Clear all previously registered providers\n             * @returns {portableElementRegistry}\n             */\n            resetProviders : function resetProviders(){\n                __providers = {};\n                _loaded = false;\n                return this;\n            },\n\n            /**\n             * Load the providers\n             * @param {Object} [options]\n             * @param {Boolean} [options.reload] - force to reload the registered providers\n             * @returns {Promise}\n             */\n            loadProviders : function loadProviders(options){\n                var self = this;\n                var loadPromise;\n\n                if(_loaded && !options.reload){\n                    loadPromise = Promise.resolve([]);\n                } else {\n                    loadPromise = new Promise(function(resolve, reject) {\n                        var providerLoadingStack = [];\n                        _.forIn(__providers, function(provider, id){\n                            if(provider === null){\n                                providerLoadingStack.push(id);\n                            }\n                        });\n                        _requirejs(providerLoadingStack, function(){\n                            _.each([].slice.call(arguments), function(provider){\n                                if(isPortableElementProvider(provider)){\n                                    __providers[providerLoadingStack.shift()] = provider;\n                                }\n                            });\n                            resolve(__providers);\n                            _loaded = true;\n                            self.trigger('providersloaded', __providers);\n                        }, reject);\n                    });\n                }\n\n                return loadPromise;\n            },\n\n            /**\n             * Get all versions of all portable elements registered\n             * @returns {Object} - all portable elements and their versions\n             */\n            getAllVersions : function getAllVersions(){\n                var all = {};\n                _.forIn(this._registry, function (versions, id){\n                    all[id] = _.map(versions, 'version');\n                });\n                return all;\n            },\n\n            /**\n             * Get the runtime for a given portable element\n             * @param {String} typeIdentifier\n             * @param {String} [version] - if the version is provided, the method will try to find that version\n             * @returns {Object} the runtime model\n             */\n            getRuntime : function getRuntime(typeIdentifier, version){\n                var portableElement = this.get(typeIdentifier, version);\n                if(portableElement){\n                    return _.assign(portableElement.runtime, {\n                        id : portableElement.typeIdentifier,\n                        label : portableElement.label,\n                        baseUrl : portableElement.baseUrl,\n                        model : portableElement.model\n                    });\n                }else{\n                    this.trigger('error', {\n                        message : 'no portable element runtime found',\n                        typeIdentifier : typeIdentifier,\n                        version : version\n                    });\n                }\n            },\n\n            /**\n             * Get the creator model for a given portable element\n             * @param {String} typeIdentifier\n             * @param {String} [version] - if the version is provided, the method will try to find that version\n             * @returns {Object} the creator model\n             */\n            getCreator : function getCreator(typeIdentifier, version){\n                var portableElement = this.get(typeIdentifier, version);\n                if(portableElement && portableElement.creator){\n                    return _.assign(portableElement.creator, {\n                        id : portableElement.typeIdentifier,\n                        label : portableElement.label,\n                        baseUrl : portableElement.baseUrl,\n                        response : portableElement.response,\n                        model : portableElement.model,\n                        xmlns : portableElement.xmlns\n                    });\n                }else{\n                    this.trigger('error', {\n                        message : 'no portable element runtime found',\n                        typeIdentifier : typeIdentifier,\n                        version : version\n                    });\n                }\n            },\n\n            /**\n             * Returned all enabled created from the registry\n             * @returns {Object} the collection of creators\n             */\n            getLatestCreators : function getLatestCreators(){\n                var all = {};\n                _.forIn(this._registry, function (versions, id){\n                    var lastVersion = _.last(versions);\n\n                    //check if the portable element is creatable:\n                    if(lastVersion.creator && lastVersion.creator.hook && lastVersion.enabled){\n                        all[id] = lastVersion;\n                    }\n                });\n                return all;\n            },\n\n            /**\n             * Get the baseUrl for a given portable element\n             * @param {String} typeIdentifier\n             * @param {String} [version] - if the version is provided, the method will try to find that version\n             * @returns {String} the base url\n             */\n            getBaseUrl : function getBaseUrl(typeIdentifier, version){\n                var runtime = this.get(typeIdentifier, version);\n                if(runtime){\n                    return runtime.baseUrl;\n                }\n                return '';\n            },\n\n            /**\n             * Load the runtimes from registered portable element provider(s)\n             *\n             * @param {Object} [options]\n             * @param {Array} [options.include] - the exact list of portable element typeIdentifier that should be loaded\n             * @param {Boolean} [options.reload] - tells if all interactions should be reloaded\n             * @returns {Promise}\n             */\n            loadRuntimes : function loadRuntimes(options){\n                var self = this;\n                var loadPromise;\n\n                options = _.defaults(options||{}, _defaultLoadingOptions);\n\n                    loadPromise = self.loadProviders(options).then(function(providers){\n\n                        var loadStack = [];\n\n                        _.forEach(providers, function (provider){\n                            if(provider){//check that the provider is loaded\n                                loadStack.push(provider.load());\n                            }\n                        });\n\n                        //performs the loadings in parallel\n                            return Promise.all(loadStack).then(function (results){//TODO could remove one level of promise\n\n                                var configLoadingStack = [];\n\n                                //update registry\n                                self._registry = _.reduce(results, function (acc, _pcis){\n                                    return _.merge(acc, _pcis);\n                                }, self._registry || {});//incremental loading\n\n                                //pre-configuring the baseUrl of the portable element's source\n                                _.forIn(self._registry, function (versions, typeIdentifier){\n                                    if(_.isArray(options.include) && _.indexOf(options.include, typeIdentifier) < 0){\n                                        return true;\n                                    }\n                                    configLoadingStack.push(loadModuleConfig(self.get(typeIdentifier)));\n                                });\n\n                                return Promise.all(configLoadingStack).then(function(moduleConfigs){\n                                    var requireConfigAliases = _.reduce(moduleConfigs, function(acc, paths){\n                                        return _.merge(acc, paths);\n                                    }, {});\n\n                                    //save the required libs name => path to global require alias\n                                    //TODO in future planned user story : change this to a local require context to solve conflicts in third party module naming\n                                    _requirejs.config({paths : requireConfigAliases});\n                                });\n                            });\n\n                    });\n\n\n                loadPromise\n                    .then(function() {\n                        self.trigger('runtimesloaded');\n                    })\n                    .catch(function(err) {\n                        self.trigger('error', err);\n                    });\n\n                return loadPromise;\n            },\n\n            /**\n             * Load the creators from registered portable element provider(s)\n             *\n             * @param {Object} [options]\n             * @param {Array} [options.include] - the exact list of portable element typeIdentifier that should be loaded\n             * @param {Boolean} [options.reload] - tells if all interactions should be reloaded\n             * @returns {Promise}\n             */\n            loadCreators : function loadCreators(options){\n                var loadPromise;\n                var self = this;\n\n                options = _.defaults(options||{}, _defaultLoadingOptions);\n\n                loadPromise = self.loadRuntimes(options).then(function(){\n                    var requiredCreatorHooks = [];\n\n                    _.forIn(self._registry, function (versions, typeIdentifier){\n                        var portableElementModel = self.get(typeIdentifier);//currently use the latest version only\n                        if(portableElementModel.creator && portableElementModel.creator.hook){\n                            if(portableElementModel.enabled){\n                                if(_.isArray(options.include) && _.indexOf(options.include, typeIdentifier) < 0){\n                                    return true;\n                                }\n                            }else{\n                                if(!_.isArray(options.include) || _.indexOf(options.include, typeIdentifier) < 0){\n                                    return true;\n                                }\n                            }\n                            requiredCreatorHooks.push(portableElementModel.creator.hook.replace(/\\.js$/, ''));\n                        }\n                    });\n\n                    if(requiredCreatorHooks.length){\n                        return new Promise(function(resolve, reject){\n                            //@todo support caching?\n                            _requirejs(requiredCreatorHooks, function (){\n                                var creators = {};\n                                _.each(arguments, function (creatorHook){\n                                    var id = creatorHook.getTypeIdentifier();\n                                    var portableElementModel = self.get(id);\n                                    var i = _.findIndex(self._registry[id], {version : portableElementModel.version});\n                                    if(i < 0){\n                                        self.trigger('error', 'no creator found for id/version ' + id + '/' + portableElementModel.version);\n                                    }else{\n                                        self._registry[id][i].creator.module = creatorHook;\n                                        creators[id] = creatorHook;\n                                    }\n                                });\n                                resolve(creators);\n                            }, reject);\n                        });\n                    }else{\n                        return Promise.resolve({});\n                    }\n\n                });\n\n                loadPromise\n                    .then(function(creators) {\n                        self.trigger('creatorsloaded', creators);\n                        return creators;\n                    })\n                    .catch(function(err) {\n                        self.trigger('error', err);\n                    });\n\n                return loadPromise;\n            },\n\n            /**\n             * enable a portable element\n             * @param {String} typeIdentifier\n             * @param {String} [version] - if the version is provided, the method will try to find that version\n             * @returns {portableElementRegistry}\n             */\n            enable: function enable(typeIdentifier, version){\n                var portableElement = this.get(typeIdentifier, version);\n                if(portableElement){\n                    portableElement.enabled = true;\n                }\n                return this;\n            },\n\n            /**\n             * disable a portable element\n             * @param {String} typeIdentifier\n             * @param {String} [version] - if the version is provided, the method will try to find that version\n             * @returns {portableElementRegistry}\n             */\n            disable: function disable(typeIdentifier, version){\n                var portableElement = this.get(typeIdentifier, version);\n                if(portableElement){\n                    portableElement.enabled = false;\n                }\n                return this;\n            },\n\n            /**\n             * check is a portable element is enabled\n             * @param {String} typeIdentifier\n             * @param {String} [version] - if the version is provided, the method will try to find that version\n             * @returns {portableElementRegistry}\n             */\n            isEnabled: function isEnabled(typeIdentifier, version){\n                var portableElement = this.get(typeIdentifier, version);\n                return (portableElement && portableElement.enabled === true);\n            }\n        }));\n    };\n});\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2015-2022 (original work) Open Assessment Technologies SA ;\n */\n/**\n * Utility to retrieve and manipualte QTI Elements\n */\ndefine('taoQtiItem/qtiCreator/helper/qtiElements',['jquery', 'lodash', 'i18n', 'services/features'], function ($, _, __, featuresService) {\n    'use strict';\n\n    const QtiElements = {\n        classes: {\n            //abstract classes:\n            itemBody: { parents: ['bodyElement'], contains: ['block'], abstract: true },\n            atomicBlock: {\n                parents: ['blockStatic', 'bodyElement', 'flowStatic'],\n                contains: ['inline'],\n                abstract: true\n            },\n            atomicInline: {\n                parents: ['bodyElement', 'flowStatic', 'inlineStatic'],\n                contains: ['inline'],\n                abstract: true\n            },\n            simpleBlock: { parents: ['blockStatic', 'bodyElement', 'flowStatic'], contains: ['block'], abstract: true },\n            simpleInline: {\n                parents: ['bodyElement', 'flowStatic', 'inlineStatic'],\n                contains: ['inline'],\n                abstract: true\n            },\n            flowStatic: { parents: ['flow'], abstract: true },\n            blockStatic: { parents: ['block'], abstract: true },\n            inlineStatic: { parents: ['inline'], abstract: true },\n            flow: { parents: ['objectFlow'], abstract: true },\n            tableCell: { parents: ['bodyElement'], contains: ['flow'], abstract: true },\n            //html-derived qti elements:\n            caption: { parents: ['bodyElement'], contains: ['inline'], xhtml: true },\n            col: { parents: ['bodyElement'], xhtml: true },\n            colgroup: { parents: ['bodyElement'], contains: ['col'], xhtml: true },\n            div: { parents: ['blockStatic', 'bodyElement', 'flowStatic'], contains: ['flow'], xhtml: true },\n            dl: { parents: ['blockStatic', 'bodyElement', 'flowStatic'], contains: ['dlElement'], xhtml: true },\n            dt: { parents: ['dlElement'], contains: ['inline'], xhtml: true },\n            dd: { parents: ['dlElement'], contains: ['flow'], xhtml: true },\n            hr: { parents: ['blockStatic', 'bodyElement', 'flowStatic'], xhtml: true },\n            math: { parents: ['blockStatic', 'flowStatic', 'inlineStatic'], xhtml: true },\n            li: { parents: ['bodyElement'], contains: ['flow'], xhtml: true },\n            ol: { parents: ['blockStatic', 'bodyElement', 'flowStatic'], contains: ['li'], xhtml: true },\n            ul: { parents: ['blockStatic', 'bodyElement', 'flowStatic'], contains: ['li'], xhtml: true },\n            object: { parents: ['bodyElement', 'flowStatic', 'inlineStatic'], contains: ['objectFlow'], xhtml: true },\n            param: { parents: ['objectFlow'], xhtml: true },\n            table: {\n                parents: ['blockStatic', 'bodyElement', 'flowStatic'],\n                contains: ['caption', 'col', 'colgroup', 'thead', 'tfoot', 'tbody'],\n                xhtml: true\n            },\n            tbody: { parents: ['bodyElement'], contains: ['tr'], xhtml: true },\n            tfoot: { parents: ['bodyElement'], contains: ['tr'], xhtml: true },\n            thead: { parents: ['bodyElement'], contains: ['tr'], xhtml: true },\n            td: { parents: ['tableCell'], xhtml: true },\n            th: { parents: ['tableCell'], xhtml: true },\n            tr: { parents: ['bodyElement'], contains: ['tableCell'], xhtml: true },\n            a: { parents: ['simpleInline'], xhtml: true },\n            abbr: { parents: ['simpleInline'], xhtml: true },\n            acronym: { parents: ['simpleInline'], xhtml: true },\n            b: { parents: ['simpleInline'], xhtml: true },\n            big: { parents: ['simpleInline'], xhtml: true },\n            cite: { parents: ['simpleInline'], xhtml: true },\n            code: { parents: ['simpleInline'], xhtml: true },\n            dfn: { parents: ['simpleInline'], xhtml: true },\n            em: { parents: ['simpleInline'], xhtml: true },\n            i: { parents: ['simpleInline'], xhtml: true },\n            kbd: { parents: ['simpleInline'], xhtml: true },\n            q: { parents: ['simpleInline'], xhtml: true },\n            samp: { parents: ['simpleInline'], xhtml: true },\n            small: { parents: ['simpleInline'], xhtml: true },\n            span: { parents: ['simpleInline'], xhtml: true },\n            strong: { parents: ['simpleInline'], xhtml: true },\n            sub: { parents: ['simpleInline'], xhtml: true },\n            sup: { parents: ['simpleInline'], xhtml: true },\n            tt: { parents: ['simpleInline'], xhtml: true },\n            var: { parents: ['simpleInline'], xhtml: true },\n            blockquote: { parents: ['simpleBlock'], xhtml: true },\n            address: { parents: ['atomicBlock'], xhtml: true },\n            h1: { parents: ['atomicBlock'], xhtml: true },\n            h2: { parents: ['atomicBlock'], xhtml: true },\n            h3: { parents: ['atomicBlock'], xhtml: true },\n            h4: { parents: ['atomicBlock'], xhtml: true },\n            h5: { parents: ['atomicBlock'], xhtml: true },\n            h6: { parents: ['atomicBlock'], xhtml: true },\n            p: { parents: ['atomicBlock'], xhtml: true },\n            pre: { parents: ['atomicBlock'], xhtml: true },\n            img: { parents: ['atomicInline'], xhtml: true, attributes: ['src', 'alt', 'longdesc', 'height', 'width'] },\n            br: { parents: ['atomicInline'], xhtml: true },\n            //qti elements:\n            infoControl: { parents: ['blockStatic', 'bodyElement', 'flowStatic'], qti: true },\n            textRun: { parents: ['inlineStatic', 'flowstatic'], qti: true },\n            feedbackInline: { parents: ['simpleInline', 'feedbackElement'], qti: true },\n            feedbackBlock: { parents: ['simpleBlock'], qti: true },\n            rubricBlock: { parents: ['simpleBlock'], qti: true }, //strange qti 2.1 exception, marked as simpleBlock instead of\n            blockInteraction: { parents: ['block', 'flow', 'interaction'], qti: true },\n            inlineInteraction: { parents: ['inline', 'flow', 'interaction'], qti: true },\n            gap: { parents: ['inlineStatic'], qti: true },\n            hottext: { parents: ['flowstatic', 'inlineStatic'], contains: ['inlineStatic'], qti: true },\n            printedVariable: { parents: ['bodyElement', 'flowStatic', 'inlineStatic', 'textOrVariable'], qti: true },\n            prompt: { parents: ['bodyElement'], contains: ['inlineStatic'], qti: true },\n            templateElement: { parents: ['bodyElement'], qti: true },\n            templateBlock: {\n                parents: ['blockStatic', 'flowStatic', 'templateElement'],\n                contains: ['blockStatic'],\n                qti: true\n            },\n            templateInline: {\n                parents: ['inlineStatic', 'flowStatic', 'templateElement'],\n                contains: ['inlineStatic'],\n                qti: true\n            },\n            choiceInteraction: { parents: ['blockInteraction'], qti: true },\n            associateInteraction: { parents: ['blockInteraction'], qti: true },\n            orderInteraction: { parents: ['blockInteraction'], qti: true },\n            matchInteraction: { parents: ['blockInteraction'], qti: true },\n            hottextInteraction: { parents: ['blockInteraction'], qti: true },\n            gapMatchInteraction: { parents: ['blockInteraction'], qti: true },\n            mediaInteraction: { parents: ['blockInteraction'], qti: true },\n            sliderInteraction: { parents: ['blockInteraction'], qti: true },\n            uploadInteraction: { parents: ['blockInteraction'], qti: true },\n            drawingInteraction: { parents: ['blockInteraction'], qti: true },\n            graphicInteraction: { parents: ['blockInteraction'], qti: true },\n            hotspotInteraction: { parents: ['graphicInteraction'], qti: true },\n            graphicAssociateInteraction: { parents: ['graphicInteraction'], qti: true },\n            graphicOrderInteraction: { parents: ['graphicInteraction'], qti: true },\n            graphicGapMatchInteraction: { parents: ['graphicInteraction'], qti: true },\n            selectPointInteraction: { parents: ['graphicInteraction'], qti: true },\n            textEntryInteraction: { parents: ['stringInteraction', 'inlineInteraction'], qti: true },\n            extendedTextInteraction: { parents: ['stringInteraction', 'blockInteraction'], qti: true },\n            inlineChoiceInteraction: { parents: ['inlineInteraction'], qti: true },\n            endAttemptInteraction: { parents: ['inlineInteraction'], qti: true },\n            customInteraction: { parents: ['block', 'flow', 'interaction'], qti: true },\n            _container: { parents: ['block'], qti: true } //a pseudo class introduced in TAO\n        },\n\n        cache: { containable: {}, children: {}, parents: {} },\n\n        getAllowedContainersElements(qtiClass, $container) {\n            const classes = QtiElements.getAllowedContainers(qtiClass);\n            let jqSelector = '';\n            for (let i in classes) {\n                if (!classes[i].qti) {\n                    //html element:\n                    jqSelector += `${classes[i]}, `;\n                }\n            }\n\n            if (jqSelector) {\n                jqSelector = jqSelector.substring(0, jqSelector.length - 2);\n            }\n\n            return $(jqSelector, $container ? $container : $(document)).filter(':not([data-qti-type])');\n        },\n\n        getAllowedContainers(qtiClass) {\n            let ret;\n            if (QtiElements.cache.containable[qtiClass]) {\n                ret = QtiElements.cache.containable[qtiClass];\n            } else {\n                ret = [];\n                const parents = QtiElements.getParentClasses(qtiClass, true);\n                for (let aClass in QtiElements.classes) {\n                    const model = QtiElements.classes[aClass];\n                    if (model.contains) {\n                        const intersect = _.intersection(model.contains, parents);\n                        if (intersect.length) {\n                            if (!model.abstract) {\n                                ret.push(aClass);\n                            }\n                            ret = _.union(ret, QtiElements.getChildClasses(aClass, true));\n                        }\n                    }\n                }\n                QtiElements.cache.containable[qtiClass] = ret;\n            }\n\n            return ret;\n        },\n\n        getAllowedContents(qtiClass, recursive, checked) {\n            let ret = [];\n            checked = checked || {};\n\n            const model = QtiElements.classes[qtiClass];\n            if (model && model.contains) {\n                for (let i in model.contains) {\n                    const contain = model.contains[i];\n                    if (!checked[contain]) {\n                        checked[contain] = true;\n\n                        //qtiClass can contain everything defined as its contents\n                        ret.push(contain);\n\n                        //qtiClass can also contain subclass of its contents\n                        const children = QtiElements.getChildClasses(contain, true);\n                        for (let j in children) {\n                            const child = children[j];\n                            if (!checked[child]) {\n                                checked[child] = true;\n\n                                ret.push(child);\n\n                                //adding children allowed contents depends on the option \"recursive\"\n                                if (recursive) {\n                                    ret = _.union(ret, QtiElements.getAllowedContents(child, true, checked));\n                                }\n                            }\n                        }\n\n                        //adding allowed contents of qtiClass' allowed contents depends on the option \"recursive\"\n                        if (recursive) {\n                            ret = _.union(ret, QtiElements.getAllowedContents(contain, true, checked));\n                        }\n                    }\n                }\n            }\n\n            //qtiClass can contain all allowed contents of its parents:\n            const parents = QtiElements.getParentClasses(qtiClass, true);\n            for (let i in parents) {\n                ret = _.union(ret, QtiElements.getAllowedContents(parents[i], recursive, checked));\n            }\n\n            return _.uniq(ret, false);\n        },\n\n        isAllowedClass(qtiContainerClass, qtiContentClass) {\n            const allowedClasses = QtiElements.getAllowedContents(qtiContainerClass);\n            return _.indexOf(allowedClasses, qtiContentClass) >= 0;\n        },\n\n        getParentClasses(qtiClass, recursive) {\n            let ret;\n            if (recursive && QtiElements.cache.parents[qtiClass]) {\n                ret = QtiElements.cache.parents[qtiClass];\n            } else {\n                ret = [];\n                if (QtiElements.classes[qtiClass]) {\n                    ret = QtiElements.classes[qtiClass].parents;\n                    if (recursive) {\n                        for (let i in ret) {\n                            ret = _.union(ret, QtiElements.getParentClasses(ret[i], recursive));\n                        }\n                        ret = _.uniq(ret, false);\n                    }\n                }\n                QtiElements.cache.parents[qtiClass] = ret;\n            }\n\n            return ret;\n        },\n\n        getChildClasses(qtiClass, recursive, type) {\n            let ret;\n            const cacheType = type ? type : 'all';\n            if (recursive && QtiElements.cache.children[qtiClass] && QtiElements.cache.children[qtiClass][cacheType]) {\n                ret = QtiElements.cache.children[qtiClass][cacheType];\n            } else {\n                ret = [];\n                for (let aClass in QtiElements.classes) {\n                    const model = QtiElements.classes[aClass];\n                    if (_.indexOf(model.parents, qtiClass) >= 0) {\n                        if (type) {\n                            if (model[type]) {\n                                ret.push(aClass);\n                            }\n                        } else {\n                            ret.push(aClass);\n                        }\n                        if (recursive) {\n                            ret = _.union(ret, QtiElements.getChildClasses(aClass, recursive, type));\n                        }\n                    }\n                }\n                if (!QtiElements.cache.children[qtiClass]) {\n                    QtiElements.cache.children[qtiClass] = {};\n                }\n                QtiElements.cache.children[qtiClass][cacheType] = ret;\n            }\n\n            return ret;\n        },\n\n        isBlock(qtiClass) {\n            return QtiElements.is(qtiClass, 'block');\n        },\n\n        isInline(qtiClass) {\n            return QtiElements.is(qtiClass, 'inline');\n        },\n\n        is(qtiClass, topClass) {\n            if (qtiClass === topClass) {\n                return true;\n            } else {\n                const parents = QtiElements.getParentClasses(qtiClass, true);\n                return _.indexOf(parents, topClass) >= 0;\n            }\n        },\n\n        /**\n         * Check wether an element is visible, using the feature viibility service\n         * @param {string} qtiClass - see the list of available classes\n         * @returns {boolean} true by default and false only if the element is explicitely registered as hidden\n         */\n        isVisible(qtiClass) {\n            if (this.is(qtiClass, 'customInteraction')) {\n                return featuresService.isVisible(`taoQtiItem/creator/customInteraction/${qtiClass.replace(/Interaction$/, '').replace(/^customInteraction\\./, '')}`);\n            }\n            if (this.is(qtiClass, 'interaction')) {\n                return featuresService.isVisible(`taoQtiItem/creator/interaction/${qtiClass.replace(/Interaction$/, '')}`);\n            }\n            return true;\n        },\n\n        /**\n         * Get the list of available elements for the authoring side\n         * The list of those element is statically defined, but we filter out elements that should be visible\n         * @returns {Object} the available elements\n         */\n        getAvailableAuthoringElements() {\n            const tagTitles = {\n                commonInteractions: __('Common Interactions'),\n                inlineInteractions: __('Inline Interactions'),\n                graphicInteractions: __('Graphic Interactions')\n            };\n\n            const authoringElements = {\n                choiceInteraction: {\n                    label: __('Choice Interaction'),\n                    description: __(\n                        'Select a single (radio buttons) or multiple (check boxes) responses among a set of choices.'\n                    ),\n                    icon: 'icon-choice',\n                    short: __('Choice'),\n                    qtiClass: 'choiceInteraction',\n                    tags: [tagTitles.commonInteractions, 'mcq'],\n                    group: 'common-interactions'\n                },\n                orderInteraction: {\n                    label: __('Order Interaction'),\n                    icon: 'icon-order',\n                    description: __('Arrange a list of choices in the correct order.'),\n                    short: __('Order'),\n                    qtiClass: 'orderInteraction',\n                    tags: [tagTitles.commonInteractions, 'ordering'],\n                    group: 'common-interactions'\n                },\n                associateInteraction: {\n                    label: __('Associate Interaction'),\n                    icon: 'icon-associate',\n                    description: __('Create pair(s) from a series of choices.'),\n                    short: __('Associate'),\n                    qtiClass: 'associateInteraction',\n                    tags: [tagTitles.commonInteractions, 'association'],\n                    group: 'common-interactions'\n                },\n                matchInteraction: {\n                    label: __('Match Interaction'),\n                    icon: 'icon-match',\n                    description: __(\n                        'Create association(s) between two sets of choices displayed in a table (row and column).'\n                    ),\n                    short: __('Match'),\n                    qtiClass: 'matchInteraction',\n                    tags: [tagTitles.commonInteractions, 'association'],\n                    group: 'common-interactions'\n                },\n                hottextInteraction: {\n                    label: __('Hottext Interaction'),\n                    icon: 'icon-hottext',\n                    description: __('Select one or more text parts (hottext) within a text.'),\n                    short: __('Hottext'),\n                    qtiClass: 'hottextInteraction',\n                    tags: [tagTitles.commonInteractions, 'text'],\n                    group: 'common-interactions'\n                },\n                gapMatchInteraction: {\n                    label: __('Gap Match Interaction'),\n                    icon: 'icon-gap-match',\n                    description: __(' Fill in the gaps in a text from a set of choices.'),\n                    short: __('Gap Match'),\n                    qtiClass: 'gapMatchInteraction',\n                    tags: [tagTitles.commonInteractions, 'text', 'association'],\n                    group: 'common-interactions'\n                },\n                sliderInteraction: {\n                    label: __('Slider Interaction'),\n                    icon: 'icon-slider',\n                    description: __('Select a value within a numerical range.'),\n                    short: __('Slider'),\n                    qtiClass: 'sliderInteraction',\n                    tags: [tagTitles.commonInteractions, 'special'],\n                    group: 'common-interactions'\n                },\n                extendedTextInteraction: {\n                    label: __('Extended Text Interaction'),\n                    icon: 'icon-extended-text',\n                    description: __(\n                        'Collect open-ended information in one or more text area(s) (strings or numeric values).'\n                    ),\n                    short: __('Extended Text'),\n                    qtiClass: 'extendedTextInteraction',\n                    tags: [tagTitles.commonInteractions, 'text'],\n                    group: 'common-interactions'\n                },\n                uploadInteraction: {\n                    label: __('File Upload Interaction'),\n                    icon: 'icon-upload',\n                    description: __('Upload a file (e.g. document, picture...) as a response.'),\n                    short: __('File Upload'),\n                    qtiClass: 'uploadInteraction',\n                    tags: [tagTitles.commonInteractions, 'special'],\n                    group: 'common-interactions'\n                },\n                mediaInteraction: {\n                    label: __('Media Interaction'),\n                    icon: 'icon-media',\n                    description: __(\n                        'Control the playing parameters (auto-start, loop) of a video or audio file and report the number of time it has been played.'\n                    ),\n                    short: __('Media'),\n                    qtiClass: 'mediaInteraction',\n                    tags: [tagTitles.commonInteractions, 'media'],\n                    group: 'common-interactions'\n                },\n                _container: {\n                    label: __('Text Block'),\n                    icon: 'icon-font',\n                    description: __(\n                        'Block contains the content (stimulus) of the item such as text or image. It is also required for Inline Interactions.'\n                    ),\n                    short: __('Block'),\n                    qtiClass: '_container',\n                    tags: [tagTitles.inlineInteractions, 'text'],\n                    group: 'inline-interactions'\n                },\n                inlineChoiceInteraction: {\n                    label: __('Inline Choice Interaction'),\n                    icon: 'icon-inline-choice',\n                    description: __('Select a choice from a drop-down list.'),\n                    short: __('Inline Choice'),\n                    qtiClass: 'inlineChoiceInteraction',\n                    tags: [tagTitles.inlineInteractions, 'inline-interactions', 'mcq'],\n                    group: 'inline-interactions'\n                },\n                textEntryInteraction: {\n                    label: __('Text Entry Interaction'),\n                    icon: 'icon-text-entry',\n                    description: __(\n                        'Collect open-ended information in a short text input (strings or numeric values).'\n                    ),\n                    short: __('Text Entry'),\n                    qtiClass: 'textEntryInteraction',\n                    tags: [tagTitles.inlineInteractions, 'inline-interactions', 'text'],\n                    group: 'inline-interactions'\n                },\n                endAttemptInteraction: {\n                    label: __('End Attempt Interaction'),\n                    icon: 'icon-end-attempt',\n                    description: __('Trigger the end of the item attempt.'),\n                    short: __('End Attempt'),\n                    qtiClass: 'endAttemptInteraction',\n                    tags: [tagTitles.inlineInteractions, 'inline-interactions', 'button', 'submit'],\n                    group: 'inline-interactions'\n                },\n                hotspotInteraction: {\n                    label: __('Hotspot Interaction'),\n                    icon: 'icon-hotspot',\n                    description: __('Select one or more areas (hotspots) displayed on an picture.'),\n                    short: __('Hotspot'),\n                    qtiClass: 'hotspotInteraction',\n                    tags: [tagTitles.graphicInteractions, 'mcq'],\n                    group: 'graphic-interactions'\n                },\n                graphicOrderInteraction: {\n                    label: __('Graphic Order Interaction'),\n                    icon: 'icon-graphic-order',\n                    description: __('Order the areas (hotspots) displayed on a picture.'),\n                    short: __('Order'),\n                    qtiClass: 'graphicOrderInteraction',\n                    tags: [tagTitles.graphicInteractions, 'ordering'],\n                    group: 'graphic-interactions'\n                },\n                graphicAssociateInteraction: {\n                    label: __('Graphic Associate Interaction'),\n                    icon: 'icon-graphic-associate',\n                    description: __('Create association(s) between areas (hotspots) displayed on a picture.'),\n                    short: __('Associate'),\n                    qtiClass: 'graphicAssociateInteraction',\n                    tags: [tagTitles.graphicInteractions, 'association'],\n                    group: 'graphic-interactions'\n                },\n                graphicGapMatchInteraction: {\n                    label: __('Graphic Gap Match Interaction'),\n                    icon: 'icon-graphic-gap',\n                    description: __('Fill in the gaps on a picture with a set of image choices.'),\n                    short: __('Gap Match'),\n                    qtiClass: 'graphicGapMatchInteraction',\n                    tags: [tagTitles.graphicInteractions, 'association'],\n                    group: 'graphic-interactions'\n                },\n                selectPointInteraction: {\n                    label: __('Select Point Interaction'),\n                    icon: 'icon-select-point',\n                    description: __('Position one or more points on a picture (response areas are not displayed).'),\n                    short: __('Select Point'),\n                    qtiClass: 'selectPointInteraction',\n                    tags: [tagTitles.graphicInteractions],\n                    group: 'graphic-interactions'\n                }\n            };\n\n            //filter out hidden elements\n            const availableElements = {};\n            for (const [elementId, element] of Object.entries(authoringElements)) {\n                if (this.isVisible(elementId)) {\n                    availableElements[elementId] = element;\n                }\n            }\n            return availableElements;\n        }\n    };\n\n    return QtiElements;\n});\n\n","/*\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016-2022 (original work) Open Assessment Technologies SA;\n *\n */\ndefine('taoQtiItem/portableElementRegistry/factory/ciRegistry',[\n    'lodash',\n    'i18n',\n    'taoQtiItem/portableElementRegistry/factory/factory',\n    'taoQtiItem/qtiCreator/helper/qtiElements'\n], function (_, __, portableElementRegistry, qtiElements) {\n    'use strict';\n\n    /**\n     * Create a ney interaction registry instance\n     * interaction registry need to register newly loaded creator hooks in the list of available qti authoring elements\n     *\n     * @returns {Object} registry instance\n     */\n    return function customInteractionRegistry() {\n        return portableElementRegistry({\n            /**\n             * Get the authoring information for a given custom interaction\n             * @param {string} typeIdentifier - the interaction type identifier\n             * @param {Object} [options]\n             * @param {string|number} [options.version] - the interaction version\n             * @param {boolean} [options.enabledOnly] - to only get interaction enabled && visible\n             * @returns {Object} the authoring info\n             */\n            getAuthoringData(typeIdentifier, options = {}) {\n                options = _.defaults(options || {}, { version: 0, enabledOnly: false });\n                const pciModel = this.get(typeIdentifier, options.version);\n                const qtiClass = `customInteraction.${pciModel.typeIdentifier}`;\n                if (\n                    pciModel &&\n                    pciModel.creator &&\n                    pciModel.creator.hook &&\n                    pciModel.creator.icon &&\n                    ((pciModel.enabled && qtiElements.isVisible(qtiClass)) || !options.enabledOnly)\n                ) {\n                    return {\n                        label: pciModel.label, //currently no translation available\n                        icon: pciModel.creator.icon.replace(new RegExp(`^${typeIdentifier}/`), pciModel.baseUrl),\n                        short: pciModel.short,\n                        description: pciModel.description,\n                        qtiClass, //custom interaction is block type\n                        tags: _.union([__('Custom Interactions')], pciModel.tags),\n                        group: 'custom-interactions'\n                    };\n                }\n            }\n        }).on('creatorsloaded', function () {\n            const creators = this.getLatestCreators();\n            _.forEach(creators, function (creator, typeIdentifier) {\n                qtiElements.classes[`customInteraction.${typeIdentifier}`] = {\n                    parents: ['customInteraction'],\n                    qti: true\n                };\n            });\n        });\n    };\n});\n\n","/*\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA;\n *\n */\ndefine('taoQtiItem/portableElementRegistry/ciRegistry',['lodash', 'taoQtiItem/portableElementRegistry/factory/ciRegistry', 'module'], function (_, ciRegistry, module){\n    'use strict';\n\n    //create a preregistered singleton of ciRegistry\n    var registry = ciRegistry();\n    var providers = [];\n    var config = module.config();\n\n    if(config && config.providers){\n        providers = config.providers;\n    }\n\n    _.each(providers, function(provider){\n        if(provider.name && provider.module){\n            registry.registerProvider(provider.module);\n        }\n    });\n\n    return registry;\n});\n","/*\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA;\n *\n */\ndefine('taoQtiItem/portableElementRegistry/factory/icRegistry',[\n    'lodash',\n    'taoQtiItem/portableElementRegistry/factory/factory'\n], function (_, portableElementRegistry){\n    'use strict';\n\n    /**\n     * Info control registry has currently no additonal fonctionalities than the basic portable element registry\n     *\n     * @returns {Object} registry instance\n     */\n    return function infoControlRegistry(){\n        return portableElementRegistry();\n    }\n\n});\n","/*\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA;\n *\n */\ndefine('taoQtiItem/portableElementRegistry/icRegistry',['lodash', 'taoQtiItem/portableElementRegistry/factory/icRegistry', 'module'], function (_, icRegistry, module){\n    'use strict';\n\n    //create a preregistered singleton of icRegistry\n    var registry = icRegistry();\n    var providers = [];\n    var config = module.config();\n\n    if(config && config.providers){\n        providers = config.providers;\n    }\n\n    _.each(providers, function(provider){\n        if(provider.name && provider.module){\n            registry.registerProvider(provider.module);\n        }\n    });\n\n    return registry;\n});\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA;\n */\n\ndefine('taoQtiItem/portableElementRegistry/assetManager/portableAssetStrategy',[\n    'taoQtiItem/portableElementRegistry/ciRegistry',\n    'taoQtiItem/portableElementRegistry/icRegistry'\n], function (ciRegistry, icRegistry) {\n    'use strict';\n\n    function getBaseUrlByIdentifier(typeIdentifier) {\n        if (ciRegistry.get(typeIdentifier)) {\n            return ciRegistry.getBaseUrl(typeIdentifier);\n        }\n        if (icRegistry.get(typeIdentifier)) {\n            return icRegistry.getBaseUrl(typeIdentifier);\n        }\n        return typeIdentifier;\n    }\n\n    //strategy to resolve portable info control and portable interactions paths.\n    //It should never be reached in the stack the usual way and should be called only using resolveBy.\n    return {\n        name: 'portableElementLocation',\n        handle: function handlePortableElementLocation(url) {\n\n            if (url.file === url.path) {\n                return getBaseUrlByIdentifier(url.file);\n            } else if (url.source === url.relative) {\n                return url.relative.replace(/^(\\.\\/)?([a-z_0-9]+)\\/(.*)/i, function (fullmatch, $1, typeIdentifier, relPath) {\n                    var runtimeLocation = getBaseUrlByIdentifier(typeIdentifier);\n                    if (runtimeLocation) {\n                        return runtimeLocation + '/' + relPath;\n                    }\n                    return fullmatch;\n                });\n            }\n        }\n    };\n});\n","define('taoQtiItem/qtiCommonRenderer/renderers/config',['lodash', 'context', 'ui/themes', 'taoItems/assets/manager', 'taoItems/assets/strategies', 'module', 'taoQtiItem/portableElementRegistry/assetManager/portableAssetStrategy'], function (_, context, themes, assetManagerFactory, assetStrategies, module, portableAssetStrategy) { 'use strict';\n\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    context = context && Object.prototype.hasOwnProperty.call(context, 'default') ? context['default'] : context;\n    themes = themes && Object.prototype.hasOwnProperty.call(themes, 'default') ? themes['default'] : themes;\n    assetManagerFactory = assetManagerFactory && Object.prototype.hasOwnProperty.call(assetManagerFactory, 'default') ? assetManagerFactory['default'] : assetManagerFactory;\n    assetStrategies = assetStrategies && Object.prototype.hasOwnProperty.call(assetStrategies, 'default') ? assetStrategies['default'] : assetStrategies;\n    module = module && Object.prototype.hasOwnProperty.call(module, 'default') ? module['default'] : module;\n    portableAssetStrategy = portableAssetStrategy && Object.prototype.hasOwnProperty.call(portableAssetStrategy, 'default') ? portableAssetStrategy['default'] : portableAssetStrategy;\n\n    /**\n     * This program is free software; you can redistribute it and/or\n     * modify it under the terms of the GNU General Public License\n     * as published by the Free Software Foundation; under version 2\n     * of the License (non-upgradable).\n     *\n     * This program is distributed in the hope that it will be useful,\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n     * GNU General Public License for more details.\n     *\n     * You should have received a copy of the GNU General Public License\n     * along with this program; if not, write to the Free Software\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n     *\n     * Copyright (c) 2014 (original work) Open Assessment Technologies SA;\n     */\n\n    var itemThemes = themes.get('items');\n    var moduleConfig = module.config();\n\n    //Create asset manager stack\n    var assetManager = assetManagerFactory(\n        [\n            {\n                name: 'theme',\n                handle: function handleTheme(url) {\n                    if (\n                        itemThemes &&\n                        url.path &&\n                        (url.path === itemThemes.base || _.contains(_.pluck(itemThemes.available, 'path'), url.path))\n                    ) {\n                        return context.root_url + url.toString();\n                    }\n                }\n            },\n            assetStrategies.taomedia,\n            assetStrategies.external,\n            assetStrategies.base64,\n            assetStrategies.itemCssNoCache,\n            assetStrategies.baseUrl,\n            portableAssetStrategy\n        ],\n        { baseUrl: '' }\n    ); //baseUrl is not predefined in the config, but should be set upon renderer instantiating\n\n    //renderers locations\n    var locations = {\n        assessmentItem: 'taoQtiItem/qtiCommonRenderer/renderers/Item',\n        _container: 'taoQtiItem/qtiCommonRenderer/renderers/Container',\n        _simpleFeedbackRule: false,\n        _tooltip: 'taoQtiItem/qtiCommonRenderer/renderers/Tooltip',\n        stylesheet: 'taoQtiItem/qtiCommonRenderer/renderers/Stylesheet',\n        outcomeDeclaration: false,\n        responseDeclaration: false,\n        responseProcessing: false,\n        figure: 'taoQtiItem/qtiCommonRenderer/renderers/Figure',\n        img: 'taoQtiItem/qtiCommonRenderer/renderers/Img',\n        figcaption: 'taoQtiItem/qtiCommonRenderer/renderers/Figcaption',\n        math: 'taoQtiItem/qtiCommonRenderer/renderers/Math',\n        object: 'taoQtiItem/qtiCommonRenderer/renderers/Object',\n        table: 'taoQtiItem/qtiCommonRenderer/renderers/Table',\n        printedVariable: 'taoQtiItem/qtiCommonRenderer/renderers/PrintedVariable',\n        rubricBlock: 'taoQtiItem/qtiCommonRenderer/renderers/RubricBlock',\n        modalFeedback: 'taoQtiItem/qtiCommonRenderer/renderers/ModalFeedback',\n        prompt: 'taoQtiItem/qtiCommonRenderer/renderers/interactions/Prompt',\n        choiceInteraction: 'taoQtiItem/qtiCommonRenderer/renderers/interactions/ChoiceInteraction',\n        extendedTextInteraction: 'taoQtiItem/qtiCommonRenderer/renderers/interactions/ExtendedTextInteraction',\n        orderInteraction: 'taoQtiItem/qtiCommonRenderer/renderers/interactions/OrderInteraction',\n        associateInteraction: 'taoQtiItem/qtiCommonRenderer/renderers/interactions/AssociateInteraction',\n        matchInteraction: 'taoQtiItem/qtiCommonRenderer/renderers/interactions/MatchInteraction',\n        textEntryInteraction: 'taoQtiItem/qtiCommonRenderer/renderers/interactions/TextEntryInteraction',\n        sliderInteraction: 'taoQtiItem/qtiCommonRenderer/renderers/interactions/SliderInteraction',\n        inlineChoiceInteraction: 'taoQtiItem/qtiCommonRenderer/renderers/interactions/InlineChoiceInteraction',\n        'simpleChoice.choiceInteraction': 'taoQtiItem/qtiCommonRenderer/renderers/choices/SimpleChoice.ChoiceInteraction',\n        'simpleChoice.orderInteraction': 'taoQtiItem/qtiCommonRenderer/renderers/choices/SimpleChoice.OrderInteraction',\n        hottext: 'taoQtiItem/qtiCommonRenderer/renderers/choices/Hottext',\n        gap: 'taoQtiItem/qtiCommonRenderer/renderers/choices/Gap',\n        gapText: 'taoQtiItem/qtiCommonRenderer/renderers/choices/GapText',\n        'simpleAssociableChoice.matchInteraction':\n            'taoQtiItem/qtiCommonRenderer/renderers/choices/SimpleAssociableChoice.MatchInteraction',\n        'simpleAssociableChoice.associateInteraction':\n            'taoQtiItem/qtiCommonRenderer/renderers/choices/SimpleAssociableChoice.AssociateInteraction',\n        inlineChoice: 'taoQtiItem/qtiCommonRenderer/renderers/choices/InlineChoice',\n        hottextInteraction: 'taoQtiItem/qtiCommonRenderer/renderers/interactions/HottextInteraction',\n        hotspotInteraction: 'taoQtiItem/qtiCommonRenderer/renderers/interactions/HotspotInteraction',\n        hotspotChoice: false,\n        gapMatchInteraction: 'taoQtiItem/qtiCommonRenderer/renderers/interactions/GapMatchInteraction',\n        selectPointInteraction: 'taoQtiItem/qtiCommonRenderer/renderers/interactions/SelectPointInteraction',\n        graphicOrderInteraction: 'taoQtiItem/qtiCommonRenderer/renderers/interactions/GraphicOrderInteraction',\n        mediaInteraction: 'taoQtiItem/qtiCommonRenderer/renderers/interactions/MediaInteraction',\n        uploadInteraction: 'taoQtiItem/qtiCommonRenderer/renderers/interactions/UploadInteraction',\n        graphicGapMatchInteraction: 'taoQtiItem/qtiCommonRenderer/renderers/interactions/GraphicGapMatchInteraction',\n        gapImg: 'taoQtiItem/qtiCommonRenderer/renderers/choices/GapImg',\n        graphicAssociateInteraction: 'taoQtiItem/qtiCommonRenderer/renderers/interactions/GraphicAssociateInteraction',\n        associableHotspot: false,\n        customInteraction: 'taoQtiItem/qtiCommonRenderer/renderers/interactions/PortableCustomInteraction',\n        infoControl: 'taoQtiItem/qtiCommonRenderer/renderers/PortableInfoControl',\n        include: 'taoQtiItem/qtiCommonRenderer/renderers/Include',\n        endAttemptInteraction: 'taoQtiItem/qtiCommonRenderer/renderers/interactions/EndAttemptInteraction'\n    };\n\n    var config = {\n        name: 'commonRenderer',\n        locations: locations,\n        options: {\n            assetManager: assetManager,\n            themes: itemThemes,\n            enableDragAndDrop: {\n                associate: !!moduleConfig.associateDragAndDrop,\n                gapMatch: !!moduleConfig.gapMatchDragAndDrop,\n                graphicGapMatch: !!moduleConfig.graphicGapMatchDragAndDrop,\n                order: !!moduleConfig.orderDragAndDrop\n            },\n            messages: moduleConfig.messages\n        }\n    };\n\n    return config;\n\n});\n\n","define('taoQtiItem/qtiCommonRenderer/renderers/Renderer',['taoQtiItem/qtiRunner/core/Renderer', 'taoQtiItem/qtiCommonRenderer/renderers/config'], function (Renderer$1, config) { 'use strict';\n\n\tRenderer$1 = Renderer$1 && Object.prototype.hasOwnProperty.call(Renderer$1, 'default') ? Renderer$1['default'] : Renderer$1;\n\tconfig = config && Object.prototype.hasOwnProperty.call(config, 'default') ? config['default'] : config;\n\n\t/**\n\t * This program is free software; you can redistribute it and/or\n\t * modify it under the terms of the GNU General Public License\n\t * as published by the Free Software Foundation; under version 2\n\t * of the License (non-upgradable).\n\t *\n\t * This program is distributed in the hope that it will be useful,\n\t * but WITHOUT ANY WARRANTY; without even the implied warranty of\n\t * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\t * GNU General Public License for more details.\n\t *\n\t * You should have received a copy of the GNU General Public License\n\t * along with this program; if not, write to the Free Software\n\t * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n\t *\n\t * Copyright (c) 2014 (original work) Open Assessment Technologies SA;\n\t */\n\n\tvar Renderer = Renderer$1.build(config.locations, config.name, config.options);\n\n\treturn Renderer;\n\n});\n\n","define('taoQtiItem/runner/provider/manager/userModules',['lodash', 'module'], function (_, module) { 'use strict';\n\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    module = module && Object.prototype.hasOwnProperty.call(module, 'default') ? module['default'] : module;\n\n    /**\n     * This program is free software; you can redistribute it and/or\n     * modify it under the terms of the GNU General Public License\n     * as published by the Free Software Foundation; under version 2\n     * of the License (non-upgradable).\n     *\n     * This program is distributed in the hope that it will be useful,\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n     * GNU General Public License for more details.\n     *\n     * You should have received a copy of the GNU General Public License\n     * along with this program; if not, write to the Free Software\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n     *\n     * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n     */\n\n    var userModules = {\n        /**\n         * Load user modules defined in the module config\n         * @param {Array} [userModules] - manually specify user modules to load instead of getting them from the module config\n         * @returns {Promise}\n         */\n        load: function load(userModules) {\n            var config = module.config();\n\n            if (!userModules || !_.isArray(userModules)) {\n                if (config && config.userModules && _.isArray(config.userModules)) {\n                    userModules = config.userModules;\n                } else {\n                    userModules = [];\n                }\n            }\n            if(!userModules.length){\n                return Promise.resolve();\n            }\n            return new Promise(function(resolve, reject) {\n                window.require(userModules, function() {\n                    _.forEach(arguments, function(dependency) {\n                        if (dependency && _.isFunction(dependency.exec)) {\n                            dependency.exec();\n                        }\n                    });\n                    resolve();\n                }, function(err) {\n                    reject(err.message);\n                });\n            });\n        }\n    };\n\n    return userModules;\n\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n */\ndefine('taoQtiItem/runtime/qtiBootstrap',[\n    'jquery',\n    'lodash',\n    'module',\n    'taoQtiItem/qtiRunner/core/QtiRunner',\n    'taoQtiItem/qtiCommonRenderer/renderers/Renderer',\n    'iframeNotifier',\n    'core/history',\n    'taoQtiItem/runner/provider/manager/userModules'\n], function($, _, module, QtiRunner, Renderer, iframeNotifier, history, userModules){\n    'use strict';\n\n    //fix backspace going back into the history\n    history.fixBrokenBrowsers();\n\n    /**\n     * The bootstrap is used to set up a QTI item at runtime. It connects to the itemApi.\n     *\n     * @author Bertrand Chevrier <bertrand@taotesting.com>\n     * @exports taoQtiItem/runtime/qtiBootstrap\n     *\n     * @param {Object} runnerContext - the item context\n     */\n    return function bootstrap (runnerContext){\n\n        //reconnect to global itemApi function\n        window.onItemApiReady = function onItemApiReady(itemApi) {\n            var qtiRunner = new QtiRunner();\n            var coreItemData = runnerContext.itemData;\n            var variableElementsData = _.merge(runnerContext.variableElements, itemApi.params.contentVariables || {});\n\n            var renderer = new Renderer();\n\n            // Makes the runner interface available from outside the frame\n            // for preview.\n            window.qtiRunner = qtiRunner;\n\n            qtiRunner.setItemApi(itemApi);\n            qtiRunner.setRenderer(renderer);\n\n            qtiRunner.loadItemData(coreItemData, function() {\n\n                qtiRunner.loadElements(variableElementsData, function() {\n\n                    qtiRunner.renderItem(undefined, function() {\n\n                        //userModules loading\n                        //we use any user modules bound to this module configuration instead of the ones bound to the new test runner\n                        var userModulesOverride;\n                        var config = module.config();\n                        if (config && config.userModules && _.isArray(config.userModules) && config.userModules.length > 0) {\n                            userModulesOverride = config.userModules;\n                        }\n                        userModules.load(userModulesOverride)\n                            .then(function() {\n\n                                //exec user scripts\n                                if (_.isArray(runnerContext.userScripts)) {\n                                    require(runnerContext.userScripts, function() {\n                                        _.forEach(arguments, function(dependency) {\n                                            if (_.isFunction(dependency.exec)) {\n                                                dependency.exec.call(null, runnerContext.userVars);\n                                            }\n                                        });\n                                    });\n                                }\n\n                                iframeNotifier.parent('itemloaded');\n\n                                //IE9/10 loose the iframe focus, so we force getting it back.\n                                _.defer(function(){\n                                    window.focus();\n                                });\n                            })\n                            .catch(function(err) {\n                                throw new Error('Error in user modules : ' + err.message);\n                            });\n\n                    });\n                });\n            });\n        };\n\n        //if the item is longer to load,\n        _.defer(function(){\n           //tell the parent to connect the item api\n           iframeNotifier.parent('itemready');\n       });\n\n    };\n});\n\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n */\n\ndefine('taoQtiItem/runtime/qtiLoader',[\n    'taoQtiItem/runtime/qtiBootstrap',\n    'css!taoCss/tao-main-style'\n], function(qtiBootstrap){\n    'use strict';\n\n    return {\n        start : function start(){\n            //the context is set into the template and bound to the tao namespace in global scope\n            var runnerContext = window.tao.qtiRunnerContext;\n            qtiBootstrap(runnerContext);\n        }\n    };\n});\n\n","\ndefine(\"taoQtiItem/loader/qtiLoader.bundle\", function(){});\n","window.bundles = (window.bundles || []).concat([\"taoQtiItem/loader/taoQtiItem.min\"]);\n"]}